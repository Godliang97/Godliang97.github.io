<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-08-12T11:13:35.328Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>一只栗子球</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Cookie&amp;Session</title>
    <link href="http://example.com/2021/08/12/Cookie/"/>
    <id>http://example.com/2021/08/12/Cookie/</id>
    <published>2021-08-12T07:06:10.000Z</published>
    <updated>2021-08-12T11:13:35.328Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><span id="more"></span><h3 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h3><pre><code>1. 会话：一次会话中包含多次请求和响应。    * 一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止2. 功能：在一次会话的范围内的多次请求间，共享数据3. 方式：    1. 客户端会话技术：Cookie    2. 服务器端会话技术：Session</code></pre><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">1.概念：客户端会话技术，将数据保存到客户端</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 快速入门：</span><br><span class="line"><span class="bullet">*</span> 使用步骤：</span><br><span class="line"><span class="bullet">1.</span> 创建Cookie对象，绑定数据</span><br><span class="line"><span class="bullet">*</span> new Cookie(String name,String value)</span><br><span class="line"><span class="bullet">2.</span> 发送Cookie对象</span><br><span class="line"><span class="bullet">*</span> response.addCookie(cookie cookie)</span><br><span class="line"><span class="bullet">3.</span> 获取Cookie对象，拿到数据</span><br><span class="line"><span class="bullet">*</span> Cookie[] request.getCookie()</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> 实现原理</span><br><span class="line"><span class="bullet">*</span> 基于响应头set-cookie和请求头cookie实现</span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> cookie的细节</span><br><span class="line"><span class="bullet">1.</span> 一次可不可以发送多个cookie？</span><br><span class="line"><span class="bullet">*</span> 可以</span><br><span class="line"><span class="bullet">*</span> 可以创建多个Cookie对象，使用response调用多次addCookie方法发送cookie即可</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> cookie在浏览器中保存多长时间？</span><br><span class="line"><span class="bullet">1.</span> 默认情况下，当浏览器关闭后，Cookie数据被销毁</span><br><span class="line"><span class="bullet">2.</span> 持久化存储：</span><br><span class="line"><span class="bullet">*</span> setMaxAge(int seconds)</span><br><span class="line"><span class="bullet">1.</span> 正数：将cookie数据写到硬盘的文件中。持久化存储。并指定cookie存活时间，时间到后，cookie文件自动失效</span><br><span class="line"><span class="bullet">2.</span> 负数：默认值</span><br><span class="line"><span class="bullet">3.</span> 零：删除cookie信息</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> cookie能不能存中文？</span><br><span class="line"><span class="bullet">*</span> 在tomcat 8 之前 cookie不能直接存储中文数据</span><br><span class="line"><span class="bullet">*</span> 需要将中文数据转码---一般采用URL编码(%E3)</span><br><span class="line"><span class="bullet">*</span> 在tomcat 8 之后，cookie支持中文数据。特殊字符还是不支持，建议使用URL编码存储，URL解码解析</span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> cookie共享问题？</span><br><span class="line"><span class="bullet">1.</span> 假设在一个tomcat服务器中，部署了多个web项目，那么在这些web项目中cookie能不能共享？</span><br><span class="line"><span class="bullet">*</span> 默认情况下cookie不能共享</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> setPath(String path):设置cookie的获取范围。默认情况下，设置当前的虚拟目录</span><br><span class="line"><span class="bullet">*</span> 如果要共享，则可以将path设置为&quot;/&quot;</span><br></pre></td></tr></table></figure><p>​            </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">2.</span> 不同的tomcat服务器间cookie共享问题？</span><br><span class="line"><span class="bullet">*</span> setDomain(String path)如果设置一级域名相同，那么多个服务器之间cookie可以共享</span><br><span class="line"><span class="bullet">*</span> setDomain(&quot;.baidu.com&quot;),那么tieba.baidu.com和news.baidu.com中cookie可以共享</span><br><span class="line"></span><br><span class="line"><span class="bullet">5.</span> Cookie的特点和作用</span><br><span class="line"><span class="bullet">1.</span> cookie存储数据在客户端浏览器</span><br><span class="line"><span class="bullet">2.</span> 浏览器对于单个cookie的大小有限制(4kb) 以及 对同一个域名下的总cookie数量也有限制(20)</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 作用：</span><br><span class="line"><span class="bullet">1.</span> cookie一般用于存储少量的不太敏感的数据</span><br><span class="line"><span class="bullet">2.</span> 在不登录的情况下，完成服务器对客户端的身份识别</span><br><span class="line"></span><br><span class="line"><span class="bullet">6.</span> 案例：记住上一次访问时间</span><br><span class="line"><span class="bullet">1.</span> 需求：</span><br><span class="line"><span class="bullet">1.</span> 访问一个Servlet，如果是第一次访问你，则提示：您好，欢迎您首次访问</span><br><span class="line"><span class="bullet">2.</span> 如果不是第一次访问，则提示：欢迎回来，您上次访问的时间为：显示时间字符串</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 分析：</span><br><span class="line"><span class="bullet">1.</span> 可以采用cookie来完成</span><br><span class="line"><span class="bullet">2.</span> 在服务器中的Servlet判断是否有一个名为lastTime的cookie</span><br><span class="line"><span class="bullet">1.</span> 有：不是第一次访问</span><br><span class="line"><span class="bullet">1.</span> 响应数据：欢迎回来，您上次访问的时间为：2021年4月7日11:29:42</span><br><span class="line"><span class="bullet">2.</span> 写回Cookie：lastTime=2021年4月7日11:30:18</span><br><span class="line"><span class="bullet">2.</span> 没有：第一次访问</span><br><span class="line"><span class="bullet">1.</span> 响应数据：您好，欢迎您首次访问</span><br><span class="line"><span class="bullet">2.</span> 写回Cookie：lastTime=2021年4月7日11:31:37</span><br><span class="line"></span><br><span class="line"><span class="code">代码：</span></span><br><span class="line"><span class="code">protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span></span><br><span class="line"><span class="code">        //设置响应的消息体的数据格式及编码</span></span><br><span class="line"><span class="code">        response.setContentType(&quot;text/html;charset=utf-8&quot;);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        //1.获取所有Cookie</span></span><br><span class="line"><span class="code">        Cookie[] cookies = request.getCookies();</span></span><br><span class="line"><span class="code">        boolean flag = false;//没有cookie为lastTime</span></span><br><span class="line"><span class="code">        //2.遍历cookie数组</span></span><br><span class="line"><span class="code">        if (cookies != null &amp;&amp; cookies.length &gt; 0) &#123;</span></span><br><span class="line"><span class="code">            for (Cookie cookie : cookies) &#123;</span></span><br><span class="line"><span class="code">                //3.获取cookie的名称</span></span><br><span class="line"><span class="code">                String name = cookie.getName();</span></span><br><span class="line"><span class="code">                //4.判断名称是否是lastTime</span></span><br><span class="line"><span class="code">                if (&quot;lastTime&quot;.equals(name)) &#123;</span></span><br><span class="line"><span class="code">                    //有该cookie，不是第一次访问</span></span><br><span class="line"><span class="code">                    flag = true;//有lastTime的cookie</span></span><br><span class="line"><span class="code">                    //设置Cookie的value</span></span><br><span class="line"><span class="code">                    //获取当前时间的字符串，重新设置cookie的值，重新发送cookie</span></span><br><span class="line"><span class="code">                    Date date = new Date();</span></span><br><span class="line"><span class="code">                    SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy年MM月dd日 HH:mm:ss&quot;);</span></span><br><span class="line"><span class="code">                    String str_date = sdf.format(date);</span></span><br><span class="line"><span class="code">                    System.out.println(&quot;编码前：&quot; + str_date);</span></span><br><span class="line"><span class="code">                    //URL编码</span></span><br><span class="line"><span class="code">                    str_date = URLEncoder.encode(str_date, &quot;utf-8&quot;);</span></span><br><span class="line"><span class="code">                    System.out.println(&quot;编码后 &quot; + str_date);</span></span><br><span class="line"><span class="code">                    cookie.setValue(str_date);</span></span><br><span class="line"><span class="code">                    //设置cookie的存活时间</span></span><br><span class="line"><span class="code">                    cookie.setMaxAge(60 * 60 * 24 * 30);//一个月</span></span><br><span class="line"><span class="code">                    response.addCookie(cookie);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">                    //响应数据</span></span><br><span class="line"><span class="code">                    //获取Cookie的value 时间</span></span><br><span class="line"><span class="code">                    String value = cookie.getValue();</span></span><br><span class="line"><span class="code">                    System.out.println(&quot;解码前 &quot; + value);</span></span><br><span class="line"><span class="code">                    //URL解码</span></span><br><span class="line"><span class="code">                    value = URLDecoder.decode(value, &quot;utf-8&quot;);</span></span><br><span class="line"><span class="code">                    System.out.println(&quot;解码后 &quot; + value);</span></span><br><span class="line"><span class="code">                    response.getWriter().write(&quot;&lt;h1&gt;欢迎回来，您上次的访问时间为:&quot; + value + &quot;&lt;/h1&gt;&quot;);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">                    break;</span></span><br><span class="line"><span class="code">                &#125;</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        if (cookies == null || cookies.length == 0 || flag == false) &#123;</span></span><br><span class="line"><span class="code">            //没有，第一次访问</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">            //设置Cookie的value</span></span><br><span class="line"><span class="code">            //获取当前时间的字符串，重新设置cookie的值，重新发送cookie</span></span><br><span class="line"><span class="code">            Date date = new Date();</span></span><br><span class="line"><span class="code">            SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy年MM月dd日 HH:mm:ss&quot;);</span></span><br><span class="line"><span class="code">            String str_date = sdf.format(date);</span></span><br><span class="line"><span class="code">            System.out.println(&quot;编码前：&quot; + str_date);</span></span><br><span class="line"><span class="code">            //URL编码</span></span><br><span class="line"><span class="code">            str_date = URLEncoder.encode(str_date, &quot;utf-8&quot;);</span></span><br><span class="line"><span class="code">            System.out.println(&quot;编码后 &quot; + str_date);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">            Cookie cookie = new Cookie(&quot;lastTime&quot;, str_date);</span></span><br><span class="line"><span class="code">            //设置cookie的存活时间</span></span><br><span class="line"><span class="code">            cookie.setMaxAge(60 * 60 * 24 * 30);//一个月</span></span><br><span class="line"><span class="code">            response.addCookie(cookie);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">            response.getWriter().write(&quot;&lt;h1&gt;您好，欢迎您首次访问&lt;/h1&gt;&quot;);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span></span><br><span class="line"><span class="code">        this.doPost(request, response);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br></pre></td></tr></table></figure><h3 id="JSP-入门学习"><a href="#JSP-入门学习" class="headerlink" title="JSP:入门学习"></a>JSP:入门学习</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 概念：</span><br><span class="line"><span class="bullet">*</span> Java Server Pages:java服务器端页面</span><br><span class="line"><span class="bullet">*</span> 可以理解为：一个特殊的页面，其中既可以指定定义html标签，又可以定义java代码</span><br><span class="line"><span class="bullet">*</span> 用于简化书写！！！</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 原理</span><br><span class="line"><span class="bullet">*</span> JSP本质上就是一个Servlet</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> JSP的脚本：JSP定义Java代码的方式</span><br><span class="line"><span class="bullet">1.</span> &lt;% %&gt;:定义的java代码，在servlet方法中。service方法中可以定义什么，该脚本中就可以定义什么</span><br><span class="line"><span class="bullet">2.</span> &lt;%! %&gt;：定义的java代码，在jsp转换后的java类的成员变量</span><br><span class="line"><span class="bullet">3.</span> &lt;%= %&gt;：定义的java代码，会输出到页面上。输出语句中可以定义什么，该脚本中就可以定义什么。</span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> JSP的内置对象：</span><br><span class="line"><span class="bullet">*</span> 在jsp页面中不需要获取和创建，可以直接使用的对象</span><br><span class="line"><span class="bullet">*</span> jsp一共有9个内置对象</span><br><span class="line"><span class="bullet">*</span> request</span><br><span class="line"><span class="bullet">*</span> response</span><br><span class="line"><span class="bullet">*</span> out：字符输出流对象。可以将数据输出到页面上，和response.getWrite()类似</span><br><span class="line"><span class="bullet">*</span> response.getWrite()和out.write()的区别：</span><br><span class="line"><span class="bullet">*</span> 在tomcat服务器真正给客户端做出响应之前，会先找response缓冲区数据，在找out缓冲区数据。</span><br><span class="line"><span class="bullet">*</span> respone.getWrite()数据输出永远在out.write()之前</span><br></pre></td></tr></table></figure><h3 id="Session："><a href="#Session：" class="headerlink" title="Session："></a>Session：</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 概念：服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。HttpSession</span><br><span class="line"><span class="bullet">2.</span> 快速入门：</span><br><span class="line"><span class="bullet">1.</span> 获取HttpSession对象：</span><br><span class="line"><span class="code">HttpSession session = request.getSession()</span></span><br><span class="line"><span class="code">2. 使用HttpSession对象：</span></span><br><span class="line"><span class="code">Object getAttribute(String name)</span></span><br><span class="line"><span class="code">void setAttribute(String name,Object value)</span></span><br><span class="line"><span class="code">void removeAttribute(String name)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3.</span> 原理：</span><br><span class="line"><span class="bullet">*</span> Session的实现是依赖于Cookie的。</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">4.</span> 细节：</span><br><span class="line"><span class="bullet">1.</span> 当客户端关闭后，服务器不关闭，两次获取session是否为同一个？</span><br><span class="line"><span class="bullet">*</span> 默认情况下。不是</span><br><span class="line"><span class="bullet">*</span> 如果需要相同，则可以创建Cookie，键为JSESSIONID，设置最大存活时间，让cookie持久化保存。</span><br><span class="line"><span class="code">Cookie c = new Cookie(&quot;JSESSIONID&quot;, session.getId());</span></span><br><span class="line"><span class="code">        c.setMaxAge(60*60);</span></span><br><span class="line"><span class="code">        response.addCookie(c);</span></span><br><span class="line"><span class="code">2. 客户端不关闭，服务器端关闭后，两次获取的session是同一个么？</span></span><br><span class="line"><span class="code">* 不是同一个，但是要确保数据不丢失。tomcat自动完成以下工作</span></span><br><span class="line"><span class="code">* session的钝化：</span></span><br><span class="line"><span class="code">* 在服务器正常关闭之前，将session对象序列化到硬盘上</span></span><br><span class="line"><span class="code">* session的活化：</span></span><br><span class="line"><span class="code">* 在服务器启动后，将session文件转化为内存中的session对象即可。</span></span><br><span class="line"><span class="code">3. session什么时候被销毁？</span></span><br><span class="line"><span class="code">1. 服务器关闭</span></span><br><span class="line"><span class="code">2. session对象调用invalidate()</span></span><br><span class="line"><span class="code">3. session默认失效时间 30分钟</span></span><br><span class="line"><span class="code">选择性配置修改</span></span><br><span class="line"><span class="code">&lt;session-config&gt;</span></span><br><span class="line"><span class="code">&lt;session-timeout&gt;30&lt;/session-timeout&gt;</span></span><br><span class="line"><span class="code">&lt;/session-config&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">5.session的特点</span><br><span class="line"><span class="bullet">1.</span> session存储数据在服务器端，Cookie在客户端</span><br><span class="line"><span class="bullet">2.</span> session没有数据大小限制，Cookie有</span><br><span class="line"><span class="bullet">3.</span> session数据安全，Cookie相对不安全</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h3&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java 前端" scheme="http://example.com/tags/Java-%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>response</title>
    <link href="http://example.com/2021/08/12/response/"/>
    <id>http://example.com/2021/08/12/response/</id>
    <published>2021-08-12T06:59:33.000Z</published>
    <updated>2021-08-12T07:09:48.784Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><span id="more"></span><h3 id="HTTP协议："><a href="#HTTP协议：" class="headerlink" title="HTTP协议："></a>HTTP协议：</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 请求消息：客户端发送给服务器端的数据</span><br><span class="line"><span class="bullet">*</span> 数据格式：</span><br><span class="line"><span class="bullet">1.</span> 请求行</span><br><span class="line"><span class="bullet">2.</span> 请求头</span><br><span class="line"><span class="bullet">3.</span> 请求空行</span><br><span class="line"><span class="bullet">4.</span> 请求体</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 响应消息：服务器端发送给客户端的数据</span><br><span class="line"><span class="bullet">*</span> 数据格式：</span><br><span class="line"><span class="bullet">1.</span> 响应行</span><br><span class="line"><span class="bullet">1.</span> 组成：协议/版本 响应状态码 状态码描述</span><br><span class="line"><span class="bullet">2.</span> 响应状态码：服务器告诉客户端浏览器本次请求和响应的一个状态。</span><br><span class="line"><span class="bullet">1.</span> 状态码都是3位数字</span><br><span class="line"><span class="bullet">2.</span> 分类：</span><br><span class="line"><span class="bullet">1.</span> 1xx:服务器端接收客户端消息，但没有接收完成，等待一段时间后，发送1xx的状态码</span><br><span class="line"><span class="bullet">2.</span> 2xx：成功。代表：200</span><br><span class="line"><span class="bullet">3.</span> 3xx：重定向。代表：302(重定向)，304(访问缓存)</span><br><span class="line"><span class="bullet">4.</span> 4xx：客户端错误</span><br><span class="line"><span class="bullet">*</span> 代表：</span><br><span class="line"><span class="bullet">*</span> 404：(请求路径没有对应的资源)</span><br><span class="line"><span class="bullet">*</span> 405：请求方式没有对应的doXxx方法</span><br><span class="line"><span class="bullet">5.</span> 5xx：服务器端错误。代表：500(服务器内部出现异常)</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 响应头：</span><br><span class="line"><span class="bullet">1.</span> 格式：头名称：值</span><br><span class="line"><span class="bullet">2.</span> 常见的响应头：</span><br><span class="line"><span class="bullet">1.</span> Content-Type：服务器告诉客户端本次响应体数据格式以及编码格式</span><br><span class="line"><span class="bullet">2.</span> Content-disposition:服务器告诉客户端以什么格式打开响应体数据</span><br><span class="line"><span class="bullet">*</span> 值：</span><br><span class="line"><span class="bullet">*</span> in-line：默认值，在当前页面打开</span><br><span class="line"><span class="bullet">*</span> attachment;filename=xxx:以附件形式打开响应体。文件下载</span><br></pre></td></tr></table></figure><h3 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 功能：设置响应消息</span><br><span class="line"><span class="bullet">1.</span> 设置响应行</span><br><span class="line"><span class="bullet">1.</span> 格式：HTTP/1.1 200 OK</span><br><span class="line"><span class="bullet">2.</span> 设置状态码：setStatus(int sc)</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 设置响应体：</span><br><span class="line"><span class="bullet">*</span> 使用步骤：</span><br><span class="line"><span class="bullet">1.</span> 获取输出流</span><br><span class="line"><span class="bullet">*</span> 字符输出流：PrintWriter getWriter()</span><br><span class="line"><span class="bullet">*</span> 字节输出流：ServletOutputStream getOutputStream()</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 使用输出流，将数据输出到客户端浏览器</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 案例：</span><br><span class="line"><span class="bullet">1.</span> 完成重定向</span><br><span class="line"><span class="bullet">*</span> 重定向：资源跳转的方式</span><br><span class="line"><span class="bullet">*</span> 代码实现：</span><br><span class="line"><span class="code">/*//1. 设置状态码为302</span></span><br><span class="line"><span class="code">        response.setStatus(302);</span></span><br><span class="line"><span class="code">        //2. 设置响应头location</span></span><br><span class="line"><span class="code">        response.setHeader(&quot;location&quot;,&quot;/day15/responseDemo2&quot;);*/</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        //简单的重定向方法</span></span><br><span class="line"><span class="code">        response.sendRedirect(&quot;/day15/responseDemo2&quot;);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> 重定向的特点：redirect</span><br><span class="line"><span class="bullet">1.</span> 地址栏发生变化</span><br><span class="line"><span class="bullet">2.</span> 重定向可以访问其他站点(服务器)的资源</span><br><span class="line"><span class="bullet">3.</span> 重定向是两次请求。不能使用request对象来共享数据</span><br><span class="line"><span class="bullet">*</span> 转发的特点：forward</span><br><span class="line"><span class="bullet">1.</span> 转发地址栏路径不变</span><br><span class="line"><span class="bullet">2.</span> 转发只能访问当前服务器下的资源</span><br><span class="line"><span class="bullet">3.</span> 转发是一次请求。可以使用request对象来共享数据</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> forward 和 redirect 区别</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 路径写法：</span><br><span class="line"><span class="bullet">1.</span> 路径分类</span><br><span class="line"><span class="bullet">1.</span> 相对路径：通常相对路径不可以确定唯一资源</span><br><span class="line"><span class="bullet">*</span> 如：./index.html</span><br><span class="line"><span class="bullet">*</span> 不以/开头，以.开头路径</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 规则：找到当前资源和目标资源之间的相对位置关系</span><br><span class="line"><span class="bullet">*</span> ./:当前目录</span><br><span class="line"><span class="bullet">*</span> ../:后退一级目录</span><br><span class="line"><span class="bullet">2.</span> 绝对路径：通常绝对路径可以确定唯一资源</span><br><span class="line"><span class="bullet">*</span> 如：http://localhost/day15/response/responseDemo2   /day15/responseDemo2</span><br><span class="line"><span class="bullet">*</span> 以/开头的路径</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">* 规则：判断定义的路径是给谁用的？判断请求将来从哪发出</span></span><br><span class="line"><span class="code">* 给客户端浏览器使用：需要加虚拟目录(项目的访问路径)</span></span><br><span class="line"><span class="code">* 建议虚拟目录动态获取：request.getContextPath()</span></span><br><span class="line"><span class="code">* &lt;a&gt; &lt;form&gt; 重定向...</span></span><br><span class="line"><span class="code">* 给服务器使用：不需要加虚拟目录</span></span><br><span class="line"><span class="code">* 转发路径</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">2. 服务器输出字符数据到浏览器</span></span><br><span class="line"><span class="code">* 步骤：</span></span><br><span class="line"><span class="code">1. 获取字符输出流</span></span><br><span class="line"><span class="code">2. 输处数据</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> 注意：</span><br><span class="line"><span class="bullet">*</span> 乱码问题：</span><br><span class="line"><span class="bullet">1.</span> PrintWriter pw = response.getWriter();获取的流的默认编码是ISO-8859-1</span><br><span class="line"><span class="bullet">2.</span> 设置流的默认编码</span><br><span class="line"><span class="bullet">3.</span> 告诉浏览器响应体使用的编码</span><br><span class="line"><span class="bullet">3.</span> 服务器输出字节数据到浏览器</span><br><span class="line"><span class="bullet">*</span> 步骤：</span><br><span class="line"><span class="bullet">1.</span> 获取字节输出流</span><br><span class="line"><span class="bullet">2.</span> 输出数据</span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> 验证码</span><br><span class="line"><span class="bullet">1.</span> 本质：图片</span><br><span class="line"><span class="bullet">2.</span> 目的：防止恶意表单注册</span><br></pre></td></tr></table></figure><h3 id="ServletContext对象"><a href="#ServletContext对象" class="headerlink" title="ServletContext对象"></a>ServletContext对象</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 概念：代表整个web应用，可以和程序的容器(服务器)来通信</span><br><span class="line"><span class="bullet">2.</span> 获取：</span><br><span class="line"><span class="bullet">1.</span> 通过request对象获取</span><br><span class="line"><span class="code">requset.getServletContext();</span></span><br><span class="line"><span class="code">2. 通过HttpServlet获取</span></span><br><span class="line"><span class="code">this.getServletContext();</span></span><br><span class="line"><span class="code">3. 功能：</span></span><br><span class="line"><span class="code">1. 获取MIME类型</span></span><br><span class="line"><span class="code">* MIME类型：在互联网通信过程中定义的一种文件数据类型</span></span><br><span class="line"><span class="code">* 格式：大类型/小类型  text/html  imag/jpeg</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> 获取：String getMimeType(String file）</span><br><span class="line"><span class="bullet">2.</span> 域对象：共享数据</span><br><span class="line"><span class="bullet">1.</span> setAttribute(String name,Object value)</span><br><span class="line"><span class="bullet">2.</span> getAttribute(String name)</span><br><span class="line"><span class="bullet">3.</span> removeAttribute(String name)</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> ServletContext对象范围：所有用户所有请求的数据</span><br><span class="line"><span class="bullet">3.</span> 获取文件的真实(服务器)路径</span><br></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 文件下载要求：</span><br><span class="line"><span class="bullet">1.</span> 页面显示超链接</span><br><span class="line"><span class="bullet">2.</span> 点击超链接后会弹出下载提示框</span><br><span class="line"><span class="bullet">3.</span> 完成图片文件下载</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 分析：</span><br><span class="line"><span class="bullet">1.</span> 超链接指向的资源如果能够被浏览器解析，则在浏览器中展示，如果不能解析，则弹出下载提示框。不满足需求</span><br><span class="line"><span class="bullet">2.</span> 任何资源都必须弹出下载提示框</span><br><span class="line"><span class="bullet">3.</span> 使用响应头设置资源的打开方式;</span><br><span class="line"><span class="bullet">*</span> content-disposition:attachment;filename-xxx</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 步骤：</span><br><span class="line"><span class="bullet">1.</span> 定义页面，编辑超链接属性，指向Servlet，传递资源名称filename</span><br><span class="line"><span class="bullet">2.</span> 定义Servlet</span><br><span class="line"><span class="bullet">1.</span> 获取文件名称</span><br><span class="line"><span class="bullet">2.</span> 使用字节输入流加载文件进内存</span><br><span class="line"><span class="bullet">3.</span> 指定response的响应头：disposition:attachment;filename-xxx</span><br><span class="line"><span class="bullet">4.</span> 将数据写出到response输出流</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 问题：</span><br><span class="line"><span class="bullet">*</span> 中文文件问题：</span><br><span class="line"><span class="bullet">*</span> 解决思路</span><br><span class="line"><span class="bullet">1.</span> 获取客户端使用的浏览器版本信息</span><br><span class="line"><span class="bullet">2.</span> 根据不同的版本信息，设置filename的编码方式不同</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h3&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java 前端" scheme="http://example.com/tags/Java-%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript基础笔记</title>
    <link href="http://example.com/2021/08/12/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/08/12/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</id>
    <published>2021-08-12T06:36:00.000Z</published>
    <updated>2021-08-12T11:14:37.927Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><span id="more"></span><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 概念：一门客户端脚本语言</span><br><span class="line"><span class="bullet">*</span> 运行在客户端浏览器中。每一个浏览器都有JavaScript的解析引擎</span><br><span class="line"><span class="bullet">*</span> 脚本语言：不需要编译，直接就可以被浏览器解析执行了</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 功能：</span><br><span class="line"><span class="bullet">*</span> 可以来增强用户和html页面的交互过程，可以来控制html元素，让页面有一些动态的效果，增强用户的体验。</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> JavaScript发展史：</span><br><span class="line"><span class="bullet">1.</span> 1992年，Nombase公司，开发了第一门客户端脚本语言，专门用于表单的校验。命名为：C--，后来更名为ScriptEase</span><br><span class="line"><span class="bullet">2.</span> 1995年，Netscape(网景)公司，开发了一门客户端脚本语言：LiveScript。后来，请来了SUN公司的专家，修改ListScript，命名为JavaScript</span><br><span class="line"><span class="bullet">3.</span> 1996年，微软抄袭JavaScript开发出JScript语言</span><br><span class="line"><span class="bullet">4.</span> 1997年，ECMA(欧洲计算机制造商协会)，ECMAScript，就是所有客户端脚本语言的标准。</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> JavaScript = ECMAScript + JavaScript自己特有的东西(BOM+DOM)</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> ECMAScript:客户端脚本语言标准</span><br><span class="line"><span class="bullet">1.</span> 基本语法;</span><br><span class="line"><span class="bullet">1.</span> 与html结合方式</span><br><span class="line"><span class="bullet">1.</span> 内部JS</span><br><span class="line"><span class="bullet">*</span> 定义<span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span>,标签体内容就是js代码</span><br><span class="line"><span class="bullet">2.</span> 外部JS</span><br><span class="line"><span class="bullet">*</span> 定义<span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span></span>,通过src属性引入外部的js文件</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 注意：</span><br><span class="line"><span class="bullet">1.</span> <span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span></span>可以定义在html页面的任何地方。但是定义的位置会影响执行顺序。</span><br><span class="line"><span class="bullet">2.</span> <span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span></span>可以定义多个。</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">2. 注释</span></span><br><span class="line"><span class="code">1. 单行注释：//注释内容</span></span><br><span class="line"><span class="code">2. 多行注释:/*注释内容*/</span></span><br><span class="line"><span class="code">3. 数据类型:</span></span><br><span class="line"><span class="code">1. 原始数据类型（基本数据类型）：</span></span><br><span class="line"><span class="code">1. number:数字。整数/小数/NaN(not a number 一个不是数字的数字类型)</span></span><br><span class="line"><span class="code">2. string:字符串。 &quot;abc&quot; &#x27;a&#x27; &quot;ab&quot;</span></span><br><span class="line"><span class="code">3. boolean:true和false</span></span><br><span class="line"><span class="code">4. null:一个对象为空的占位符</span></span><br><span class="line"><span class="code">5. undefined:未定义。如果一个变量如果没有给初始化值，则会被默认赋值为undefined</span></span><br><span class="line"><span class="code">2. 引用数据类型：对象</span></span><br><span class="line"><span class="code">4. 变量</span></span><br><span class="line"><span class="code">* 变量：一小块存储数据的内存空间</span></span><br><span class="line"><span class="code">* Java语言是强类型语言，而JavaScript是弱类型语言。</span></span><br><span class="line"><span class="code">* 强类型：在开辟变量存储空间时，定义了空间将来存储的数据的数据类型。只能存储固定类型的数据</span></span><br><span class="line"><span class="code">* 弱类型：在开辟变量存储空间时，不定义空间将来的存储数据类型，可以存放任意类型的数据。</span></span><br><span class="line"><span class="code">* 语法:</span></span><br><span class="line"><span class="code">* var 变量名 = 初始化值;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">* typeof运算符：获取变量的类型</span></span><br><span class="line"><span class="code">* 注：null运算后得到的是object</span></span><br><span class="line"><span class="code">5. 运算符</span></span><br><span class="line"><span class="code">1. 一元运算符：只有一个运算数的运算符</span></span><br><span class="line"><span class="code">2. 赋值运算符</span></span><br><span class="line"><span class="code">* +(-):正负号</span></span><br><span class="line"><span class="code">* 注意：在JS中，如果运算数不是运算符所要求的的类型，那么js引擎会自动的将运算数进行类型转换</span></span><br><span class="line"><span class="code">* 其他类型转number：</span></span><br><span class="line"><span class="code">* string转number：按照字面值转换。如果字面值不是数字，则转换为NaN（不是数字的数字）</span></span><br><span class="line"><span class="code">* boolean转number：true转为1，false转为0</span></span><br><span class="line"><span class="code">3. 比较运算符:</span></span><br><span class="line"><span class="code">* 比较方式</span></span><br><span class="line"><span class="code">1. 类型相同：直接比较</span></span><br><span class="line"><span class="code">* 字符串：按照字典顺序比较，按位逐一比较，直到得出大小为止。</span></span><br><span class="line"><span class="code">2. 类型不同：先进行类型转换，再比较</span></span><br><span class="line"><span class="code">* ===：全等于。在比较之前，先判断类型，如果类型不一样，则直接返回false</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">4.</span> 字符串运算符</span><br><span class="line"><span class="bullet">5.</span> 逻辑运算符：</span><br><span class="line"><span class="bullet">*</span> &amp;&amp;：与（短路）</span><br><span class="line"><span class="bullet">*</span> ||：或（短路）</span><br><span class="line"><span class="bullet">*</span> |：非</span><br><span class="line"><span class="bullet">*</span> 其他类型转boolean：</span><br><span class="line"><span class="bullet">1.</span> number：0或NaN为假，其他为真</span><br><span class="line"><span class="bullet">2.</span> string：除了空字符串(&quot;&quot;),其他都是true</span><br><span class="line"><span class="bullet">3.</span> 对象：所有对象都为true</span><br><span class="line"></span><br><span class="line"><span class="bullet">6.</span> 三元运算符</span><br><span class="line"><span class="code"> ? : 表达式</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">语法：</span></span><br><span class="line"><span class="code">* 表达式? 值1:值2;</span></span><br><span class="line"><span class="code">* 判断表达式的值，如果是true则取值1，如果是false则取值2;</span></span><br><span class="line"><span class="code">6. 流程控制语句:</span></span><br><span class="line"><span class="code">1. if...while...</span></span><br><span class="line"><span class="code">2. switch:</span></span><br><span class="line"><span class="code">* 在java中，switch语句可以接收的数据类型：byte int short char，枚举(1.5后),string(1.7后)</span></span><br><span class="line"><span class="code">* switch(变量)</span></span><br><span class="line"><span class="code">case 值:</span></span><br><span class="line"><span class="code">* 在JS中，switch语句可以接收任意的原始数据类型</span></span><br><span class="line"><span class="code">3. while</span></span><br><span class="line"><span class="code">4. do...while</span></span><br><span class="line"><span class="code">5. for</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">7.</span> JS特殊语法：</span><br><span class="line"><span class="bullet">1.</span> 语句以;结尾，如果一行只有一条语句则;可以省略（不建议）</span><br><span class="line"><span class="bullet">2.</span> 变量的定义使用var关键字，也可以不使用</span><br><span class="line"><span class="bullet">*</span> 用：定义的变量是局部变量</span><br><span class="line"><span class="bullet">*</span> 不用：定义的变量是全局变量（不建议）</span><br><span class="line"></span><br><span class="line"><span class="bullet">8.</span> 练习：99乘法表</span><br><span class="line"><span class="code"> 代码：</span></span><br><span class="line"><span class="code">&lt;style&gt;</span></span><br><span class="line"><span class="code">    td &#123;</span></span><br><span class="line"><span class="code">        border: 1px solid;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&lt;/style&gt;</span></span><br><span class="line"><span class="code">&lt;script&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    document.write(&quot;&lt;table  align=&#x27;center&#x27;&gt;&quot;);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    //1.完成基本的for循环嵌套，展示乘法表</span></span><br><span class="line"><span class="code">    for (var i = 1; i &lt;= 9; i++) &#123;</span></span><br><span class="line"><span class="code">        document.write(&quot;&lt;tr&gt;&quot;);</span></span><br><span class="line"><span class="code">        for (var j = 1; j &lt;= i; j++) &#123;</span></span><br><span class="line"><span class="code">            document.write(&quot;&lt;td&gt;&quot;);</span></span><br><span class="line"><span class="code">            //输出 1 * 1 = 1</span></span><br><span class="line"><span class="code">            document.write(i + &quot; * &quot; + j + &quot; = &quot; + (i * j) + &quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;);</span></span><br><span class="line"><span class="code">            document.write(&quot;&lt;/td&gt;&quot;);</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">        /*//输出换行</span></span><br><span class="line"><span class="code">        document.write(&quot;&lt;br&gt;&quot;);*/</span></span><br><span class="line"><span class="code">        document.write(&quot;&lt;/tr&gt;&quot;);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    //2.完成表格嵌套</span></span><br><span class="line"><span class="code">    document.write(&quot;&lt;/table&gt;&quot;);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> 基本对象：</span><br><span class="line"><span class="bullet">1.</span> Function:函数(方法)对象</span><br><span class="line"><span class="bullet">        1.</span> 创建：</span><br><span class="line"><span class="bullet">            1.</span> var fun = new Function(形式参数列表,方法体);  //忘记吧！！！</span><br><span class="line"><span class="code">            2.function 方法名称(形式参数列表)&#123;</span></span><br><span class="line"><span class="code">                    方法体</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">            3. var 方法名 = function(形式参数列表)&#123;</span></span><br><span class="line"><span class="code">                    方法体</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">        2. 方法：</span></span><br><span class="line"><span class="code">        3. 属性：</span></span><br><span class="line"><span class="code">        4. 特点：</span></span><br><span class="line"><span class="code">            1. 方法定义时，形参的类型不用写，返回值类型也不写</span></span><br><span class="line"><span class="code">            2. 方法是一个对象，如果定义名称相同的方法，会覆盖</span></span><br><span class="line"><span class="code">            3. 在JS中，方法的调用只与方法的名称有关，和参数列表无关</span></span><br><span class="line"><span class="code">            4. 在方法声明中有一个隐藏的内置对象（数组），arguments，封装所有的实际参数</span></span><br><span class="line"><span class="code">        5. 调用：</span></span><br><span class="line"><span class="code">            方法名称(实际参数列表);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">2. Array:数组对象</span></span><br><span class="line"><span class="code">            1. 创建：</span></span><br><span class="line"><span class="code">                1. var arr = new Array(元素列表);</span></span><br><span class="line"><span class="code">                2. var arr = new Array(默认长度);</span></span><br><span class="line"><span class="code">                3. var arr = [元素列表];</span></span><br><span class="line"><span class="code">            2. 方法：</span></span><br><span class="line"><span class="code">                join(参数) 把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。</span></span><br><span class="line"><span class="code">                push() 向数组的末尾添加一个或更多元素，并返回新的长度。</span></span><br><span class="line"><span class="code">            3. 属性：</span></span><br><span class="line"><span class="code">                length:数据的长度</span></span><br><span class="line"><span class="code">            4. 特点：</span></span><br><span class="line"><span class="code">                1. JS中，数组元素的类型可变的</span></span><br><span class="line"><span class="code">                2. JS中，数组长度可变的</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3.</span> Date:日期对象</span><br><span class="line"><span class="bullet">1.</span> 创建：</span><br><span class="line"><span class="code">var date = new Date();</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">2. 方法：</span></span><br><span class="line"><span class="code">toLocaleString():返回当前对象对应的时间本地字符串格式</span></span><br><span class="line"><span class="code">getTime():获取毫秒值。返回当前日期对象描述的时间到1970年1月1日零点的毫秒值差</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">4.</span> Math:数学对象</span><br><span class="line"><span class="bullet">            1.</span> 创建：</span><br><span class="line"><span class="bullet">                *</span> 特点：Math对象不用创建，直接使用。 Math.方法名();</span><br><span class="line"></span><br><span class="line"><span class="bullet">            2.</span> 方法：</span><br><span class="line"><span class="code">                random():赋值 0~1之间的随机数。含0不含1</span></span><br><span class="line"><span class="code">                ceil(x):对数进行上舍入</span></span><br><span class="line"><span class="code">                floor(x):对数进行下舍入</span></span><br><span class="line"><span class="code">                round(x):把数四舍五入为最接近的整数</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">5.</span> RegExp：正则表达式对象</span><br><span class="line"><span class="bullet">1.</span> 正则表达式：定义字符串的组成规则。</span><br><span class="line"><span class="bullet">1.</span> 单个字符：[]</span><br><span class="line"><span class="bullet">*</span> 特殊符号代表特殊含义的单个字符：</span><br><span class="line"><span class="code">\d:单个数字字符 [0-9]</span></span><br><span class="line"><span class="code">\w:单个单词字符 [a-zA-Z0-9_]</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> 量词符号：</span><br><span class="line"><span class="code">?:表示出现0次货1次</span></span><br><span class="line"><span class="code">*：表示出现0次或多次</span></span><br><span class="line"><span class="code">+：出现一次或多次</span></span><br><span class="line"><span class="code">&#123;m,n&#125;:表示m &lt;= 数量 &lt;= n</span></span><br><span class="line"><span class="code">*m如果缺省：&#123;,n&#125;:最多n次</span></span><br><span class="line"><span class="code">*n如果缺省：&#123;m,&#125;:最少m次</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3.</span> 开始结束符号</span><br><span class="line"><span class="bullet">*</span> ^:开始</span><br><span class="line"><span class="bullet">*</span> $:结束</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 正则对象：</span><br><span class="line"><span class="bullet">       1.</span> 创建</span><br><span class="line"><span class="bullet">               1.</span> var reg = new RegExp(&quot;正则表达式&quot;);</span><br><span class="line"><span class="bullet">               2.</span> var reg = /正则表达式/;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h3&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java 前端" scheme="http://example.com/tags/Java-%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级笔记</title>
    <link href="http://example.com/2021/08/12/JavaScript%E9%AB%98%E7%BA%A7%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/08/12/JavaScript%E9%AB%98%E7%BA%A7%E7%AC%94%E8%AE%B0/</id>
    <published>2021-08-12T06:25:45.000Z</published>
    <updated>2021-08-12T11:15:09.191Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><span id="more"></span><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.DOM简单学习：为了满足案例需求</span><br><span class="line"><span class="bullet">*</span> 功能：控制html文档的内容</span><br><span class="line"><span class="bullet">*</span> 代码：获取页面标签(元素)对象 Element</span><br><span class="line"><span class="bullet">*</span> document.getElementById(&quot;id值&quot;):通过元素的id获取元素对象</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 操作Element对象：</span><br><span class="line"><span class="bullet">1.</span> 修改属性值：</span><br><span class="line"><span class="bullet">1.</span> 明确获取的对象是哪一个？</span><br><span class="line"><span class="bullet">2.</span> 查看API文档，找其中有哪些属性可以设置</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 修改标签体内容：</span><br><span class="line"><span class="bullet">*</span> 属性:innerHTML</span><br><span class="line"><span class="bullet">1.</span> 获取元素对象</span><br><span class="line"><span class="bullet">2.</span> 使用innerHTML属性修改标签体内容</span><br><span class="line"></span><br><span class="line"><span class="code">代码：</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">&lt;/head&gt;</span></span><br><span class="line"><span class="code">&lt;body&gt;</span></span><br><span class="line"><span class="code">&lt;img id=&quot;light&quot; src=&quot;img/on.png&quot;&gt;</span></span><br><span class="line"><span class="code">&lt;h1 id=&quot;title&quot;&gt;憨憨&lt;/h1&gt;</span></span><br><span class="line"><span class="code">&lt;script&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    //通过id获取元素对象</span></span><br><span class="line"><span class="code">    /*var light = document.getElementById(&quot;light&quot;);</span></span><br><span class="line"><span class="code">    alert(&quot;我要换图片了！&quot;);</span></span><br><span class="line"><span class="code">    light.src = &quot;img/on.png&quot;;*/</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    //1.获取h1标签对象</span></span><br><span class="line"><span class="code">    var title = document.getElementById(&quot;title&quot;);</span></span><br><span class="line"><span class="code">    alert(&quot;我要换图片了！&quot;);</span></span><br><span class="line"><span class="code">    //2. 修改内容</span></span><br><span class="line"><span class="code">    title.innerHTML = &quot;呆呆！&quot;;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">&lt;/script&gt;</span></span><br><span class="line"><span class="code">&lt;/body&gt;</span></span><br><span class="line"><span class="code">&lt;/html&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">2.事件简单学习</span><br><span class="line"><span class="bullet">*</span> 功能：某些组件被执行了某些操作后，出发某些代码的执行。</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">* 如何绑定事件</span></span><br><span class="line"><span class="code">1. 直接在html标签上，指定事件的属性(操作)，属性值就是js代码</span></span><br><span class="line"><span class="code">1. 事件：onclick --- 单击事件</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> 通过js获取元素对象，指定事件属性，设置一个函数</span><br><span class="line"></span><br><span class="line"><span class="code">代码：</span></span><br><span class="line"><span class="code">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="code">&lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="code">&lt;head&gt;</span></span><br><span class="line"><span class="code">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="code">    &lt;title&gt;事件绑定&lt;/title&gt;</span></span><br><span class="line"><span class="code">&lt;/head&gt;</span></span><br><span class="line"><span class="code">&lt;body&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">&lt;img id=&quot;light&quot; src=&quot;img/off.png&quot;  onclick=&quot;fun();&quot;&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">&lt;img id=&quot;light2&quot; src=&quot;img/off.png&quot;&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">&lt;script&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    function fun()&#123;</span></span><br><span class="line"><span class="code">        alert(&#x27;我被点了&#x27;);</span></span><br><span class="line"><span class="code">        alert(&#x27;我又被点了&#x27;)</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    function fun2()&#123;</span></span><br><span class="line"><span class="code">        alert(&#x27;咋老是点我？&#x27;);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    //1.获取light2对象</span></span><br><span class="line"><span class="code">    var light2 = document.getElementById(&quot;light2&quot;);</span></span><br><span class="line"><span class="code">    //2.绑定事件</span></span><br><span class="line"><span class="code">    light2.onclick = fun2();</span></span><br><span class="line"><span class="code">&lt;/script&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">&lt;/body&gt;</span></span><br><span class="line"><span class="code">&lt;/html&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> 案例：</span><br><span class="line"><span class="code">代码：</span></span><br><span class="line"><span class="code">   &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="code">&lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="code">&lt;head&gt;</span></span><br><span class="line"><span class="code">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="code">    &lt;title&gt;电灯开关&lt;/title&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    &lt;img id=&quot;light&quot; src=&quot;img/off.png&quot;&gt;</span></span><br><span class="line"><span class="code">&lt;script&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    /*</span></span><br><span class="line"><span class="code">        分析：</span></span><br><span class="line"><span class="code">            1. 获取图片对象</span></span><br><span class="line"><span class="code">            2. 绑定单击事件</span></span><br><span class="line"><span class="code">            3. 每次点击切换图片</span></span><br><span class="line"><span class="code">                * 规则：</span></span><br><span class="line"><span class="code">                    * 如果灯是开的 on，切换图片为 off</span></span><br><span class="line"><span class="code">                    * 如果灯是关的 off，切换图片为 on</span></span><br><span class="line"><span class="code">                * 使用标记flag来完成</span></span><br><span class="line"><span class="code">     */</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    //1. 获取图片对象</span></span><br><span class="line"><span class="code">    var light = document.getElementById(&quot;light&quot;);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    var flag = false; //代表灯是灭的。 off图片</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    //2. 绑定单击事件</span></span><br><span class="line"><span class="code">    light.onclick = function ()&#123;</span></span><br><span class="line"><span class="code">        if(flag)&#123;//判断如果灯是开的，则灭掉</span></span><br><span class="line"><span class="code">           light.src = &quot;img/off.png&quot;;</span></span><br><span class="line"><span class="code">           flag = false;</span></span><br><span class="line"><span class="code">        &#125;else &#123;</span></span><br><span class="line"><span class="code">            //如果灯是灭的，则灯开</span></span><br><span class="line"><span class="code">            light.src = &quot;img/on.png&quot;;</span></span><br><span class="line"><span class="code">            flag = true;</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&lt;/script&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">&lt;/head&gt;</span></span><br><span class="line"><span class="code">&lt;body&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">&lt;/body&gt;</span></span><br><span class="line"><span class="code">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">3.BOM</span><br><span class="line"><span class="bullet">1.</span> 概念：Browser Object Model 浏览器对象模型</span><br><span class="line"><span class="bullet">*</span> 将浏览器的各个组成部分封装成对象。</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 组成：</span><br><span class="line"><span class="bullet">*</span> Window：窗口对象</span><br><span class="line"><span class="bullet">1.</span> 创建：</span><br><span class="line"><span class="bullet">            2.</span> 方法:</span><br><span class="line"><span class="bullet">                1.</span> 与弹出框有关的方法：</span><br><span class="line"><span class="code">                    alert()显示带有一段消息和一个确认按钮的警告框。</span></span><br><span class="line"><span class="code">                    confirm()显示带有一段消息以及确认按钮和取消按钮的对话框。</span></span><br><span class="line"><span class="code">                    prompt()显示可提示用户输入的对话框。</span></span><br><span class="line"><span class="code">                         * 返回值：获取用户输入的值</span></span><br><span class="line"><span class="code">                2. 与打开关闭有关的方法：</span></span><br><span class="line"><span class="code">                    close()关闭浏览器窗口。</span></span><br><span class="line"><span class="code">                        * 谁调用我，我关谁</span></span><br><span class="line"><span class="code">                    open()打开一个新的浏览器窗口。</span></span><br><span class="line"><span class="code">                        * 返回新的Window对象</span></span><br><span class="line"><span class="code">                3. 与定时器有关的方法：</span></span><br><span class="line"><span class="code">                    setTimeout() 在指定的毫秒数后调用函数或计算表达式。</span></span><br><span class="line"><span class="code">                    clearTimeout() 取消由 setTimeout() 方法设置的 timeout。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">                    setInterval() 按照指定的周期（以毫秒计）来调用函数或计算表达式。</span></span><br><span class="line"><span class="code">                    clearInterval()取消由 setInterval() 设置的 timeout。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">            3.</span> 属性:</span><br><span class="line"><span class="bullet">                1.</span> 获取其他BOM对象</span><br><span class="line"><span class="code">                    history</span></span><br><span class="line"><span class="code">                    location</span></span><br><span class="line"><span class="code">                    Navigator</span></span><br><span class="line"><span class="code">                    Screen</span></span><br><span class="line"><span class="code">                2. 获取DOM对象</span></span><br><span class="line"><span class="code">                    document</span></span><br><span class="line"><span class="code">            4. 特点：</span></span><br><span class="line"><span class="code">                * window对象不需要创建可以直接使用  window.方法名();</span></span><br><span class="line"><span class="code">                * window引用可以省略。 方法名();</span></span><br><span class="line"><span class="code">* Navigator：浏览器对象</span></span><br><span class="line"><span class="code">* Screen：显示器屏幕对象</span></span><br><span class="line"><span class="code">* History：历史记录对象</span></span><br><span class="line"><span class="code">1. 创建(获取)：</span></span><br><span class="line"><span class="code">1. window.history</span></span><br><span class="line"><span class="code">2. history</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">2. 方法：</span></span><br><span class="line"><span class="code">* back()加载 history 列表中的前一个 URL。</span></span><br><span class="line"><span class="code">* forward()加载 history 列表中的下一个 URL。</span></span><br><span class="line"><span class="code">* go()加载 history 列表中的某个具体页面。</span></span><br><span class="line"><span class="code">* 参数:</span></span><br><span class="line"><span class="code">* 正数：前进几个历史记录</span></span><br><span class="line"><span class="code">* 负数：后退几个历史记录</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">3. 属性：</span></span><br><span class="line"><span class="code">1. length 返回当前窗口历史列表中的URL 数量</span></span><br><span class="line"><span class="code">* Location：地址栏对象</span></span><br><span class="line"><span class="code">1. 创建(获取):</span></span><br><span class="line"><span class="code">1. window.location</span></span><br><span class="line"><span class="code">2. location</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> 方法：</span><br><span class="line"><span class="bullet">*</span> reload() 重新加载当前文档。刷新</span><br><span class="line"><span class="bullet">3.</span> 属性</span><br><span class="line"><span class="bullet">*</span> href 设置或返回完整的URL。</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">4.DOM</span><br><span class="line"><span class="bullet">*</span> 概念：Document Object Model 文档对象模型</span><br><span class="line"><span class="bullet">*</span> 将标记语言文档的各个组成部分，封装为对象，可以使用这些对象，对标记语音文档进行CRUD的动态操作</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> W3C DOM 标准被分为 3个不同的部分：</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 核心 DOM - 所有文档类型的标准模型</span><br><span class="line"><span class="bullet">*</span> Document:文档对象</span><br><span class="line"><span class="bullet">*</span> Element：元素对象</span><br><span class="line"><span class="bullet">*</span> Attribute：属性对象</span><br><span class="line"><span class="bullet">*</span> Text：文本对象</span><br><span class="line"><span class="bullet">*</span> Comment：注释对象</span><br><span class="line"><span class="bullet">*</span> XML DOM - 针对 XML 文档的标准模型</span><br><span class="line"><span class="bullet">*</span> HTML DOM - 针对 HTML 文档的标准模型</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 核心DOM模型：</span><br><span class="line"><span class="bullet">*</span> Document：文档对象</span><br><span class="line"><span class="bullet">1.</span> 创建(获取)：在html dom模型中可以使用window对象来获取</span><br><span class="line"><span class="bullet">1.</span> window.document</span><br><span class="line"><span class="bullet">2.</span> document</span><br><span class="line"><span class="bullet">2.</span> 方法：</span><br><span class="line"><span class="bullet">1.</span> 获取Element对象：</span><br><span class="line"><span class="bullet">1.</span> getElementById():根据id属性值获取元素对象，id属性值一般唯一</span><br><span class="line"><span class="bullet">2.</span> getElementsByTagName()：根据元素名称获取元素对象们，返回值是一个数组</span><br><span class="line"><span class="bullet">3.</span> getElementsByClassName():根据Class属性值获取元素对象们。返回值是一个数组</span><br><span class="line"><span class="bullet">4.</span> getElementsByName()：根据name属性值获取元素对象们。返回值是一个数组</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 创建其他DOM对象</span><br><span class="line"><span class="bullet">*</span> Element：元素对象</span><br><span class="line"><span class="bullet">1.</span> 获取/创建：通过document来获取和创建</span><br><span class="line"><span class="bullet">2.</span> 方法：</span><br><span class="line"><span class="bullet">1.</span> removeAttribute9():删除属性</span><br><span class="line"><span class="bullet">2.</span> setAttribute():设置属性</span><br><span class="line"><span class="bullet">*</span> Node：节点对象，其他5个的父对象</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> HTML DOM</span><br><span class="line"><span class="bullet">1.</span> 标签体的设置和获取：innerHTML</span><br><span class="line"><span class="bullet">2.</span> 使用html元素对象的属性</span><br><span class="line"><span class="bullet">3.</span> 控制元素样式</span><br><span class="line"><span class="bullet">1.</span> 使用元素的style属性来设置</span><br><span class="line"><span class="bullet">2.</span> 提前定义好类选择器的样式，通过元素的classname属性来设置其class属性值。</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">5.事件监听机制：</span><br><span class="line"><span class="bullet">*</span> 概念：某些组件被执行了某些操作后，丑法某些代码的执行。</span><br><span class="line"><span class="bullet">*</span> 事件：某些操作。 如：单击、双击</span><br><span class="line"><span class="bullet">*</span> 事件源：组件。如：按钮 文本输入框.....</span><br><span class="line"><span class="bullet">*</span> 监听器：代码</span><br><span class="line"><span class="bullet">*</span> 注册监听：将事件，事件源，监听器结合在一起。当事件源上发生了某个事件，则触发执行某个监听器代码。</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 常见的事件：</span><br><span class="line"><span class="bullet">1.</span> 点击事件：</span><br><span class="line"><span class="bullet">1.</span> onlick：单击事件</span><br><span class="line"><span class="bullet">2.</span> ondbclick：双击事件</span><br><span class="line"><span class="bullet">2.</span> 焦点事件：</span><br><span class="line"><span class="bullet">1.</span> onblur:失去焦点</span><br><span class="line"><span class="bullet">2.</span> onfocus：元素获得焦点</span><br><span class="line"><span class="bullet">3.</span> 加载事件：</span><br><span class="line"><span class="bullet">1.</span> onload：一张页面或一幅图像完成加载。</span><br><span class="line"><span class="bullet">4.</span> 鼠标事件：</span><br><span class="line"><span class="bullet">1.</span> onmousedown鼠标按钮被按下。</span><br><span class="line"><span class="bullet">*</span> 定义方法时，定义一个形参，接受event对象</span><br><span class="line"><span class="bullet">            *</span> event对象的button属性可以获取鼠标按钮键被点击了</span><br><span class="line"><span class="bullet">2.</span> onmousemove鼠标被移动。</span><br><span class="line"><span class="bullet">3.</span> onmouseout鼠标从某元素移开。</span><br><span class="line"><span class="bullet">4.</span> onmouseover鼠标移到某元素之上。</span><br><span class="line"><span class="bullet">5.</span> onmouseup鼠标按键被松开。</span><br><span class="line"><span class="bullet">5.</span> 键盘事件：</span><br><span class="line"><span class="bullet">1.</span> onkeydown某个键盘按键被按下。</span><br><span class="line"><span class="bullet">2.</span> onkeypress某个键盘按键被按下并松开。</span><br><span class="line"><span class="bullet">3.</span> onkeyup某个键盘按键被松开。</span><br><span class="line"><span class="bullet">6.</span> 选中和改变：</span><br><span class="line"><span class="bullet">1.</span> onselect文本被选中。</span><br><span class="line"><span class="bullet">2.</span> onchange域的内容被改变。</span><br><span class="line"><span class="bullet">7.</span> 表单事件：</span><br><span class="line"><span class="bullet">1.</span> onsubmit确认按钮被点击。</span><br><span class="line"><span class="bullet">*</span> 可以阻止表单的提交</span><br><span class="line"><span class="bullet">                *</span> 方法返回false则表单被阻止提交</span><br><span class="line"><span class="bullet">2.</span> onreset重置按钮被点击。</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h3&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java 前端" scheme="http://example.com/tags/Java-%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Ajax&amp;Json随笔</title>
    <link href="http://example.com/2021/08/12/ajax/"/>
    <id>http://example.com/2021/08/12/ajax/</id>
    <published>2021-08-12T06:21:50.000Z</published>
    <updated>2021-08-12T11:15:58.136Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><span id="more"></span><h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 概念：同步的JavaScript 和 XML</span><br><span class="line"><span class="bullet">1.</span> 同步和异步：客户端和服务端相互通信的基础上</span><br><span class="line"><span class="bullet">*</span> 同步：客户端必须等待服务器端的响应。在等待的期间客户端不能做其他操作。</span><br><span class="line"><span class="bullet">*</span> 异步：客户端不需要等待服务器端的响应。在服务器处理请求的过程中，客户端可以进行其他的操作。</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">2.</span> JQuery实现方式</span><br><span class="line"><span class="bullet">1.</span> $.ajax()</span><br><span class="line"><span class="bullet">*</span> 语法：$.ajax(&#123;键值对&#125;);</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> $.get():发送get请求</span><br><span class="line"><span class="bullet">*</span> 语法：$.get(url,[data],[callback],[type])</span><br><span class="line"><span class="bullet">*</span> 参数：</span><br><span class="line"><span class="bullet">*</span> url：请求路径</span><br><span class="line"><span class="bullet">*</span> data：请求参数</span><br><span class="line"><span class="bullet">*</span> callback：回调函数</span><br><span class="line"><span class="bullet">*</span> type：响应结果的类型</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> $.post():发送post请求</span><br></pre></td></tr></table></figure><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 概念： JavaScript Object Notation JavaScript对象表示法</span><br><span class="line"><span class="code">var p = &#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:23,&quot;gender&quot;:&quot;男&quot;&#125;;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> json现在多用于存储和交换文本信息的语法</span><br><span class="line"><span class="bullet">*</span> 进行数据的传输</span><br><span class="line"><span class="bullet">*</span> JSON 比 XML 更小、更快、更易解析。</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">2.</span> 语法：</span><br><span class="line"><span class="bullet">1.</span> 基本规则</span><br><span class="line"><span class="bullet">*</span> 数据在名称/值对中：json数据是由键值对构成的</span><br><span class="line"><span class="bullet">*</span> 键用引号(单双都可以)引起来，也可以不用引号</span><br><span class="line"><span class="bullet">*</span> 值的取值类型：</span><br><span class="line"><span class="bullet">1.</span> 数字（整数或浮点数）</span><br><span class="line"><span class="bullet">2.</span> 字符串（在双引号中）</span><br><span class="line"><span class="bullet">3.</span> 逻辑值（true 或 false）</span><br><span class="line"><span class="bullet">4.</span> 数组（在放括号中）&#123;&quot;person&quot;:[&#123;&#125;,&#123;&#125;]</span><br><span class="line"><span class="bullet">5.</span> 对象（在花括号中）&#123;&quot;address&quot;:&#123;&quot;province&quot;:&quot;安徽&quot;...&#125;&#125;</span><br><span class="line"><span class="bullet">6.</span> null</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 数据由逗号分隔：多个键值由逗号分隔</span><br><span class="line"><span class="bullet">*</span> 花括号保存对象：使用&#123;&#125;定义json 格式</span><br><span class="line"><span class="bullet">*</span> 方括号保存数组：[]</span><br><span class="line"></span><br><span class="line"><span class="code">获取数据代码：</span></span><br><span class="line"><span class="code">//1. 定义基本格式</span></span><br><span class="line"><span class="code">        var person = &#123;&quot;name&quot;: &quot;张三&quot;, &quot;age&quot;: 23, &quot;gender&quot;: true&#125;;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        //获取name的值</span></span><br><span class="line"><span class="code">        // var name = person.name;</span></span><br><span class="line"><span class="code">        // var name = person[&quot;name&quot;];</span></span><br><span class="line"><span class="code">        // alert(name);</span></span><br><span class="line"><span class="code">        // alert(person);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        //嵌套格式  [] --&gt; &#123;&#125;</span></span><br><span class="line"><span class="code">        var persons = &#123;</span></span><br><span class="line"><span class="code">            &quot;persons&quot;: [</span></span><br><span class="line"><span class="code">                &#123;&quot;name&quot;: &quot;张三&quot;, &quot;age&quot;: 23, &quot;gender&quot;: true&#125;,</span></span><br><span class="line"><span class="code">                &#123;&quot;name&quot;: &quot;李四&quot;, &quot;age&quot;: 22, &quot;gender&quot;: true&#125;,</span></span><br><span class="line"><span class="code">                &#123;&quot;name&quot;: &quot;王五&quot;, &quot;age&quot;: 21, &quot;gender&quot;: false&#125;</span></span><br><span class="line"><span class="code">            ]</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &#125;;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        //获取王五值</span></span><br><span class="line"><span class="code">        // var name1 = persons.persons[2].name;</span></span><br><span class="line"><span class="code">        // alert(name1)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        //嵌套格式  [] --&gt; &#123;&#125;</span></span><br><span class="line"><span class="code">        var ps = [&#123;&quot;name&quot;: &quot;张三&quot;, &quot;age&quot;: 23, &quot;gender&quot;: true&#125;,</span></span><br><span class="line"><span class="code">            &#123;&quot;name&quot;: &quot;李四&quot;, &quot;age&quot;: 22, &quot;gender&quot;: true&#125;,</span></span><br><span class="line"><span class="code">            &#123;&quot;name&quot;: &quot;王五&quot;, &quot;age&quot;: 21, &quot;gender&quot;: false&#125;];</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        //获取李四值</span></span><br><span class="line"><span class="code">        alert(ps[1].name);</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">遍历代码：</span><br><span class="line"><span class="code">//1. 定义基本格式</span></span><br><span class="line"><span class="code">       var person = &#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:23,&quot;gender&quot;:true&#125;;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">       var ps = [&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:23,&quot;gender&quot;:true&#125;,</span></span><br><span class="line"><span class="code">        &#123;&quot;name&quot;:&quot;李四&quot;,&quot;age&quot;:22,&quot;gender&quot;:true&#125;,</span></span><br><span class="line"><span class="code">       &#123;&quot;name&quot;:&quot;王五&quot;,&quot;age&quot;:21,&quot;gender&quot;:false&#125;];</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">       //获取person对象中所有的键和值</span></span><br><span class="line"><span class="code">       //for in 循环</span></span><br><span class="line"><span class="code">       /*for(var key in person)&#123;</span></span><br><span class="line"><span class="code">           //这样的方式获取不行。因为相当于 person.&quot;name&quot;</span></span><br><span class="line"><span class="code">           // alert(key + &quot;:&quot; + person.key);</span></span><br><span class="line"><span class="code">           alert(key+&quot;:&quot;+person[key]);</span></span><br><span class="line"><span class="code">       &#125;*/</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">       //获取ps中的所有值</span></span><br><span class="line"><span class="code">       for (var i = 0; i &lt; ps.length; i++)&#123;</span></span><br><span class="line"><span class="code">           var p = ps[i];</span></span><br><span class="line"><span class="code">           for(var key in p)&#123;</span></span><br><span class="line"><span class="code">               alert(key+&quot;:&quot;+p[key]);</span></span><br><span class="line"><span class="code">           &#125;</span></span><br><span class="line"><span class="code">       &#125;</span></span><br></pre></td></tr></table></figure><pre><code>3. JSON数据和Java对象的相互转换    * JSON解析器：        * 常见的解析器：Jsonlib，Gson，fastjson，jackson    1. JSON转为Java对象            1. 导入jackson的相关jar包            2. 创建jackson核心对象 ObjectMapper            3. 调用ObjectMapper的相关方法进行转换                1. readValue(json字符串数据,Class)    2. Java对象转换为JSON（对相应的对象进行序列化）        1. 使用步骤：            1. 导入jackson的相关jar包            2. 创建jackson核心对象 ObjectMapper            3. 调用ObjectMapper的相关方法进行转换                1. 转换方法：                    writeValue(参数1,obj):                        参数1：                            File：将obj对象转换为JSON字符串，并保存到指定的文件中                            Writer：将obj对象转换为JSON字符串，并将json数据填充到字符输出流中                            OutputStream：将obj对象转换为JSON字符串，并将json数据填充到字节输出流中                         writeValueAsString(obj):将对象转换为json字符串                2. 注解：                    1. @JsonIgnore:排除属性                    2. @JsonFormat:属性值的格式化                        * @JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)                3. 复杂java对象转换                    1. List:数组                    2. Map：对象格式一致</code></pre><h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h3><pre><code>* 校验用户名是否存在    1. 服务器响应的数据，在客户端使用时，要想当做json数据格式使用        1. $.get(type):将最后一个参数type指定为&quot;json&quot;        2. 在服务器端设置MIME类型            1. response.setContentType(&quot;application/json;charset=utf-8&quot;);                </code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h3&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java 前端" scheme="http://example.com/tags/Java-%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>JSP&amp;JSTL随笔</title>
    <link href="http://example.com/2021/08/12/EL/"/>
    <id>http://example.com/2021/08/12/EL/</id>
    <published>2021-08-12T03:43:20.000Z</published>
    <updated>2021-08-12T06:50:31.202Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Java</strong></p><span id="more"></span><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">JSP：</span><br><span class="line"><span class="bullet">1.</span> 指令</span><br><span class="line"><span class="bullet">*</span> 作用：用于配置JSP页面，导入资源文件</span><br><span class="line"><span class="bullet">*</span> 格式：</span><br><span class="line"><span class="bullet">*</span> &lt;%@ 指令名称 属性名1=属性值1 属性名2=属性值2 ... %&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 分类：</span><br><span class="line"><span class="bullet">1.</span> page：配置JSP页面的</span><br><span class="line"><span class="bullet">*</span> contentType：等同于response.setContentType()</span><br><span class="line"><span class="bullet">1.</span> 设置响应体的mime类型以及字符集</span><br><span class="line"><span class="bullet">2.</span> 设置当前JSP页面的编码（只能是高级的工具如IDE才能生效，如果使用低级工具，则需要设置pageEncoding属性值当前页面的字符集）</span><br><span class="line"><span class="bullet">*</span> import：导包</span><br><span class="line"><span class="bullet">*</span> errorPage：当前页面发生异常后，会自动跳转到指定的错误页面</span><br><span class="line"><span class="bullet">*</span> isErrorPage：标识当前页面是否是错误页面。</span><br><span class="line"><span class="bullet">*</span> true：是，可以使用内置对象exception</span><br><span class="line"><span class="bullet">*</span> false：否，默认值。不可以使用内置对象exception</span><br><span class="line"><span class="bullet">2.</span> incuude：页面包含的。导入页面的资源文件</span><br><span class="line"><span class="bullet">*</span> &lt;%@include file=&quot;top.jsp&quot;%&gt;</span><br><span class="line"><span class="bullet">3.</span> taglib：导入资源</span><br><span class="line"><span class="bullet">*</span> &lt;%@ taglib prefix=&quot;c&quot; url=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line"><span class="bullet">*</span> prefix:前缀，自定义的</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 注释：</span><br><span class="line"><span class="bullet">1.</span> html注释：</span><br><span class="line"><span class="code">&lt;!-- --&gt;:只能注释htmldiamante片段</span></span><br><span class="line"><span class="code">2. jsp注释：推荐使用</span></span><br><span class="line"><span class="code">&lt;%-- --%&gt;:可以注释所有</span></span><br><span class="line"><span class="code">3. 内置对象</span></span><br><span class="line"><span class="code">* 在jsp页面中不需要创建，直接使用的对象</span></span><br><span class="line"><span class="code">* 一共有9个：</span></span><br><span class="line"><span class="code"> 变量名真实类型作用</span></span><br><span class="line"><span class="code">* pageContextPageContext当前页面共享数据，可以获取其他八个内置对象</span></span><br><span class="line"><span class="code">* requestHttpServleetRequest一次请求访问的多个资源(转发)</span></span><br><span class="line"><span class="code">* sessionHttpSession一次会话的多个请求</span></span><br><span class="line"><span class="code">* applicationServletContext所有用户间共享数据</span></span><br><span class="line"><span class="code">* responseHttpServletResponse响应对象</span></span><br><span class="line"><span class="code">* pageObject当前页面(Servlet)的对象 this</span></span><br><span class="line"><span class="code">* outJspWriter输出对象，数据输出到页面上</span></span><br><span class="line"><span class="code">* configServletConfigServlet的配置对象</span></span><br><span class="line"><span class="code">* exceptionThrowable异常对象</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MVC：开发模式：</span><br><span class="line"><span class="bullet">1.</span> jsp演变历史</span><br><span class="line"><span class="bullet">1.</span> 早期只有servlet，只能使用response输出标签数据，非常麻烦</span><br><span class="line"><span class="bullet">2.</span> 后来有jsp，简化了Servlet的开发，如果过度使用jsp，在jsp中既写大量的java代码，又写html表，造成难于维护，难于分工协作</span><br><span class="line"><span class="bullet">3.</span> 再后来，java的web开发，借鉴mvc开发模式，使得程序的设计更加合理性</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">2.</span> MVC:</span><br><span class="line"><span class="bullet">1.</span> M: Model 模型 JavaBean</span><br><span class="line"><span class="bullet">*</span> 完成具体的业务操作，如：查询数据库，封装对象</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> V: View 视图 JSP</span><br><span class="line"><span class="bullet">*</span> 展示数据</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> C：Controller 控制器 Servlet</span><br><span class="line"><span class="bullet">*</span> 获取用户的输入</span><br><span class="line"><span class="bullet">*</span> 调用模型</span><br><span class="line"><span class="bullet">*</span> 将数据交给视图进行展示</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 优缺点：</span><br><span class="line"><span class="bullet">1.</span> 优点：</span><br><span class="line"><span class="bullet">1.</span> 耦合性低，方便维护，可以利于分工协作</span><br><span class="line"><span class="bullet">2.</span> 重用性高</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 缺点：</span><br><span class="line"><span class="bullet">1.</span> 使得项目架构变得复杂，对开发人员要求高</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">EL表达式：</span><br><span class="line"><span class="bullet">1.</span> 概念：Expression Language 表达式语言</span><br><span class="line"><span class="bullet">2.</span> 作用：替换和简化jsp页面中java代码的编写</span><br><span class="line"><span class="bullet">3.</span> 语法：$&#123;表达式&#125;</span><br><span class="line"><span class="bullet">4.</span> 注意：</span><br><span class="line"><span class="bullet">*</span> jsp默认支持el表达式的。如果要忽略el表达式</span><br><span class="line"><span class="bullet">1.</span> 设置jsp中page指令中：isELIgnored=&quot;true&quot; 忽略当前jsp页面中所有的el表达式</span><br><span class="line"><span class="bullet">2.</span> \$&#123;表达式&#125;：忽略当前这个el表达式</span><br><span class="line"></span><br><span class="line"><span class="bullet">5.</span> 使用：</span><br><span class="line"><span class="bullet">1.</span> 运算：</span><br><span class="line"><span class="bullet">*</span> 运算符：</span><br><span class="line"><span class="bullet">1.</span> 算数运算符：+ - <span class="emphasis">* /(div) %(mod)</span></span><br><span class="line"><span class="emphasis">2. 比较运算符:&gt; &lt; &gt;= &lt;= == !=</span></span><br><span class="line"><span class="emphasis">3. 逻辑运算符:&amp;&amp;(and) ||(or) |(not)</span></span><br><span class="line"><span class="emphasis">4. 空运算符：empty</span></span><br><span class="line"><span class="emphasis">*</span> 功能:用于判断字符串、集合、数组对象是否为null或者长度是否为0</span><br><span class="line"><span class="bullet">*</span> $&#123;empty list&#125;：判断字符串、集合、数组对象是否为null或者长度为0</span><br><span class="line"><span class="bullet">*</span> $&#123;not empty str&#125;:表示判断字符串、集合、数组对象是否不为null或者长度&gt;0</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 获取值</span><br><span class="line"><span class="bullet">1.</span> el表达式只能从域对象中获取值</span><br><span class="line"><span class="bullet">2.</span> 语法：</span><br><span class="line"><span class="bullet">1.</span> $&#123;域名城.键名&#125;：从指定域中获取指定的值</span><br><span class="line"><span class="bullet">*</span> 域名称：</span><br><span class="line"><span class="bullet">1.</span> PageScope        --&gt; PageContext</span><br><span class="line"><span class="bullet">2.</span> requestScope--&gt; requeset</span><br><span class="line"><span class="bullet">3.</span> sessionScope--&gt; session</span><br><span class="line"><span class="bullet">4.</span> applicationScope--&gt; application(ServletContext)</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> $&#123;键名&#125;：表示依次从最小的域中查找是否有该键对应的值，直到找到为止。</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> 获取对象、List集合、Map集合的值</span><br><span class="line"><span class="bullet">1.</span> 对象：$&#123;域名城.键名.属性名&#125;</span><br><span class="line"><span class="bullet">*</span> 本质上会去调用对象的getter方法</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> List集合：$&#123;域名称.键名[索引]&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> Map集合：</span><br><span class="line"><span class="bullet">*</span> $&#123;域名称.键名.key名称&#125;</span><br><span class="line"><span class="bullet">*</span> $&#123;域名称.键名[key名称]&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> 隐式对象：</span><br><span class="line"><span class="bullet">*</span> el表达式中有11个隐式对象</span><br><span class="line"><span class="bullet">*</span> pageContext:</span><br><span class="line"><span class="bullet">*</span> 获取jsp其他八个内置对象</span><br><span class="line"><span class="bullet">*</span> $&#123;pageContext.request.contextPath&#125;:动态获取虚拟目录</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">JSTL：</span><br><span class="line"><span class="bullet">1.</span> 概念：JavaServer Page Tag Library JSP标准标签库</span><br><span class="line"><span class="bullet">*</span> 是由Apache组织提供的开源的免费的jsp标签  &lt;标签&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 作用：用于简化和替换jsp页面上的java代码</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> 使用步骤：</span><br><span class="line"><span class="bullet">1.</span> 导入jstl相关jar包</span><br><span class="line"><span class="bullet">2.</span> 引入标签库：taglib指令：&lt;%@ taglib %&gt;</span><br><span class="line"><span class="bullet">3.</span> 使用标签</span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> 常用的JSTL标签</span><br><span class="line"><span class="bullet">1.</span> if：相当于java代码的if语句</span><br><span class="line"><span class="bullet">1.</span> 属性：</span><br><span class="line"><span class="bullet">        *</span> test 必须属性，接受boolean表达式</span><br><span class="line"><span class="bullet">            *</span> 如果表达式为true，则显示if标签体内容，如果为false，则不显示标签体内容</span><br><span class="line"><span class="bullet">        *</span> 一般情况下，test属性值会结合el表达式一起使用</span><br><span class="line"></span><br><span class="line"><span class="bullet">    2.</span> 注意：c:if标签中没有else情况，想要else情况，则可以再定义一个c:if标签</span><br><span class="line"><span class="bullet">2.</span> choose：相当于java代码的switch语句</span><br><span class="line"><span class="code"> 使用choose标签取出数字   相当于switch声明</span></span><br><span class="line"><span class="code">             使用when标签做数字判断   相当于case</span></span><br><span class="line"><span class="code">             otherwise标签做其他情况的声明 相当于defaule</span></span><br><span class="line"><span class="code">3. foreach：相当于java代码的for语句</span></span><br><span class="line"><span class="code"> 1. 完成重复的操作</span></span><br><span class="line"><span class="code">        for(int i = 0; i &lt; 10; i++)&#123;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">        * 属性：</span></span><br><span class="line"><span class="code">            begin:开始值</span></span><br><span class="line"><span class="code">            end：结束值</span></span><br><span class="line"><span class="code">            var：临时变量</span></span><br><span class="line"><span class="code">            step：步长</span></span><br><span class="line"><span class="code">            varStatus:循环状态对象</span></span><br><span class="line"><span class="code">                index:容器中元素的索引从0开始</span></span><br><span class="line"><span class="code">                count：循环次数从1开始</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet"> 2.</span> 遍历容器</span><br><span class="line"><span class="code">            List&lt;User&gt; list</span></span><br><span class="line"><span class="code">            for(User user : list)&#123;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">            * 属性：</span></span><br><span class="line"><span class="code">                items：容器对象</span></span><br><span class="line"><span class="code">                var:容器中元素的临时变量</span></span><br><span class="line"><span class="code">                varStatus：循环状态对象</span></span><br><span class="line"><span class="code">                    index：容器中元素的索引，从0开始</span></span><br><span class="line"><span class="code">                    count：循环次数，从1开始</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java 前端" scheme="http://example.com/tags/Java-%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot</title>
    <link href="http://example.com/2021/08/02/SpringBoot/"/>
    <id>http://example.com/2021/08/02/SpringBoot/</id>
    <published>2021-08-02T12:37:54.000Z</published>
    <updated>2021-08-12T11:28:47.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><span id="more"></span><h2 id="SSM环境搭建"><a href="#SSM环境搭建" class="headerlink" title="SSM环境搭建"></a>SSM环境搭建</h2><ul><li>spring </li><li>springmvc</li><li>mybatis</li><li>spring springmvc mybatis  简单功能   员工添加 查询  所有</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 项目</span></span><br><span class="line"><span class="bullet">-</span>  需求分析  概要设计(库表设计)   详细设计(验证库表正确性)  编码(环境搭建+业务代码)  测试  部署上线</span><br><span class="line"></span><br><span class="line"><span class="section"># 员工添加 查询所有功能  SSM</span></span><br><span class="line"><span class="bullet">-</span> 库表   库: ssm   数据库:mysql  表: id name birthday salary</span><br><span class="line"></span><br><span class="line"><span class="section"># 编码 环境搭建 ssm  spring  springmvc   一个团队开发 无缝整合</span></span><br><span class="line"><span class="bullet">-</span> springmvc  spring  mybatis</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span></span><br><span class="line"><span class="code">        &lt;!--junit--&gt;</span></span><br><span class="line"><span class="code">        &lt;dependency&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;junit&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">            &lt;version&gt;4.11&lt;/version&gt;</span></span><br><span class="line"><span class="code">            &lt;scope&gt;test&lt;/scope&gt;</span></span><br><span class="line"><span class="code">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &lt;!--spring--&gt;</span></span><br><span class="line"><span class="code">        &lt;dependency&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">            &lt;version&gt;5.3.6&lt;/version&gt;</span></span><br><span class="line"><span class="code">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &lt;dependency&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">            &lt;version&gt;5.3.6&lt;/version&gt;</span></span><br><span class="line"><span class="code">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &lt;dependency&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">            &lt;version&gt;5.3.6&lt;/version&gt;</span></span><br><span class="line"><span class="code">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &lt;dependency&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">            &lt;version&gt;5.3.6&lt;/version&gt;</span></span><br><span class="line"><span class="code">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &lt;dependency&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">            &lt;version&gt;5.3.6&lt;/version&gt;</span></span><br><span class="line"><span class="code">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &lt;dependency&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">            &lt;version&gt;5.3.6&lt;/version&gt;</span></span><br><span class="line"><span class="code">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &lt;dependency&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">            &lt;version&gt;5.3.6&lt;/version&gt;</span></span><br><span class="line"><span class="code">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &lt;!--spring web mvc--&gt;</span></span><br><span class="line"><span class="code">        &lt;dependency&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">            &lt;version&gt;5.3.6&lt;/version&gt;</span></span><br><span class="line"><span class="code">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"></span><br><span class="line"><span class="code">        &lt;!--druid--&gt;</span></span><br><span class="line"><span class="code">        &lt;dependency&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;druid&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">            &lt;version&gt;1.2.4&lt;/version&gt;</span></span><br><span class="line"><span class="code">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &lt;!--mysql--&gt;</span></span><br><span class="line"><span class="code">        &lt;dependency&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">            &lt;version&gt;5.1.38&lt;/version&gt;</span></span><br><span class="line"><span class="code">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &lt;!--mybatis--&gt;</span></span><br><span class="line"><span class="code">        &lt;dependency&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">            &lt;version&gt;3.5.6&lt;/version&gt;</span></span><br><span class="line"><span class="code">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &lt;dependency&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">            &lt;version&gt;2.0.6&lt;/version&gt;</span></span><br><span class="line"><span class="code">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"></span><br><span class="line"><span class="code">        &lt;!--  jackson--&gt;</span></span><br><span class="line"><span class="code">        &lt;dependency&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">            &lt;version&gt;2.9.3&lt;/version&gt;</span></span><br><span class="line"><span class="code">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"></span><br><span class="line"><span class="code">        &lt;!-- aspectj --&gt;</span></span><br><span class="line"><span class="code">        &lt;dependency&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">            &lt;version&gt;1.9.5&lt;/version&gt;</span></span><br><span class="line"><span class="code">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &lt;!--aspectj--&gt;</span></span><br><span class="line"><span class="code">        &lt;dependency&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;aspectjrt&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">            &lt;version&gt;1.9.5&lt;/version&gt;</span></span><br><span class="line"><span class="code">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    &lt;/dependencies&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建spring配置"><a href="#创建spring配置" class="headerlink" title="创建spring配置"></a>创建spring配置</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--开启注解扫描--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.baizhi.service&quot;</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;aspectj&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;com.baizhi.controller..*&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--  创建DataSource--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ssm?characterEncoding=UTF-8&quot;</span>/&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--  创建 SQLSessionFactoryBean --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/baizhi/mapper/*.xml&quot;</span>/&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.baizhi.entity&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--  创建dao --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.baizhi.dao&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--  创建事务管理器--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 开启注解事务生效--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="创建springmvc配置"><a href="#创建springmvc配置" class="headerlink" title="创建springmvc配置"></a>创建springmvc配置</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    注解扫描--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.baizhi.controller&quot;</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 开启注册驱动--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 配置视图解析器--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>/&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置工厂配置--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span></span>contextConfigLocation<span class="xml"><span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span>classpath:spring.xml<span class="xml"><span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span>org.springframework.web.context.ContextLoaderListener<span class="xml"><span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--配置springmvc--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span></span>springmvc<span class="xml"><span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="xml"><span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span></span><br><span class="line"><span class="code">    &lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;</span></span><br><span class="line"><span class="code">  &lt;/init-param&gt;</span></span><br><span class="line"><span class="code">&lt;/servlet&gt;</span></span><br><span class="line"><span class="code">&lt;servlet-mapping&gt;</span></span><br><span class="line"><span class="code">  &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span></span><br><span class="line"><span class="code">  &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="code">&lt;/servlet-mapping&gt;</span></span><br></pre></td></tr></table></figure><h2 id="现有SSM开发存在问题"><a href="#现有SSM开发存在问题" class="headerlink" title="现有SSM开发存在问题"></a>现有SSM开发存在问题</h2><ul><li>大量maven冗余配置</li><li>每次构建项目都要书写大量相同配置极大浪费了项目开发时间</li><li>每次整合第三方技术都需要编写相关配置文件</li><li>项目测试每次都需要部署到tomcat</li></ul><blockquote><p><strong>注意:这就是早期的SSM或者SSH开发存在问题,是不是很麻烦☹️☹️☹️</strong></p></blockquote><h2 id="SpringBoot的引言"><a href="#SpringBoot的引言" class="headerlink" title="SpringBoot的引言"></a>SpringBoot的引言</h2><p>Spring Boot是由<code>Pivotal团队提供的全新框架</code>，其设计目的是用来<code>简化Spring应用的 初始搭建以及开发过程</code>。该框架使用了<code>特定的方式来进行配置</code>，从而使开发人员不 再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应 用开发领域(rapid application development)成为领导者。</p><p>Spring Boot 全新框架  作用: 简化spring应用初始搭建和开发过程</p><p>如何简化:  开发人员使用springboot只要基于特定方式进行配置  简化spring使用</p><p>SpringBoot 微框架:   5分钟 完成之前ssm中环境</p><p><code>springboot(微框架) = springmvc(控制器) + spring core(项目管理)</code></p><h2 id="SpringBoot的优势"><a href="#SpringBoot的优势" class="headerlink" title="SpringBoot的优势"></a>SpringBoot的优势</h2><ol><li><code>创建完整的独立的Spring应用程序  </code>  spring springmvc  只有一个容器</li><li><code>嵌入的Tomcat，无需部署WAR文件</code>  springboot 内嵌tomcat  应用跑在内嵌服务器</li><li><code>简化Maven配置,自动配置Spring Springmvc,没有XML配置</code>  几个依赖  <ol><li>用来springboot spring应用在无xml</li></ol></li></ol><h2 id="SpringBoot的约定"><a href="#SpringBoot的约定" class="headerlink" title="SpringBoot的约定"></a>SpringBoot的约定</h2><p>![image-20200321091519423](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20200321091519423.png)</p><ul><li><p><code>springboot 项目中必须在src/main/resources中放入application.yml(.properties)核心配置文件  名字必须为:application</code></p></li><li><p>springboot 项目中必须在src/main/java中所有子包之外构建全局入口类型,xxApplication,入口类一个springboot项目只能有一个`</p></li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h5 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.System Requirements</span></span><br><span class="line"><span class="code">JDK1.8+</span></span><br><span class="line"><span class="code">MAVEN3.2+  </span></span><br><span class="line"><span class="code">Spring Framework 5.x+ </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># 2.ServletContainers: </span></span><br><span class="line"><span class="code">Tomcat 9.0+</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># 3.开发工具</span></span><br><span class="line"><span class="code">IDEA    2021版本 </span></span><br></pre></td></tr></table></figure><h5 id="新建项目中引入依赖"><a href="#新建项目中引入依赖" class="headerlink" title="新建项目中引入依赖"></a>新建项目中引入依赖</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--继承springboot的父项目--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">    &lt;version&gt;2.5.0&lt;/version&gt;</span></span><br><span class="line"><span class="code">&lt;/parent&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span></span><br><span class="line">  &lt;!--引入springboot的web支持--&gt;</span><br><span class="line"><span class="code">    &lt;dependency&gt;</span></span><br><span class="line"><span class="code">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="code">&lt;/dependencies&gt;</span></span><br></pre></td></tr></table></figure><h5 id="引入配置文件"><a href="#引入配置文件" class="headerlink" title="引入配置文件"></a>引入配置文件</h5><p>​        <code>项目中 src/main/resources/application.yml</code></p><h5 id="编写入口类"><a href="#编写入口类" class="headerlink" title="编写入口类"></a>编写入口类</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//在项目中如下的包结构中创建入口类 Application</span><br><span class="line">/<span class="emphasis">*</span></span><br><span class="line"><span class="emphasis">com</span></span><br><span class="line"><span class="emphasis">+| baizhi</span></span><br><span class="line"><span class="emphasis">*</span>/</span><br><span class="line"><span class="code">    @SpringBootApplication</span></span><br><span class="line"><span class="code">    public class Application &#123;</span></span><br><span class="line"><span class="code">      public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="code">        SpringApplication.run(Application.class,args);</span></span><br><span class="line"><span class="code">      &#125;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br></pre></td></tr></table></figure><h5 id="运行main启动项目"><a href="#运行main启动项目" class="headerlink" title="运行main启动项目"></a>运行main启动项目</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup</span><br><span class="line">s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080 (http)</span><br><span class="line">com.baizhi.Application : Started Application in 2.152 seconds (JVM running for 2.611)</span><br><span class="line">//说明:  出现以上日志说明启动成功</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意:到这里项目环境已经搭建成功了,看看仅仅需要5分钟😄😁😁</strong></p></blockquote><h5 id="建包并创建控制器"><a href="#建包并创建控制器" class="headerlink" title="建包并创建控制器"></a>建包并创建控制器</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//在项目中创建指定的包结构</span><br><span class="line">/<span class="emphasis">*</span></span><br><span class="line"><span class="emphasis"> com</span></span><br><span class="line"><span class="emphasis">    +| baizhi</span></span><br><span class="line"><span class="emphasis">    +| controller *</span>/ </span><br><span class="line"><span class="code">                @Controller</span></span><br><span class="line"><span class="code">                  @RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="code">                  public class HelloController &#123;</span></span><br><span class="line"><span class="code">                    @RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="code">                    @ResponseBody</span></span><br><span class="line"><span class="code">                    public String hello()&#123;</span></span><br><span class="line"><span class="code">                      System.out.println(&quot;======hello world=======&quot;);</span></span><br><span class="line"><span class="code">                      return &quot;hello&quot;;</span></span><br><span class="line"><span class="code">                    &#125;</span></span><br><span class="line"><span class="code">                  &#125;</span></span><br><span class="line"><span class="code">                     </span></span><br></pre></td></tr></table></figure><h5 id="访问项目"><a href="#访问项目" class="headerlink" title="访问项目"></a>访问项目</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 注意: springboot的项目启动默认项目名</span></span><br><span class="line"><span class="bullet">-</span> 访问路径:  http://localhost:8080/hello/hello</span><br></pre></td></tr></table></figure><h5 id="修改内嵌服务器端口"><a href="#修改内嵌服务器端口" class="headerlink" title="修改内嵌服务器端口"></a>修改内嵌服务器端口</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8989</span><br></pre></td></tr></table></figure><h5 id="修改应用名称"><a href="#修改应用名称" class="headerlink" title="修改应用名称"></a>修改应用名称</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  servlet:</span><br><span class="line"><span class="code">    context-path: /springboot_day1</span></span><br></pre></td></tr></table></figure><h2 id="相关注解说明"><a href="#相关注解说明" class="headerlink" title="相关注解说明"></a>相关注解说明</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 入口类 SpringApplication</span></span><br><span class="line"><span class="bullet">-</span> SpringBootApplication: 全局入口类 有且只能有一个</span><br><span class="line"><span class="bullet">-</span> mian 函数参数可以在启动时指定jvm参数覆盖默认配置</span><br><span class="line"></span><br><span class="line"><span class="section"># @SpringBootApplication 注解等价于: </span></span><br><span class="line"><span class="bullet">-</span> @SpringBootConfiguration           标识这是一个springboot的配置类,默认自定配置Spring环境</span><br><span class="line"><span class="bullet">-</span> @EnableAutoConfiguration  自动与项目中集成的第三方技术进行集成</span><br><span class="line"><span class="bullet">-</span> @ComponentScan  扫描入口类所在子包以及子包后代包中注解</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h5 id="配置文件的拆分"><a href="#配置文件的拆分" class="headerlink" title="配置文件的拆分"></a>配置文件的拆分</h5><p>说明: 在实际开发过程中生产环境和测试环境有可能是不一样的 因此将生产中的配置和测试中的配置拆分开,是非常必要的在springboot中也提供了配置文件拆分的方式. 这里以生产中项名名称不一致为例:</p><ul><li><p><strong>生产中项目名为: <code>springboot</code></strong></p></li><li><p><strong>测试中项目名为: <code>springboot_day1</code></strong></p></li><li><p><strong>端口同时为:   8080</strong></p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 主配置文件:</span></span><br><span class="line"><span class="bullet">-</span> application.yml#用来书写相同的的配置</span><br><span class="line"><span class="code">server:</span></span><br><span class="line"><span class="code">port: 8080 #生产和测试端口一致</span></span><br><span class="line"><span class="code">                   </span></span><br><span class="line"><span class="code"># 生产配置文件:</span></span><br><span class="line"><span class="code">- application-pord.yml #prod为配置文件简名</span></span><br><span class="line"><span class="code">    server:</span></span><br><span class="line"><span class="code">    context-path: /cmfz</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">#测试配置文件:</span></span><br><span class="line"><span class="code">-application-dev.yml  #dev为配置文件简名</span></span><br><span class="line"><span class="code">    server:</span></span><br><span class="line"><span class="code">    context-path: /springboot</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section">#在主配置中指定那个环境生效配置</span></span><br><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line"><span class="code">    active: dev #指定那个环境配置生效 dev为环境配置文件的简名</span></span><br></pre></td></tr></table></figure><p>![image-20210609152026228](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20210609152026228.png)</p><h5 id="启动指定配置文件"><a href="#启动指定配置文件" class="headerlink" title="启动指定配置文件"></a>启动指定配置文件</h5><p>说明: 往往在企业级开发过程中为SpringBoot应用启动时指定一个完整外部配置也是经常用到的,在SpringBoot中也提供这个方式来启动项目如:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.创建一个完整的配置文件</span></span><br></pre></td></tr></table></figure><p>![image-20210609152117401](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20210609152117401.png)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 2.启动时指定配置文件位置</span></span><br></pre></td></tr></table></figure><p>![image-20210609152324204](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20210609152324204.png)</p><hr><h2 id="工厂创建对象"><a href="#工厂创建对象" class="headerlink" title="工厂创建对象"></a>工厂创建对象</h2><h3 id="创建单个对象"><a href="#创建单个对象" class="headerlink" title="创建单个对象"></a>创建单个对象</h3><p>​    在springboot中可以管理单个对象可以直接使用spring框架中注解形式创建。</p><ul><li><strong><code>@Component</code></strong> 通用的对象创建注解<ul><li><code>@Controller</code>  用来创建控制器对象</li><li><code>@Service</code>      用来创建业务层对象</li><li><code>@Repository</code> 用来创建DAO层对象<ul><li>以上注解都有value属性，value属性用来指定工厂中对象名称</li></ul></li></ul></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class DemoServiceImpl implements UserService&#123;</span><br><span class="line">  //doing....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 2.通过工厂创建之后可以在使用处注入该对象</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;hello&quot;)</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"><span class="code">    @Autowired</span></span><br><span class="line"><span class="code">    private DemoService demoService;</span></span><br><span class="line"><span class="code">    //doing...</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="创建多个对象"><a href="#创建多个对象" class="headerlink" title="创建多个对象"></a>创建多个对象</h3><p>​    如何在springboot中像spring框架一样通过xml创建多个对象,在SpringBoot中也提供了相同注解如**<code>@Configuration + @Bean</code>**注解进行创建</p><ul><li><strong><code>@Configuration</code></strong>   代表这是一个spring的配置类相当于Spring.xml配置文件</li><li><strong><code>@Bean</code></strong>   用来在工厂中创建这个@Bean注解标识的对象  <ul><li>默认使用@Bean创建对象在工厂中唯一标识为<strong>方法名称</strong></li><li>修改在工厂中对象标识可以在使用**@Bean(“工厂中名字”)指定一个名字**</li></ul></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.管理复杂对象的创建</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class Beans &#123;</span><br><span class="line"><span class="code">    @Bean</span></span><br><span class="line"><span class="code">    public Calendar calendar()&#123;</span></span><br><span class="line"><span class="code">        return Calendar.getInstance();</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 2.使用复杂对象</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;hello&quot;)</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"><span class="code">    @Autowired</span></span><br><span class="line"><span class="code">    private Calendar calendar;</span></span><br><span class="line"><span class="code">    ......</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 注意: </span></span><br><span class="line"><span class="code">1.@Configuration 用来在工厂中一次性创建多个对象</span></span><br><span class="line"><span class="code">  2.@Component     用来创建单个对象                     </span></span><br></pre></td></tr></table></figure><hr><h2 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h2><h5 id="基本属性注入"><a href="#基本属性注入" class="headerlink" title="基本属性注入"></a>基本属性注入</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.@Value 属性注入               [重点]</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"><span class="code">    //基本类型+String类型+日期类型</span></span><br><span class="line"><span class="code">  @Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="code">    private String name;</span></span><br><span class="line"><span class="code">    @Value(&quot;$&#123;age&#125;&quot;)</span></span><br><span class="line"><span class="code">    private Integer age;</span></span><br><span class="line"><span class="code">    @Value(&quot;$&#123;sex&#125;&quot;)</span></span><br><span class="line"><span class="code">    private Boolean sex;</span></span><br><span class="line"><span class="code">    @Value(&quot;$&#123;price&#125;&quot;)</span></span><br><span class="line"><span class="code">    private Double price;</span></span><br><span class="line"><span class="code">    @Value(&quot;$&#123;bir&#125;&quot;)</span></span><br><span class="line"><span class="code">    private Date bir;</span></span><br><span class="line"><span class="code">//注入数组</span></span><br><span class="line"><span class="code">    @Value(&quot;$&#123;qqs&#125;&quot;)</span></span><br><span class="line"><span class="code">    private String[] qqs;</span></span><br><span class="line"><span class="code">  //注入list</span></span><br><span class="line"><span class="code">    @Value(&quot;$&#123;lists&#125;&quot;)</span></span><br><span class="line"><span class="code">    private List&lt;String&gt; lists;</span></span><br><span class="line"><span class="code">  //注入maps</span></span><br><span class="line"><span class="code">    @Value(&quot;#&#123;$&#123;maps&#125;&#125;&quot;)</span></span><br><span class="line"><span class="code">    private Map&lt;String,String&gt; maps;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 2.在配置文件中定义注入值</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">name: 小陈</span><br><span class="line">age: 23</span><br><span class="line">price: 23.23</span><br><span class="line">sex: true</span><br><span class="line">bir: 2012/12/12</span><br><span class="line"></span><br><span class="line">qqs: 123,3434,3434</span><br><span class="line">lists: xiaochen,xiaoming,xiaosan</span><br><span class="line"></span><br><span class="line">maps: &quot;&#123;&#x27;aa&#x27;:&#x27;1234&#x27;,&#x27;bb&#x27;:&#x27;2344&#x27;&#125;&quot;</span><br></pre></td></tr></table></figure><ul><li><strong><code>注意: 这里面map集合注入比较特殊</code></strong></li></ul><h5 id="对象方式注入"><a href="#对象方式注入" class="headerlink" title="对象方式注入"></a>对象方式注入</h5><p><strong><code>注意: 这种方式必须提供SET方法</code></strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1. @ConfigurationProperties(prefix=&quot;前缀&quot;)</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = &quot;user&quot;)</span><br><span class="line">public class User &#123;</span><br><span class="line"><span class="code">    private String id;</span></span><br><span class="line"><span class="code">    private String name;</span></span><br><span class="line"><span class="code">    private Integer age;</span></span><br><span class="line"><span class="code">    private String  bir;</span></span><br><span class="line"><span class="code">    //set 方法一定要提供</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 2. 编写配置文件</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user:</span><br><span class="line">  id: 24</span><br><span class="line">  name: xiaohei</span><br><span class="line">  age: 23</span><br><span class="line">  bir: 2012/12/12</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 3. 引入依赖构建自定义注入元数据</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span></span>org.springframework.boot<span class="xml"><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span></span>spring-boot-configuration-processor<span class="xml"><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">optional</span>&gt;</span></span>true<span class="xml"><span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h2 id="JSP模板集成"><a href="#JSP模板集成" class="headerlink" title="JSP模板集成"></a>JSP模板集成</h2><p>在SpringBoot框架中默认模板推荐使用Thymeleaf模板,这里我们优先讲与JSP模板集成</p><h5 id="引入jsp的集成jar包"><a href="#引入jsp的集成jar包" class="headerlink" title="引入jsp的集成jar包"></a>引入jsp的集成jar包</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--c标签库--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;groupId&gt;jstl&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">    &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">    &lt;version&gt;1.2&lt;/version&gt;</span></span><br><span class="line"><span class="code">&lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">&lt;!--让内嵌tomcat具有解析jsp功能--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">    &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><h5 id="引入jsp运行插件"><a href="#引入jsp运行插件" class="headerlink" title="引入jsp运行插件"></a>引入jsp运行插件</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;finalName&gt;springboot_day1&lt;/finalName&gt;</span></span><br><span class="line"><span class="code">    &lt;!--引入springboot插件 可以正确打包  显示jsp--&gt;</span></span><br><span class="line"><span class="code">    &lt;plugins&gt;</span></span><br><span class="line"><span class="code">        &lt;plugin&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">        &lt;/plugin&gt;</span></span><br><span class="line"><span class="code">    &lt;/plugins&gt;</span></span><br><span class="line"><span class="code">&lt;/build&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置视图解析器"><a href="#配置视图解析器" class="headerlink" title="配置视图解析器"></a>配置视图解析器</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#在配置文件中引入视图解析器</span></span><br><span class="line">spring:</span><br><span class="line">  mvc:</span><br><span class="line"><span class="code">    view:</span></span><br><span class="line"><span class="code">      prefix: /     # /代表访问项目中webapp中页面</span></span><br><span class="line"><span class="code">      suffix: .jsp </span></span><br></pre></td></tr></table></figure><h5 id="第一种方式使用插件启动访问JSP页面"><a href="#第一种方式使用插件启动访问JSP页面" class="headerlink" title="第一种方式使用插件启动访问JSP页面"></a>第一种方式使用插件启动访问JSP页面</h5><p>![image-20191129124602959](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20191129124602959.png)</p><h5 id="第二种方式使用idea中指定工作目录启动-访问JSP"><a href="#第二种方式使用idea中指定工作目录启动-访问JSP" class="headerlink" title="第二种方式使用idea中指定工作目录启动 访问JSP"></a>第二种方式使用idea中指定工作目录启动 访问JSP</h5><p> ![image-20191129124727562](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20191129124727562.png)</p><h5 id="启动项目测试"><a href="#启动项目测试" class="headerlink" title="启动项目测试"></a>启动项目测试</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8989/index.jsp</span><br></pre></td></tr></table></figure><h5 id="修改jsp无须重启应用"><a href="#修改jsp无须重启应用" class="headerlink" title="修改jsp无须重启应用"></a>修改jsp无须重启应用</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  servlet:</span><br><span class="line"><span class="code">    jsp:</span></span><br><span class="line"><span class="code">      init-parameters:</span></span><br><span class="line"><span class="code">        development: true</span></span><br></pre></td></tr></table></figure><hr><h2 id="整合Mybatis框架"><a href="#整合Mybatis框架" class="headerlink" title="整合Mybatis框架"></a>整合Mybatis框架</h2><h5 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span></span>com.alibaba<span class="xml"><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span></span>druid<span class="xml"><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span></span>1.2.4<span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span></span>mysql<span class="xml"><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span></span>mysql-connector-java<span class="xml"><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span></span>5.1.38<span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--整合mybatis--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span></span>org.mybatis.spring.boot<span class="xml"><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span></span>mybatis-spring-boot-starter<span class="xml"><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span></span>2.1.4<span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">  说明:由于springboot整合mybatis版本中默认依赖mybatis 因此不需要额外引入mybati版本,否则会出现冲突`--&gt;</span><br></pre></td></tr></table></figure><h5 id="配置配置文件"><a href="#配置配置文件" class="headerlink" title="配置配置文件"></a>配置配置文件</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  mvc:</span><br><span class="line"><span class="code">    view:</span></span><br><span class="line"><span class="code">      prefix: /</span></span><br><span class="line"><span class="code">      suffix: .jsp</span></span><br><span class="line"><span class="code">  datasource:</span></span><br><span class="line"><span class="code">    type: org.apache.commons.dbcp.BasicDataSource   #指定连接池类型</span></span><br><span class="line"><span class="code">    driver-class-name: com.mysql.jdbc.Driver        #指定驱动</span></span><br><span class="line"><span class="code">    url: jdbc:mysql://localhost:3306/ssm?characterEncoding=UTF-8           #指定url</span></span><br><span class="line"><span class="code">    username: root#指定用户名</span></span><br><span class="line"><span class="code">    password: root #指定密码</span></span><br></pre></td></tr></table></figure><h5 id="加入mybatis配置"><a href="#加入mybatis配置" class="headerlink" title="加入mybatis配置"></a>加入mybatis配置</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#配置文件中加入如下配置:</span></span><br><span class="line"></span><br><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath:com/baizhi/mapper/<span class="emphasis">*.xml  #指定mapper配置文件位置</span></span><br><span class="line"><span class="emphasis">  type-aliases-package: com.baizhi.entity              #指定起别名所在包</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//入口类中加入如下配置:</span><br><span class="line">@SpringBootApplication</span><br><span class="line">@MapperScan(&quot;com.baizhi.dao&quot;)   //必须在入口类中加入这个配置</span><br><span class="line">public class Application &#123;</span><br><span class="line"><span class="code">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="code">        SpringApplication.run(Application.class,args);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE <span class="code">`t_clazz`</span> (</span><br><span class="line">  <span class="code">`id`</span> varchar(40) NOT NULL,</span><br><span class="line">  <span class="code">`name`</span> varchar(80) DEFAULT NULL,</span><br><span class="line">  <span class="code">`no`</span> varchar(90) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (<span class="code">`id`</span>)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><h5 id="开发实体类"><a href="#开发实体类" class="headerlink" title="开发实体类"></a>开发实体类</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Clazz &#123;</span><br><span class="line"><span class="code">    private String id;</span></span><br><span class="line"><span class="code">    private String name;</span></span><br><span class="line"><span class="code">    private String no;</span></span><br><span class="line"><span class="code">    //get set 方法省略....</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="开发DAO接口以及Mapper"><a href="#开发DAO接口以及Mapper" class="headerlink" title="开发DAO接口以及Mapper"></a>开发DAO接口以及Mapper</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface ClazzDAO &#123;</span><br><span class="line"><span class="code">    List&lt;Clazz&gt; findAll();</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.baizhi.dao.ClazzDAO&quot;</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;select id=&quot;findAll&quot; resultType=&quot;Clazz&quot;&gt;</span></span><br><span class="line"><span class="code">        select * from t_clazz </span></span><br><span class="line"><span class="code">    &lt;/select&gt;</span></span><br><span class="line"><span class="code">&lt;/mapper&gt;</span></span><br></pre></td></tr></table></figure><h5 id="开发Service以及实现"><a href="#开发Service以及实现" class="headerlink" title="开发Service以及实现"></a>开发Service以及实现</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//接口</span><br><span class="line">public interface ClazzService &#123;</span><br><span class="line"><span class="code">    List&lt;Clazz&gt; findAll();</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">//实现</span></span><br><span class="line"><span class="code">@Service</span></span><br><span class="line"><span class="code">@Transactional</span></span><br><span class="line"><span class="code">public class ClazzServiceImpl implements  ClazzService &#123;</span></span><br><span class="line"><span class="code">    @Autowired</span></span><br><span class="line"><span class="code">    private ClazzDAO clazzDAO;</span></span><br><span class="line"><span class="code">   </span></span><br><span class="line"><span class="code">    @Transactional(propagation = Propagation.SUPPORTS)</span></span><br><span class="line"><span class="code">    @Override</span></span><br><span class="line"><span class="code">    public List&lt;Clazz&gt; findAll() &#123;</span></span><br><span class="line"><span class="code">        return clazzDAO.findAll();</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="开发Controller"><a href="#开发Controller" class="headerlink" title="开发Controller"></a>开发Controller</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class ClazzController &#123;</span><br><span class="line"><span class="code">    @Autowired</span></span><br><span class="line"><span class="code">    private ClazzService clazzService;</span></span><br><span class="line"><span class="code">  </span></span><br><span class="line"><span class="code">    //查询所有</span></span><br><span class="line"><span class="code">    @RequestMapping(&quot;findAll&quot;)</span></span><br><span class="line"><span class="code">    public List&lt;Clazz&gt; findAll()&#123;</span></span><br><span class="line"><span class="code">        return clazzService.findAll();</span></span><br><span class="line"><span class="code">    &#125;   </span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="启动项目访问测试"><a href="#启动项目访问测试" class="headerlink" title="启动项目访问测试"></a>启动项目访问测试</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8989/项目名/findAll</span><br></pre></td></tr></table></figure><h2 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h2><blockquote><p>往往在开发过程中业务代码课程非常复杂频繁启动服务器测试,非常麻烦!这个时候使用本地测试就是一个很好的解决方案,springboot也提供了本地测试解决方案!</p></blockquote><h5 id="引入测试依赖"><a href="#引入测试依赖" class="headerlink" title="引入测试依赖"></a>引入测试依赖</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">     &lt;scope&gt;test&lt;/scope&gt;</span></span><br><span class="line"><span class="code">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><h5 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h5><ul><li><strong><code>@SpringBootTest</code></strong> <ul><li>修饰范围: 用在类上</li><li>作用: 用来启动本地Spring环境</li></ul></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest</span><br><span class="line">public class TestEmpService &#123;</span><br><span class="line"></span><br><span class="line"><span class="code">    @Autowired</span></span><br><span class="line"><span class="code">    private EmpService empService;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    @Test</span></span><br><span class="line"><span class="code">    public void test()&#123;</span></span><br><span class="line"><span class="code">        empService.findAll().forEach(emp-&gt; System.out.println(emp));</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="热部署工具"><a href="#热部署工具" class="headerlink" title="热部署工具"></a>热部署工具</h2><p><strong><code>为了进一步提高开发效率,springboot为我们提供了全局项目热部署,日后在开发过程中修改了部分代码以及相关配置文件后,不需要每次重启使修改生效,在项目中开启了springboot全局热部署之后只需要在修改之后等待几秒即可使修改生效。</code></strong></p><h5 id="开启热部署"><a href="#开启热部署" class="headerlink" title="开启热部署"></a>开启热部署</h5><h6 id="项目中引入依赖-每次搭建项目都需要引入"><a href="#项目中引入依赖-每次搭建项目都需要引入" class="headerlink" title="项目中引入依赖 (每次搭建项目都需要引入)"></a>项目中引入依赖 (每次搭建项目都需要引入)</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span></span>org.springframework.boot<span class="xml"><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span></span>spring-boot-devtools<span class="xml"><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">optional</span>&gt;</span></span>true<span class="xml"><span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h6 id="设置idea中支持自动编译-只需要设置一次"><a href="#设置idea中支持自动编译-只需要设置一次" class="headerlink" title="设置idea中支持自动编译(只需要设置一次)"></a>设置idea中支持自动编译(只需要设置一次)</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.开启自动编译</span></span><br><span class="line"></span><br><span class="line"><span class="code">Preferences | Build, Execution, Deployment | Compiler -&gt; 勾选上 Build project automatically 这个选项</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># 2.开启允许在运行过程中修改文件</span></span><br><span class="line"><span class="code">ctrl + alt + shift + / ----&gt;选择1.Registry ---&gt; 勾选 compiler.automake.allow.when.app.running 这个选项</span></span><br></pre></td></tr></table></figure><h6 id="启动项目检测热部署是否生效"><a href="#启动项目检测热部署是否生效" class="headerlink" title="启动项目检测热部署是否生效"></a>启动项目检测热部署是否生效</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.启动出现如下日志代表生效</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2019-07-17 21:23:17.566  INFO 4496 --- [  restartedMain] com.baizhi.InitApplication               : Starting InitApplication on chenyannandeMacBook-Pro.local with PID 4496 (/Users/chenyannan/IdeaProjects/ideacode/springboot<span class="emphasis">_day1/target/classes started by chenyannan in /Users/chenyannan/IdeaProjects/ideacode/springboot_</span>day1)</span><br><span class="line">2019-07-17 21:23:17.567  INFO 4496 --- [  restartedMain] com.baizhi.InitApplication               : The following profiles are active: dev</span><br><span class="line">2019-07-17 21:23:17.612  INFO 4496 --- [  restartedMain] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@66d799c5: startup date [Wed Jul 17 21:23:17 CST 2019]; root of context hierarchy</span><br><span class="line">2019-07-17 21:23:18.782  INFO 4496 --- [  restartedMain] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat initialized with port(s): 8989 (http)</span><br><span class="line">2019-07-17 21:23:18.796  INFO 4496 --- [  restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</span><br><span class="line">2019-07-17 21:23:18.797  INFO 4496 --- [  restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/8.5.20</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong><code>注意:日志出现restartedMain代表已经生效,在使用热部署时如果遇到修改之后不能生效,请重试重启项目在试</code></strong></p><hr><h2 id="日志处理"><a href="#日志处理" class="headerlink" title="日志处理"></a>日志处理</h2><h5 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h5><p>​    springboot框架 集成日志  logback 日志  </p><p>​    Logback是由<a href="https://baike.baidu.com/item/log4j/480673">log4j</a>创始人设计的又一个开源日志组件。目前，logback分为三个模块：logback-core，logback-classic和logback-access。是对log4j日志展示进一步改进!</p><p>​    总结: logback 也是一个开源日志组件  和  log4j作用一致 都是用来生成日志 logback更加轻量</p><h5 id="日志的级别"><a href="#日志的级别" class="headerlink" title="日志的级别"></a>日志的级别</h5><p>![image-20210610110653288](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20210610110653288.png)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; All &lt; Trace &lt; `DEBUG &lt; INFO &lt; WARN &lt; ERROR` &lt; Fatal &lt; OFF</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> OFF   | 关闭：最高级别，不打印日志。 </span><br><span class="line"><span class="bullet">-</span> FATAL | 致命：指明非常严重的可能会导致应用终止执行错误事件。</span><br><span class="line"><span class="bullet">-</span> ERROR | 错误：指明错误事件，但应用可能还能继续运行。 </span><br><span class="line"><span class="bullet">-</span> WARN | 警告：指明可能潜在的危险状况。 </span><br><span class="line"><span class="bullet">-</span> INFO | 信息：指明描述信息，从粗粒度上描述了应用运行过程。 </span><br><span class="line"><span class="bullet">-</span> DEBUG | 调试：指明细致的事件信息，对调试应用最有用。</span><br><span class="line"><span class="bullet">-</span> TRACE | 跟踪：指明程序运行轨迹，比DEBUG级别的粒度更细。 </span><br><span class="line"><span class="bullet">-</span> ALL | 所有：所有日志级别，包括定制级别。</span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 日志级别由低到高:  `日志级别越高输出的日志信息越多`</span></span><br></pre></td></tr></table></figure><h5 id="项目中日志分类"><a href="#项目中日志分类" class="headerlink" title="项目中日志分类"></a>项目中日志分类</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 日志分类:</span></span><br><span class="line"><span class="bullet">-</span> 一种是rootLogger(根全局日志) :     用来监听项目中所有的运行日志 包括引入依赖jar中的日志 </span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 一种是logger(指定包级别日志) :         用来监听项目中指定包中的日志信息</span><br></pre></td></tr></table></figure><h5 id="配置日志"><a href="#配置日志" class="headerlink" title="配置日志"></a>配置日志</h5><p><strong><code>注意:SpringBoot框架中默认根日志为INFO</code></strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line"><span class="code">    root: debug #指定根日志级别(一般不推荐修改根日志,输出信息太多,推荐使用子日志)</span></span><br><span class="line"><span class="code">    com.baizhi.dao: debug #指定某个包中日志</span></span><br><span class="line"><span class="code">  file:</span></span><br><span class="line"><span class="code">    name: aaa.log #指定日志名称</span></span><br><span class="line"><span class="code">    path: ./  #指定日志文件目录</span></span><br></pre></td></tr></table></figure><h5 id="项目中使用日志"><a href="#项目中使用日志" class="headerlink" title="项目中使用日志"></a>项目中使用日志</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"><span class="code">    //声明日志成员</span></span><br><span class="line"><span class="code">    private static final Logger log = LoggerFactory.getLogger(HelloController.class);</span></span><br><span class="line"><span class="code">    @RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="code">    @ResponseBody</span></span><br><span class="line"><span class="code">    public String hello()&#123;</span></span><br><span class="line"><span class="code">        System.out.println(&quot;======hello world=======&quot;);</span></span><br><span class="line"><span class="code">        logger.debug(&quot;DEBUG,&#123;&#125;&quot;,&quot;信息&quot;);</span></span><br><span class="line"><span class="code">        logger.info(&quot;INFO,&#123;&#125;&quot;,&quot;信息&quot;);</span></span><br><span class="line"><span class="code">        logger.warn(&quot;WARN,&#123;&#125;&quot;,&quot;信息&quot;);</span></span><br><span class="line"><span class="code">        logger.error(&quot;ERROR,&#123;&#125;&quot;,&quot;信息&quot;);</span></span><br><span class="line"><span class="code">        return &quot;hello&quot;;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="切面编程"><a href="#切面编程" class="headerlink" title="切面编程"></a>切面编程</h2><h5 id="引言-1"><a href="#引言-1" class="headerlink" title="引言"></a>引言</h5><blockquote><p>springboot是对原有项目中spring框架和springmvc的进一步封装,因此在springboot中同样支持spring框架中AOP切面编程,不过在springboot中为了快速开发仅仅提供了注解方式的切面编程.</p></blockquote><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><h6 id="引入依赖-2"><a href="#引入依赖-2" class="headerlink" title="引入依赖"></a>引入依赖</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">    &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><h6 id="相关注解"><a href="#相关注解" class="headerlink" title="相关注解"></a>相关注解</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 切面注解</span></span><br><span class="line"><span class="bullet">-</span> @Aspect 用来类上,代表这个类是一个切面</span><br><span class="line"><span class="bullet">-</span> @Before 用在方法上代表这个方法是一个前置通知方法 </span><br><span class="line"><span class="bullet">-</span> @After 用在方法上代表这个方法是一个后置通知方法 @Around 用在方法上代表这个方法是一个环绕的方法</span><br><span class="line"><span class="bullet">-</span> @Around 用在方法上代表这个方法是一个环绕的方法</span><br></pre></td></tr></table></figure><h6 id="前置切面"><a href="#前置切面" class="headerlink" title="前置切面"></a>前置切面</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Aspect</span><br><span class="line">@Configuration</span><br><span class="line">public class MyAspect &#123;</span><br><span class="line"><span class="code">    @Before(&quot;execution(* com.baizhi.service.*.*(..))&quot;)</span></span><br><span class="line"><span class="code">    public void before(JoinPoint joinPoint)&#123;</span></span><br><span class="line"><span class="code">        System.out.println(&quot;前置通知&quot;);</span></span><br><span class="line"><span class="code">        joinPoint.getTarget();//目标对象</span></span><br><span class="line"><span class="code">        joinPoint.getSignature();//方法签名</span></span><br><span class="line"><span class="code">        joinPoint.getArgs();//方法参数</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><h6 id="后置切面"><a href="#后置切面" class="headerlink" title="后置切面"></a>后置切面</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Aspect</span><br><span class="line">@Configuration</span><br><span class="line">public class MyAspect &#123;</span><br><span class="line"><span class="code">    @After(&quot;execution(* com.baizhi.service.*.*(..))&quot;)</span></span><br><span class="line"><span class="code">    public void before(JoinPoint joinPoint)&#123;</span></span><br><span class="line"><span class="code">        System.out.println(&quot;后置通知&quot;);</span></span><br><span class="line"><span class="code">        joinPoint.getTarget();//目标对象</span></span><br><span class="line"><span class="code">        joinPoint.getSignature();//方法签名</span></span><br><span class="line"><span class="code">        joinPoint.getArgs();//方法参数</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><p><strong><code>注意: 前置通知和后置通知都没有返回值,方法参数都为joinpoint</code></strong></p><h6 id="环绕切面"><a href="#环绕切面" class="headerlink" title="环绕切面"></a>环绕切面</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Aspect</span><br><span class="line">@Configuration</span><br><span class="line">public class MyAspect &#123;</span><br><span class="line"><span class="code">    @Around(&quot;execution(* com.baizhi.service.*.*(..))&quot;)</span></span><br><span class="line"><span class="code">    public Object before(ProceedingJoinPoint proceedingJoinPoint) throws Throwable &#123;</span></span><br><span class="line"><span class="code">        System.out.println(&quot;进入环绕通知&quot;);</span></span><br><span class="line"><span class="code">        proceedingJoinPoint.getTarget();//目标对象</span></span><br><span class="line"><span class="code">        proceedingJoinPoint.getSignature();//方法签名</span></span><br><span class="line"><span class="code">        proceedingJoinPoint.getArgs();//方法参数</span></span><br><span class="line"><span class="code">        Object proceed = proceedingJoinPoint.proceed();//放行执行目标方法</span></span><br><span class="line"><span class="code">        System.out.println(&quot;目标方法执行之后回到环绕通知&quot;);</span></span><br><span class="line"><span class="code">        return proceed;//返回目标方法返回值</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong><code>注意: 环绕通知存在返回值,参数为ProceedingJoinPoint,如果执行放行,不会执行目标方法,一旦放行必须将目标方法的返回值返回,否则调用者无法接受返回数据</code></strong></p></blockquote><h2 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="文件上传下载"></a>文件上传下载</h2><h5 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h5><p><code>用户访问当前系统,将自己本地计算机中文件通过浏览器上传到当前系统所在的服务器过程中称之为文件的上传</code></p><p>文件上传: 用户将自己计算机中文件 上传到 项目所在服务器过程、文件服务器、OSS 称之为文件上传</p><h6 id="准备上传页面"><a href="#准备上传页面" class="headerlink" title="准备上传页面"></a>准备上传页面</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;路径....&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span></span><br><span class="line"><span class="code">        &lt;input type=&quot;file&quot; name=&quot;aa&quot;&gt;</span></span><br><span class="line"><span class="code">        &lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;</span></span><br><span class="line"><span class="code">&lt;/form&gt;</span></span><br><span class="line"><span class="code">&lt;!--</span></span><br><span class="line"><span class="code">1. 表单提交方式必须是post</span></span><br><span class="line"><span class="code">2. 表单的enctype属性必须为multipart/form-data</span></span><br><span class="line"><span class="code">3. 后台接受变量名字要与文件选择name属性一致</span></span><br><span class="line"><span class="code">--&gt;</span></span><br></pre></td></tr></table></figure><h6 id="编写控制器"><a href="#编写控制器" class="headerlink" title="编写控制器"></a>编写控制器</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/file&quot;)</span><br><span class="line">public class FileController &#123;</span><br><span class="line">  @RequestMapping(&quot;/upload&quot;)</span><br><span class="line">  public String upload(MultipartFile aa, HttpServletRequest request) throws IOException &#123;</span><br><span class="line"><span class="code">        String realPath = request.getRealPath(&quot;/upload&quot;);</span></span><br><span class="line"><span class="code">        aa.transferTo(new File(realPath,aa.getOriginalFilename()));//文件上传</span></span><br><span class="line"><span class="code">        return &quot;index&quot;;</span></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><h6 id="修改文件上传大小"><a href="#修改文件上传大小" class="headerlink" title="修改文件上传大小"></a>修改文件上传大小</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#上传时出现如下异常:  上传文件的大小超出默认配置  默认10M</span></span><br><span class="line">nested exception is java.lang.IllegalStateException: org.apache.tomcat.util.http.fileupload.FileUploadBase$SizeLimitExceededException: the request was rejected because its size (38443713) exceeds the configured maximum (10485760)</span><br><span class="line"><span class="section">#修改上传文件大小:</span></span><br><span class="line">spring:</span><br><span class="line">  http:</span><br><span class="line"><span class="code">    multipart:</span></span><br><span class="line"><span class="code">       max-request-size: 209715200  #用来控制文件上传大小的限制</span></span><br><span class="line"><span class="code">       max-file-size: 209715200 #用来指定服务端最大文件大小   </span></span><br><span class="line"><span class="code"></span></span><br><span class="line">spring.servlet.multipart.max-file-size=500MB</span><br><span class="line">spring.servlet.multipart.max-request-size=500MB</span><br></pre></td></tr></table></figure><h5 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h5><p><code>文件下载:  将服务器某个资源文件下载到用户本地计算机过程称之为文件下载</code></p><h6 id="提供下载文件链接"><a href="#提供下载文件链接" class="headerlink" title="提供下载文件链接"></a>提供下载文件链接</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;../file/download?fileName=corejava.txt&quot;</span>&gt;</span></span>corejava.txt<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h6 id="开发控制器"><a href="#开发控制器" class="headerlink" title="开发控制器"></a>开发控制器</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/download&quot;)</span><br><span class="line">public void download(String fileName, HttpServletRequest request, HttpServletResponse response) throws Exception &#123;</span><br><span class="line"><span class="code">        String realPath = request.getRealPath(&quot;/upload&quot;);</span></span><br><span class="line"><span class="code">        FileInputStream is = new FileInputStream(new File(realPath, fileName));</span></span><br><span class="line"><span class="code">        ServletOutputStream os = response.getOutputStream();</span></span><br><span class="line"><span class="code">        response.setHeader(&quot;content-disposition&quot;,&quot;attachment;fileName=&quot;+ URLEncoder.encode(fileName,&quot;UTF-8&quot;));</span></span><br><span class="line"><span class="code">        IOUtils.copy(is,os);</span></span><br><span class="line"><span class="code">        IOUtils.closeQuietly(is);</span></span><br><span class="line"><span class="code">        IOUtils.closeQuietly(os);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><h5 id="开发拦截器"><a href="#开发拦截器" class="headerlink" title="开发拦截器"></a>开发拦截器</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class MyInterceptor implements HandlerInterceptor &#123;</span><br><span class="line"><span class="code">    @Override</span></span><br><span class="line"><span class="code">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object o) throws Exception &#123;</span></span><br><span class="line"><span class="code">        System.out.println(&quot;======1=====&quot;);</span></span><br><span class="line"><span class="code">        return true;//返回true 放行  返回false阻止</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    @Override</span></span><br><span class="line"><span class="code">    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object o, ModelAndView modelAndView) throws Exception &#123;</span></span><br><span class="line"><span class="code">        System.out.println(&quot;=====2=====&quot;);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    @Override</span></span><br><span class="line"><span class="code">    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object o, Exception e) throws Exception &#123;</span></span><br><span class="line"><span class="code">        System.out.println(&quot;=====3=====&quot;);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class WebMvcConfig  implements WebMvcConfigurer &#123;</span><br><span class="line"><span class="code">    @Override</span></span><br><span class="line"><span class="code">    public void addInterceptors(InterceptorRegistry registry) &#123;</span></span><br><span class="line"><span class="code">      registry.addInterceptor(&quot;拦截器&quot;)</span></span><br><span class="line"><span class="code">                .addPathPatterns(&quot;拦截路径&quot;)</span></span><br><span class="line"><span class="code">                .excludePathPatterns(&quot;排除路径&quot;)</span></span><br><span class="line"><span class="code">          .order(&quot;指定执行顺序&quot;)</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><p><strong><code>注意:order用来执行多个拦截器的执行顺序,order书写是自然数,按照自然数顺序执行</code></strong></p><hr><h2 id="war包部署"><a href="#war包部署" class="headerlink" title="war包部署"></a>war包部署</h2><h5 id="设置打包方式为war"><a href="#设置打包方式为war" class="headerlink" title="设置打包方式为war"></a>设置打包方式为war</h5><blockquote><p>​    <strong><packaging>war</packaging></strong></p></blockquote><h5 id="在插件中指定入口类"><a href="#在插件中指定入口类" class="headerlink" title="在插件中指定入口类"></a>在插件中指定入口类</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span></span><br><span class="line"><span class="code">&lt;plugins&gt;</span></span><br><span class="line"><span class="code">      &lt;plugin&gt;</span></span><br><span class="line"><span class="code">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">        &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">        &lt;!--使用热部署出现中文乱码解决方案--&gt;</span></span><br><span class="line"><span class="code">        &lt;configuration&gt;</span></span><br><span class="line"><span class="code">          &lt;fork&gt;true&lt;/fork&gt;</span></span><br><span class="line"><span class="code">          &lt;!--增加jvm参数--&gt;</span></span><br><span class="line"><span class="code">          &lt;jvmArguments&gt;-Dfile.encoding=UTF-8&lt;/jvmArguments&gt;</span></span><br><span class="line"><span class="code">          &lt;!--指定入口类--&gt;</span></span><br><span class="line"><span class="code">          &lt;mainClass&gt;com.baizhi.Application&lt;/mainClass&gt;</span></span><br><span class="line"><span class="code">        &lt;/configuration&gt;</span></span><br><span class="line"><span class="code">      &lt;/plugin&gt;</span></span><br><span class="line"><span class="code">    &lt;/plugins&gt;</span></span><br><span class="line"><span class="code">&lt;/build&gt;  </span></span><br></pre></td></tr></table></figure><h5 id="排除内嵌的tomcat"><a href="#排除内嵌的tomcat" class="headerlink" title="排除内嵌的tomcat"></a>排除内嵌的tomcat</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span></span>org.springframework.boot<span class="xml"><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span></span>spring-boot-starter-tomcat<span class="xml"><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">scope</span>&gt;</span></span>provided<span class="xml"><span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span>   &lt;!--去掉内嵌tomcat--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span></span>org.apache.tomcat.embed<span class="xml"><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span></span>tomcat-embed-jasper<span class="xml"><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">scope</span>&gt;</span></span>provided<span class="xml"><span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span>  &lt;!--去掉使用内嵌tomcat解析jsp--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="配置入口类"><a href="#配置入口类" class="headerlink" title="配置入口类"></a>配置入口类</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//1.继承SpringBootServletInitializer</span><br><span class="line">//2.覆盖configure方法</span><br><span class="line">public class Application extends SpringBootServletInitializer&#123;</span><br><span class="line"><span class="code">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="code">        SpringApplication.run(Application.class,args);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">    @Override</span></span><br><span class="line"><span class="code">    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) &#123;</span></span><br><span class="line"><span class="code">        return builder.sources(Application.class);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="打包测试"><a href="#打包测试" class="headerlink" title="打包测试"></a>打包测试</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一旦使用war包部署注意:</span></span><br><span class="line"><span class="bullet">-</span>1. application.yml 中配置port context-path 失效</span><br><span class="line"><span class="bullet">-</span>2. 访问时使用打成war包的名字和外部tomcat端口号进行访问项目</span><br></pre></td></tr></table></figure><h2 id="Jar包部署"><a href="#Jar包部署" class="headerlink" title="Jar包部署"></a>Jar包部署</h2><h5 id="设置打包方式为jar"><a href="#设置打包方式为jar" class="headerlink" title="设置打包方式为jar"></a>设置打包方式为jar</h5><blockquote><p>​    <strong><packaging>jar</packaging></strong></p></blockquote><p><strong><code>注意:默认方式也是jar</code></strong></p><h5 id="执行打包"><a href="#执行打包" class="headerlink" title="执行打包"></a>执行打包</h5><p>![image-20210616113809792](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20210616113809792.png)</p><h5 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h5><p>![image-20210616113831756](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20210616113831756.png)</p><ul><li><strong><code>注意:springboot部署jsp时,插件版本必须指定为1.4.2版本,并进行jsp打包配置才可以,其他版本均不支持!!!</code></strong></li></ul><h5 id="修改插件版本"><a href="#修改插件版本" class="headerlink" title="修改插件版本"></a>修改插件版本</h5><blockquote><p>在项目的pom.xml配置文件中build标签中修改</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span></span><br><span class="line">  &lt;!--版本必须为1.4.2版本--&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">    &lt;version&gt;1.4.2.RELEASE&lt;/version&gt;</span></span><br><span class="line"><span class="code">  &lt;/plugin&gt;</span></span><br><span class="line"><span class="code">&lt;/plugins&gt;</span></span><br></pre></td></tr></table></figure><h5 id="指定jsp打包配置"><a href="#指定jsp打包配置" class="headerlink" title="指定jsp打包配置"></a>指定jsp打包配置</h5><blockquote><p>在项目的pom.xml配置文件中build标签中加入配置</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span></span><br><span class="line">  &lt;!-- 打包时将jsp文件拷贝到META-INF目录下--&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;!-- 指定resources插件处理哪个目录下的资源文件 --&gt;</span></span><br><span class="line"><span class="code">    &lt;directory&gt;src/main/webapp&lt;/directory&gt;</span></span><br><span class="line"><span class="code">    &lt;!--指定必须要放在此目录下才能被访问到--&gt;</span></span><br><span class="line"><span class="code">    &lt;targetPath&gt;META-INF/resources&lt;/targetPath&gt;</span></span><br><span class="line"><span class="code">    &lt;includes&gt;</span></span><br><span class="line"><span class="code">      &lt;include&gt;**/**&lt;/include&gt;</span></span><br><span class="line"><span class="code">    &lt;/includes&gt;</span></span><br><span class="line"><span class="code">  &lt;/resource&gt;</span></span><br><span class="line"><span class="code">  &lt;resource&gt;</span></span><br><span class="line"><span class="code">    &lt;directory&gt;src/main/resources&lt;/directory&gt;</span></span><br><span class="line"><span class="code">    &lt;includes&gt;</span></span><br><span class="line"><span class="code">      &lt;include&gt;**/**&lt;/include&gt;</span></span><br><span class="line"><span class="code">    &lt;/includes&gt;</span></span><br><span class="line"><span class="code">    &lt;filtering&gt;false&lt;/filtering&gt;</span></span><br><span class="line"><span class="code">  &lt;/resource&gt;</span></span><br><span class="line"><span class="code">&lt;/resources&gt;</span></span><br></pre></td></tr></table></figure><h5 id="重新打包测试即可"><a href="#重新打包测试即可" class="headerlink" title="重新打包测试即可"></a>重新打包测试即可</h5><hr><h2 id="Thymeleaf"><a href="#Thymeleaf" class="headerlink" title="Thymeleaf"></a>Thymeleaf</h2><blockquote><p>Thymeleaf是一个用于web和独立环境的现代服务器端Java模板引擎。</p><p>–摘自官网<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a></p></blockquote><p><code>Thymeleaf</code>是跟Velocity、FreeMarker类似的模板引擎，它可以完全替代JSP，相较与其他的模板引擎相比, Thymeleaf在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。</p><h5 id="集成Thymeleaf模板"><a href="#集成Thymeleaf模板" class="headerlink" title="集成Thymeleaf模板"></a>集成Thymeleaf模板</h5><h6 id="引入依赖-3"><a href="#引入依赖-3" class="headerlink" title="引入依赖"></a>引入依赖</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--使用thymelaf--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span></span>org.springframework.boot<span class="xml"><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span></span>spring-boot-starter-thymeleaf<span class="xml"><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h6 id="编写配置"><a href="#编写配置" class="headerlink" title="编写配置"></a>编写配置</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  thymeleaf:</span><br><span class="line"><span class="code">    cache: false  # 关闭缓存</span></span><br><span class="line"><span class="code">    prefix: classpath:/templates/ #指定模板位置</span></span><br><span class="line"><span class="code">    suffix: .html #指定后缀</span></span><br></pre></td></tr></table></figure><h6 id="编写控制器测试"><a href="#编写控制器测试" class="headerlink" title="编写控制器测试"></a>编写控制器测试</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Controller    //一定要是@Controller 不能再使用@RestController注解</span><br><span class="line">@RequestMapping(&quot;hello&quot;)</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"><span class="code">    @GetMapping(&quot;hello&quot;)</span></span><br><span class="line"><span class="code">    public String hello()&#123;</span></span><br><span class="line"><span class="code">        System.out.println(&quot;测试与 thymeleaf 的集成&quot;);</span></span><br><span class="line"><span class="code">        return &quot;index&quot;;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><h6 id="在templates目录中定义模板"><a href="#在templates目录中定义模板" class="headerlink" title="在templates目录中定义模板"></a>在templates目录中定义模板</h6><p>![image-20200323085834206](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20200323085834206-3815430.png)</p><h6 id="测试访问-1"><a href="#测试访问-1" class="headerlink" title="测试访问"></a>测试访问</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8989/springboot_day3/hello/hello</span><br></pre></td></tr></table></figure><h6 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h6><p>![image-20200323085948499](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20200323085948499-3815430.png)</p><hr><h5 id="模板基本语法"><a href="#模板基本语法" class="headerlink" title="模板基本语法"></a>模板基本语法</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用时必须在页面中加入thymeleaf如下命名空间:</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="展示单个数据"><a href="#展示单个数据" class="headerlink" title="展示单个数据"></a>展示单个数据</h5><h6 id="设置数据"><a href="#设置数据" class="headerlink" title="设置数据"></a>设置数据</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.addAttribute(&quot;name&quot;,&quot;张三&quot;); 或 request.setAttribute(&quot;name&quot;,&quot;小黑&quot;);</span><br></pre></td></tr></table></figure><h6 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;name&#125;&quot;</span>/&gt;</span></span>  ---&gt;获取数据</span><br></pre></td></tr></table></figure><p>![image-20200323100747881](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20200323100747881-3835265.png)</p><h6 id="解析含有html标签数据"><a href="#解析含有html标签数据" class="headerlink" title="解析含有html标签数据"></a>解析含有html标签数据</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model.addAttribute(&quot;name&quot;,&quot;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;&#x27;</span>&gt;</span></span>张三<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&quot;);</span><br><span class="line">model.addAttribute(&quot;username&quot;,&quot;小陈&quot;);</span><br></pre></td></tr></table></figure><ul><li>直接获取原样输出</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;name&#125;&quot;</span>/&gt;</span></span></span><br></pre></td></tr></table></figure><p>![image-20200323100956740](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20200323100956740-3835265.png)</p><ul><li>获取并解析</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:utext</span>=<span class="string">&quot;$&#123;name&#125;&quot;</span>/&gt;</span></span></span><br></pre></td></tr></table></figure><p>![image-20200323101457134](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20200323101457134-3835265.png)</p><ul><li><p>将数据赋值给表单元素</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span></span><br></pre></td></tr></table></figure><p>![image-20200323103452620](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20200323103452620-3835265.png)</p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 总结</span></span><br><span class="line"><span class="bullet">-</span>  1.使用 th:text=&quot;$&#123;属性名&#125;&quot;  获取对应数据,获取数据时会将对应标签中数据清空,因此最好是空标签</span><br><span class="line"><span class="bullet">-</span>  2.使用 th:utext=&quot;$&#123;属性名&#125;&quot; 获取对应的数据,可以将数据中html先解析在渲染到页面</span><br><span class="line"><span class="bullet">-</span>  3.使用 th:value=&quot;$&#123;属性名&#125;&quot; 获取数据直接作为表单元素value属性</span><br></pre></td></tr></table></figure><h5 id="展示对象数据"><a href="#展示对象数据" class="headerlink" title="展示对象数据"></a>展示对象数据</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">model.addAttribute(&quot;user&quot;,new User(&quot;21&quot;,&quot;xiaochen&quot;,23,new Date()));</span><br><span class="line">id:<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">name:<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">age:<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.age&#125;&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">bir: <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.bir&#125;&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>  ====  <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.format(user.bir, &#x27;yyyy-MM-dd HH:mm&#x27;)&#125;&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span> 日期格式化</span><br></pre></td></tr></table></figure><h5 id="条件展示数据"><a href="#条件展示数据" class="headerlink" title="条件展示数据"></a>条件展示数据</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">model.addAttribute(&quot;user&quot;,new User(&quot;21&quot;,&quot;xiaochen&quot;,23,new Date()));</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;user.age&#125; eq 23&quot;</span>&gt;</span></span></span><br><span class="line">  青年</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;user.age == 23&#125;&quot;</span>&gt;</span></span></span><br><span class="line">  青年</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="section"># 运算符</span></span><br><span class="line"><span class="code">    gt：great than（大于）&gt;</span></span><br><span class="line"><span class="code">    ge：great equal（大于等于）&gt;=</span></span><br><span class="line"><span class="code">    eq：equal（等于）==</span></span><br><span class="line"><span class="code">    lt：less than（小于）&lt;</span></span><br><span class="line"><span class="code">    le：less equal（小于等于）&lt;=</span></span><br><span class="line"><span class="code">    ne：not equal（不等于）!=</span></span><br></pre></td></tr></table></figure><h5 id="展示多条数据"><a href="#展示多条数据" class="headerlink" title="展示多条数据"></a>展示多条数据</h5><ul><li>直接遍历集合</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">th:each</span>=<span class="string">&quot;user:$&#123;users&#125;&quot;</span>&gt;</span></span></span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.age&#125;&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.format(user.bir,&#x27;yyyy-MM-dd&#x27;)&#125;&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>遍历时获取遍历状态</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">th:each</span>=<span class="string">&quot;user,userStat:$&#123;users&#125;&quot;</span>&gt;</span></span></span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;userStat.count&#125;&quot;</span>/&gt;</span></span>-<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>/&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>   获取遍历次数  count 从1开始 index 从0开始</span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;userStat.odd&#125;&quot;</span>/&gt;</span></span>-<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.name&#125;&quot;</span>/&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>   获取当前遍历是否是奇数行</span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;userStat.even&#125;&quot;</span>/&gt;</span></span>-<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.age&#125;&quot;</span>/&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>   获取当前遍历是否是偶数行</span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;userStat.size&#125;&quot;</span>/&gt;</span></span>-<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.bir&#125;&quot;</span>/&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>   获取当前集合的总条数</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="引入静态资源"><a href="#引入静态资源" class="headerlink" title="引入静态资源"></a>引入静态资源</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 使用thymeleaf模板项目中静态资源默认放在resources路径小static目录中</span></span><br></pre></td></tr></table></figure><ul><li><p>项目中放入对应静态资源</p><p>![image-20200323142307411](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20200323142307411-3835265.png)</p></li><li><p>页面中引入</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/css/index.css&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/jquery-min.js&#125;&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>注意: @{/}代表通过thymeleaf语法动态获取应用名</strong></p></li></ul><h5 id="在js代码中获取项目名"><a href="#在js代码中获取项目名" class="headerlink" title="在js代码中获取项目名"></a>在js代码中获取项目名</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line">  const ctx = &#x27;[[@&#123;/&#125;]]&#x27;;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>注意:[[书写thymeleaf语法]],这里[[]]是thymeleaf内嵌表达式</strong></p><hr><h2 id="RestFul"><a href="#RestFul" class="headerlink" title="RestFul"></a>RestFul</h2><h5 id="引言-2"><a href="#引言-2" class="headerlink" title="引言"></a>引言</h5><p>![image-20210622104137206](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20210622104137206.png)</p><p>REST全称是<code>Representational State Transfer</code>，中文意思是表述（编者注：通常译为表征）性状态转移。 它首次出现在2000年Roy Fielding的博士论文中，Roy Fielding是HTTP规范的主要编写者之一。 他在论文中提到：”我这篇文章的写作目的，就是想在符合架构原理的前提下，理解和评估以网络为基础的应用软件的架构设计，得到一个功能强、性能好、适宜通信的架构。REST指的是一组架构约束条件和原则。” 如果一个架构符合REST的约束条件和原则，我们就称它为RESTful架构。</p><p>RestFul: 是一种以网络为基础构架一种架构风格  一个架构符合Rest设计原则和约束成这个架构为RestFul。</p><p>Rest 词： 更新技术  组件 服务  让我们web请求能够利用web中标准 和 能力 更好描述架构</p><p>REST本身并没有创造新的技术、组件或服务，而隐藏在RESTful背后的理念就是使用Web的现有特征和能力， 更好地使用现有Web标准中的一些准则和约束。虽然REST本身受Web技术的影响很深， 但是理论上REST架构风格并不是绑定在HTTP上，只不过目前HTTP是唯一与REST相关的实例。 所以我们这里描述的REST也是通过HTTP实现的REST。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><blockquote><p> Restful 一种软件架构风格、设计风格，而<strong>不是</strong>标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p></blockquote><p>web开发: 实现所有功能</p><p>restful: 软件设计风格 标准  简洁   层次  优雅</p><p>rest设计原则 和 约束架构称之为restFul</p><h5 id="URL定义"><a href="#URL定义" class="headerlink" title="URL定义"></a>URL定义</h5><ul><li>资源：互联网所有的事物都可以被抽象为资源 <ul><li>一首歌  一张图片 数据库一条记录  </li></ul></li><li>资源操作：使用POST(添加)、DELETE(删除)、PUT(修改)、GET(查询)，使用不同请求方法对资源进行操作。 <ul><li>删除 delete</li><li>查询 get</li><li>添加 post</li><li>修改 put (修改全部字段)| patch(更新部分字段)</li></ul></li></ul><h6 id="传统方式操作资源"><a href="#传统方式操作资源" class="headerlink" title="传统方式操作资源"></a>传统方式操作资源</h6><ul><li><p><a href="http://127.0.0.1/item/queryUser.action?id=1">http://127.0.0.1/item/queryUser.action?id=1</a>   查询,GET </p></li><li><p><a href="http://127.0.0.1/item/saveUser.action">http://127.0.0.1/item/saveUser.action</a>             新增,POST </p></li><li><p><a href="http://127.0.0.1/item/updateUser.action">http://127.0.0.1/item/updateUser.action</a>          更新,PUT</p></li><li><p><a href="http://127.0.0.1/item/deleteUser.action?id=1">http://127.0.0.1/item/deleteUser.action?id=1</a>  删除,DELETE</p><p>**注意:**传统的操作是没有问题的,大神认为是有问题的,有什么问题呢?你每次请求的接口或者地址,都在做描述,例如查询的时候用了queryUser,新增的时候用了saveUser ，修改的时候用了updateUser,其实完全没有这个必要,我使用了get请求,就是查询.使用post请求,就是新增的请求,PUT就是修改，delete就是删除，我的意图很明显,完全没有必要做描述,这就是为什么有了restful.</p></li></ul><h6 id="使用RESTful操作资源"><a href="#使用RESTful操作资源" class="headerlink" title="使用RESTful操作资源"></a>使用RESTful操作资源</h6><ul><li><p>【GET】 /users # 查询用户信息列表</p></li><li><p>【GET】 /users/1001 # 查看某个用户信息</p></li></ul><ul><li>【POST】 /users # 新建用户信息</li></ul><ul><li>【PUT】 /users/1001 # 更新用户信息(全部字段)</li></ul><ul><li>【PATCH】 /users/1001 # 更新用户信息(部分字段)</li></ul><ul><li>【DELETE】 /users/1001 # 删除用户信息</li></ul><h5 id="Rest-API设计风格原则"><a href="#Rest-API设计风格原则" class="headerlink" title="Rest API设计风格原则"></a>Rest API设计风格原则</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.使用名词而不是动词</span></span><br><span class="line"><span class="bullet">-</span> 不要使用：</span><br><span class="line"><span class="code">如:</span></span><br><span class="line"><span class="code">    /getAllUsers    get   /users  get /users/002</span></span><br><span class="line"><span class="code">    /createNewUser  post  /users</span></span><br><span class="line"><span class="code">    /deleteAllUser  delete /users/001</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># 2.Get方法和查询参数不应该涉及状态改变</span></span><br><span class="line"><span class="bullet">-</span> 使用PUT, POST 和DELETE 方法 而不是 GET 方法来改变状态，不要使用GET 进行状态改变</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section"># 3.使用复数名词</span></span><br><span class="line"><span class="bullet">-</span> 不要混淆名词单数和复数，为了保持简单，只对所有资源使用复数。</span><br><span class="line"><span class="code">如:</span></span><br><span class="line"><span class="code">    /cars 而不是 /car</span></span><br><span class="line"><span class="code">    /users 而不是 /user</span></span><br><span class="line"><span class="code">    /products 而不是 /product</span></span><br><span class="line"><span class="code">    /settings 而不是 /setting</span></span><br><span class="line"><span class="code">    /orders   而不是 /order</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 4. 使用子资源表达关系</span></span><br><span class="line"><span class="code">- 如果一个资源与另外一个资源有关系，使用子资源：</span></span><br><span class="line"><span class="code">如:</span></span><br><span class="line"><span class="code">    GET /cars/711/drivers/ 返回 car 711的所有司机</span></span><br><span class="line"><span class="code">    GET /cars/711/drivers/4 返回 car 711的4号司机</span></span><br><span class="line"><span class="code">    GET /users/11/pets      返回 user 11的所有宠物</span></span><br><span class="line"><span class="code">    GET /users/11/pets/2    返回 user 11的2号宠物</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># 5.使用Http头声明序列化格式</span></span><br><span class="line"><span class="bullet">-</span> 在客户端和服务端，双方都要知道通讯的格式，格式在HTTP-Header中指定</span><br><span class="line"><span class="code">如:</span></span><br><span class="line"><span class="code">Content-Type 定义请求格式</span></span><br><span class="line"><span class="code">Accept 定义系列可接受的响应格式</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># 6.为集合提供过滤 排序 选择和分页等功能</span></span><br><span class="line"><span class="bullet">-</span> Filtering过滤:使用唯一的查询参数进行</span><br><span class="line"><span class="code">GET /cars?color=red 返回红色的cars</span></span><br><span class="line"><span class="code">GET /cars?seats&lt;=2 返回小于两座位的cars集合</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">-</span> Sorting排序:允许针对多个字段排序</span><br><span class="line"><span class="code">GET /cars?sort=-manufactorer,+model</span></span><br><span class="line"><span class="code">这是返回根据生产者降序和模型升序排列的car集合</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">-</span> Field selection</span><br><span class="line"><span class="code">移动端能够显示其中一些字段，它们其实不需要一个资源的所有字段，给API消费者一个选择字段的能力，这会降低网络流量，提高API可用性。</span></span><br><span class="line"><span class="code">GET /cars?fields=manufacturer,model,id,color</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">- Paging分页</span></span><br><span class="line"><span class="code">使用 limit 和offset.实现分页，缺省limit=20 和offset=0；</span></span><br><span class="line"><span class="code">GET /cars?offset=10&amp;limit=5</span></span><br><span class="line"><span class="code">为了将总数发给客户端，使用订制的HTTP头： X-Total-Count.</span></span><br><span class="line"><span class="code">链接到下一页或上一页可以在HTTP头的link规定，遵循Link规定:</span></span><br><span class="line"><span class="code">Link: &lt;https://blog.mwaysolutions.com/sample/api/v1/cars?offset=15&amp;limit=5&gt;; rel=&quot;next&quot;,&lt;https://blog.mwaysolutions.com/sample/api/v1/cars?offset=50&amp;limit=3&gt;; rel=&quot;last&quot;,&lt;https://blog.mwaysolutions.com/sample/api/v1/cars?offset=0&amp;limit=5&gt;; rel=&quot;first&quot;,&lt;https://blog.mwaysolutions.com/sample/api/v1/cars?offset=5&amp;limit=5&gt;; rel=&quot;prev&quot;,</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># 7.版本化你的API  支付宝  v1  v2   v3</span></span><br><span class="line"><span class="bullet">-</span> 使得API版本变得强制性，不要发布无版本的API，使用简单数字，避免小数点如2.5.</span><br><span class="line"><span class="code">一般在Url后面使用?v</span></span><br><span class="line"><span class="code">/blog/api/v1</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># 8. 使用Http状态码处理错误</span></span><br><span class="line"><span class="bullet">-</span> 如果你的API没有错误处理是很难的，只是返回500和出错堆栈不一定有用</span><br><span class="line"><span class="bullet">-</span> Http状态码提供70个出错，我们只要使用10个左右：</span><br><span class="line"> `200 – OK – 一切正常</span><br><span class="line">  `201 – OK – 新的资源已经成功创建</span><br><span class="line">  `204 – OK – 资源已经成功删除</span><br><span class="line">  `304 – Not Modified – 客户端使用缓存数据</span><br><span class="line">  `400 – Bad Request – 请求无效，需要附加细节解释如 &quot;JSON无效&quot;</span><br><span class="line">  `401 – Unauthorized – 请求需要用户验证</span><br><span class="line">  `403 – Forbidden – 服务器已经理解了请求，但是拒绝服务或这种请求的访问是不允许的。</span><br><span class="line">  `404 – Not found – 没有发现该资源</span><br><span class="line">  `422 – Unprocessable Entity – 只有服务器不能处理实体时使用，比如图像不能被格式化，或者重要字段丢失。</span><br><span class="line">  `500 – Internal Server Error – API开发者应该避免这种错误。</span><br><span class="line">使用详细的错误包装错误：  状态码    数据  header头信息</span><br><span class="line">&#123;</span><br><span class="line">  &quot;errors&quot;: [</span><br><span class="line">   &#123;</span><br><span class="line">    &quot;userMessage&quot;: &quot;Sorry, the requested resource does not exist&quot;,</span><br><span class="line">    &quot;internalMessage&quot;: &quot;No car found in the database&quot;,</span><br><span class="line">    &quot;code&quot;: 34,</span><br><span class="line">    &quot;more info&quot;: &quot;http://dev.mwaysolutions.com/blog/api/v1/errors/12345&quot;</span><br><span class="line">   &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Rest-API案例"><a href="#Rest-API案例" class="headerlink" title="Rest API案例"></a>Rest API案例</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;v1/users&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="code">    private UserService userService;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    @Autowired</span></span><br><span class="line"><span class="code">    public UserController(UserService userService) &#123;</span></span><br><span class="line"><span class="code">        this.userService = userService;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    /**</span></span><br><span class="line"><span class="code">     * 保存用户</span></span><br><span class="line"><span class="code">     *</span></span><br><span class="line"><span class="code">     * @param user</span></span><br><span class="line"><span class="code">     * @return</span></span><br><span class="line"><span class="code">     */</span></span><br><span class="line"><span class="code">    @PostMapping</span></span><br><span class="line"><span class="code">    public ResponseEntity&lt;Void&gt; saveUser(@RequestBody User user) &#123;</span></span><br><span class="line"><span class="code">        try &#123;</span></span><br><span class="line"><span class="code">            userService.save(user);</span></span><br><span class="line"><span class="code">        &#125; catch (Exception e) &#123;</span></span><br><span class="line"><span class="code">            e.printStackTrace();</span></span><br><span class="line"><span class="code">            return new ResponseEntity&lt;Void&gt;(HttpStatus.INTERNAL_SERVER_ERROR);</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">        return new ResponseEntity&lt;Void&gt;(HttpStatus.CREATED);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    /**</span></span><br><span class="line"><span class="code">     * 删除用户</span></span><br><span class="line"><span class="code">     *</span></span><br><span class="line"><span class="code">     * @param id</span></span><br><span class="line"><span class="code">     * @return</span></span><br><span class="line"><span class="code">     */</span></span><br><span class="line"><span class="code">    @DeleteMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="code">    public ResponseEntity&lt;Void&gt; deleteUser(@PathVariable(&quot;id&quot;) Integer id) &#123;</span></span><br><span class="line"><span class="code">        try &#123;</span></span><br><span class="line"><span class="code">            userService.delete(id);</span></span><br><span class="line"><span class="code">        &#125; catch (Exception e) &#123;</span></span><br><span class="line"><span class="code">            e.printStackTrace();</span></span><br><span class="line"><span class="code">            return new ResponseEntity&lt;Void&gt;(HttpStatus.INTERNAL_SERVER_ERROR);</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">        return new ResponseEntity&lt;Void&gt;(HttpStatus.NO_CONTENT);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    /**</span></span><br><span class="line"><span class="code">     * 更新用户</span></span><br><span class="line"><span class="code">     *</span></span><br><span class="line"><span class="code">     * @param user</span></span><br><span class="line"><span class="code">     * @return</span></span><br><span class="line"><span class="code">     */</span></span><br><span class="line"><span class="code">    @PutMapping</span></span><br><span class="line"><span class="code">    public ResponseEntity&lt;Void&gt; updateUser(@RequestBody User user) &#123;</span></span><br><span class="line"><span class="code">        userService.update(user);</span></span><br><span class="line"><span class="code">        return new ResponseEntity&lt;Void&gt;(HttpStatus.NO_CONTENT);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    /**</span></span><br><span class="line"><span class="code">     * 用户详情</span></span><br><span class="line"><span class="code">     *</span></span><br><span class="line"><span class="code">     * @param id</span></span><br><span class="line"><span class="code">     * @return</span></span><br><span class="line"><span class="code">     */</span></span><br><span class="line"><span class="code">    @GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="code">    public ResponseEntity&lt;User&gt; findUserById(@PathVariable(&quot;id&quot;) Integer id) &#123;</span></span><br><span class="line"><span class="code">        User user = userService.findById(id);</span></span><br><span class="line"><span class="code">        if (user == null) &#123;</span></span><br><span class="line"><span class="code">            return new ResponseEntity&lt;User&gt;(HttpStatus.INTERNAL_SERVER_ERROR);</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">        return new ResponseEntity&lt;User&gt;(user, HttpStatus.OK);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    /**</span></span><br><span class="line"><span class="code">     * 用户列表</span></span><br><span class="line"><span class="code">     *</span></span><br><span class="line"><span class="code">     * @return</span></span><br><span class="line"><span class="code">     */</span></span><br><span class="line"><span class="code">    @GetMapping</span></span><br><span class="line"><span class="code">    public ResponseEntity&lt;List&lt;User&gt;&gt; users() &#123;</span></span><br><span class="line"><span class="code">        List&lt;User&gt; users = null;</span></span><br><span class="line"><span class="code">        try &#123;</span></span><br><span class="line"><span class="code">            users = userService.findAll();</span></span><br><span class="line"><span class="code">        &#125; catch (Exception e) &#123;</span></span><br><span class="line"><span class="code">            e.printStackTrace();</span></span><br><span class="line"><span class="code">            return new ResponseEntity&lt;List&lt;User&gt;&gt;(HttpStatus.INTERNAL_SERVER_ERROR);</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">        return new ResponseEntity&lt;List&lt;User&gt;&gt;(users, HttpStatus.OK);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h5 id="传统开发的异常处理"><a href="#传统开发的异常处理" class="headerlink" title="传统开发的异常处理"></a>传统开发的异常处理</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/<span class="strong">**</span></span><br><span class="line"><span class="strong"> <span class="emphasis">* 全局异常处理之传统web开发</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"> *</span>/</span></span><br><span class="line"><span class="strong">@Component</span></span><br><span class="line"><span class="strong">public class GlobalExceptionHandler implements HandlerExceptionResolver &#123;</span></span><br><span class="line"><span class="strong">    //参数1: 当前请求对象</span></span><br><span class="line"><span class="strong">    //参数2: 当前请求的响应对象</span></span><br><span class="line"><span class="strong">    //参数3: 当前出现异常的控制器对象</span></span><br><span class="line"><span class="strong">    @Override</span></span><br><span class="line"><span class="strong">    public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) &#123;</span></span><br><span class="line"><span class="strong">        //异常处理...</span></span><br><span class="line"><span class="strong">        return new ModelAndView(&quot;500&quot;);</span></span><br><span class="line"><span class="strong">    &#125;</span></span><br><span class="line"><span class="strong">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="RestFul的异常处理"><a href="#RestFul的异常处理" class="headerlink" title="RestFul的异常处理"></a>RestFul的异常处理</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/<span class="strong">**</span></span><br><span class="line"><span class="strong"> <span class="emphasis">* 全局异常处理之RestFul</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"> *</span>/</span></span><br><span class="line"><span class="strong">@ControllerAdvice</span></span><br><span class="line"><span class="strong">public class GlobalExceptionHandlerRest &#123;</span></span><br><span class="line"><span class="strong">    @ExceptionHandler(value = Exception.class)</span></span><br><span class="line"><span class="strong">    @ResponseBody</span></span><br><span class="line"><span class="strong">    public ResponseEntity<span class="xml"><span class="tag">&lt;<span class="name">String</span>&gt;</span></span> exceptionHandler(Exception e) &#123;</span></span><br><span class="line"><span class="strong">        return new ResponseEntity&lt;&gt;(e.getMessage(), HttpStatus.INTERNAL<span class="emphasis">_SERVER_</span>ERROR);</span></span><br><span class="line"><span class="strong">    &#125;</span></span><br><span class="line"><span class="strong">&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="CORS-跨域"><a href="#CORS-跨域" class="headerlink" title="CORS 跨域"></a>CORS 跨域</h2><h5 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h5><ul><li><p>​    <code>CORS是一个W3C标准，全称是&quot;跨域资源共享&quot;（Cross-origin resource sharing）</code>。</p></li><li><p>​    它允许浏览器向跨源服务器，发出XMLHttpRequest(ajax)请求，从而克服了AJAX只能<code>同源使用的限制</code>。</p></li></ul><h5 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h5><ul><li>​    <strong><code>同源策略</code></strong>[same origin policy]是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。 同源策略是浏览器安全的基石。</li></ul><h5 id="源"><a href="#源" class="headerlink" title="源"></a>源</h5><ul><li>​    <strong><code>源</code></strong>[origin]就是协议、域名和端口号。例如：<a href="http://www.baidu.com:80这个URL。">http://www.baidu.com:80这个URL。</a></li></ul><h5 id="同源"><a href="#同源" class="headerlink" title="同源"></a>同源</h5><ul><li>​    若地址里面的<code>协议、域名和端口号均相同</code>则属于同源。</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 同源举例</span></span><br><span class="line"><span class="bullet">-</span> 例如判断下面的URL是否与 http://www.a.com/test/index.html 同源</span><br><span class="line"><span class="code">http://www.a.com/dir/page.html ---------&gt;同源</span></span><br><span class="line"><span class="code">http://www.child.a.com/test/index.html -&gt;不同源，域名不相同</span></span><br><span class="line"><span class="code">https://www.a.com/test/index.html ------&gt;不同源，协议不相同</span></span><br><span class="line"><span class="code">http://www.a.com:8080/test/index.html --&gt;不同源，端口号不相同</span></span><br></pre></td></tr></table></figure><h5 id="哪些操作不受同源限制"><a href="#哪些操作不受同源限制" class="headerlink" title="哪些操作不受同源限制"></a>哪些操作不受同源限制</h5><ul><li><p>页面中的链接，重定向以及表单提交是不会受到同源策略限制的；</p></li><li><p>跨域资源的引入是可以的。如嵌入到页面中的<code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;</code>，<code>&lt;img&gt;</code>，<code>&lt;link&gt;</code>，<code>&lt;iframe&gt;</code>等。</p></li></ul><h5 id="哪些操作受到同源限制"><a href="#哪些操作受到同源限制" class="headerlink" title="哪些操作受到同源限制"></a>哪些操作受到同源限制</h5><ul><li>在浏览器中发起一个AJAX请求,会受到同源策略限制。</li><li><strong><code>出现错误:Access-Control-Allow-Origin</code></strong></li></ul><p>![image-20210623102949273](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20210623102949273.png)</p><h5 id="使用CORS解决同源限制"><a href="#使用CORS解决同源限制" class="headerlink" title="使用CORS解决同源限制"></a>使用CORS解决同源限制</h5><ol><li><h6 id="CrossOrigin注解"><a href="#CrossOrigin注解" class="headerlink" title="@CrossOrigin注解"></a>@CrossOrigin注解</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;demos&quot;)</span><br><span class="line">@CrossOrigin</span><br><span class="line">public class DemoController &#123;</span><br><span class="line"><span class="code">    @GetMapping</span></span><br><span class="line"><span class="code">    public String demos() &#123;</span></span><br><span class="line"><span class="code">        System.out.println(&quot;========demo=======&quot;);</span></span><br><span class="line"><span class="code">        return &quot;demo ok&quot;;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure></li><li><h6 id="全局解决跨域问题"><a href="#全局解决跨域问题" class="headerlink" title="全局解决跨域问题"></a>全局解决跨域问题</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class CorsConfig &#123;</span><br><span class="line"><span class="code">    @Bean</span></span><br><span class="line"><span class="code">    public CorsFilter corsFilter() &#123;</span></span><br><span class="line"><span class="code">        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();</span></span><br><span class="line"><span class="code">        CorsConfiguration corsConfiguration = new CorsConfiguration();</span></span><br><span class="line"><span class="code">        corsConfiguration.addAllowedOrigin(&quot;*&quot;); // 1允许任何域名使用</span></span><br><span class="line"><span class="code">        corsConfiguration.addAllowedHeader(&quot;*&quot;); // 2允许任何头</span></span><br><span class="line"><span class="code">        corsConfiguration.addAllowedMethod(&quot;*&quot;); // 3允许任何方法（post、get等）</span></span><br><span class="line"><span class="code">        source.registerCorsConfiguration(&quot;/**&quot;, corsConfiguration);//4处理所有请求的跨域配置</span></span><br><span class="line"><span class="code">     return new CorsFilter(source);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><hr></li></ol><h2 id="Jasypt-加密"><a href="#Jasypt-加密" class="headerlink" title="Jasypt 加密"></a>Jasypt 加密</h2><h5 id="引言-3"><a href="#引言-3" class="headerlink" title="引言"></a>引言</h5><p> Jasypt 也即Java Simplified Encryption是Sourceforge.net上的一个开源项目。在当地时间11月23号的通告中，Jasypt 1.4的新特征包括：加密属性文件（encryptable properties files）、Spring Framework集成、加密Hibernate数据源配置、新的命令行工具、URL加密的Apache wicket集成以及升级文档。</p><p>根据Jasypt文档，该技术可用于加密任务与应用程序，例如加密密码、敏感信息和数据通信、创建完整检查数据的sums. 其他性能包括高安全性、基于标准的加密技术、可同时单向和双向加密的加密密码、文本、数字和二进制文件。Jasypt也可以与Acegi Security整合也即Spring Security。Jasypt亦拥有加密应用配置的集成功能，而且提供一个开放的API从而任何一个Java Cryptography Extension都可以使用Jasypt。</p><p>Jasypt还符合RSA标准的基于密码的加密，并提供了无配置加密工具以及新的、高可配置标准的加密工具。</p><h5 id="整合SpringBoot"><a href="#整合SpringBoot" class="headerlink" title="整合SpringBoot"></a>整合SpringBoot</h5><ul><li>引入依赖</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;groupId&gt;com.github.ulisesbocchio&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">    &lt;artifactId&gt;jasypt-spring-boot-starter&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">    &lt;version&gt;2.0.0&lt;/version&gt;</span></span><br><span class="line"><span class="code">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><ul><li>编写配置</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jasypt:</span><br><span class="line">  encryptor:</span><br><span class="line"><span class="code">    algorithm: PBEWithMD5AndDES</span></span><br><span class="line"><span class="code">    password: cf150b74e4824146ad76e9ebe757ba76 #使用加密秘钥</span></span><br></pre></td></tr></table></figure><ul><li><p>通过程序传递密钥</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Djasypt.encryptor.password=cf150b74e4824146ad76e9ebe757ba76</span><br></pre></td></tr></table></figure><p>![image-20210629191623880](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20210629191623880.png)</p></li><li><p>加密、解密</p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">StringEncryptor encryptor;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testSecret() &#123;</span><br><span class="line">  //加密</span><br><span class="line">  String url = encryptor.encrypt(&quot;localhost&quot;);</span><br><span class="line">  System.out.println(url);</span><br><span class="line">  //解密</span><br><span class="line">  String decrypt = encryptor.decrypt(&quot;nRmCj//nOuErKepiS6dyBO/9Ff7LGCXZ&quot;);</span><br><span class="line">  System.out.println(decrypt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql:</span><br><span class="line">  host: ENC(pNVN9SKixSnfJ8yZjjIESZuP8HTwG0Hm)</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  thymeleaf:</span><br><span class="line"><span class="code">    suffix: .html</span></span><br><span class="line"><span class="code">    prefix: classpath:/templates/</span></span><br><span class="line"><span class="code">    cache: false</span></span><br><span class="line"><span class="code">  datasource:</span></span><br><span class="line"><span class="code">    type: com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="code">    driver-class-name: com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="code">    url: jdbc:mysql://$&#123;mysql.host&#125;:3306/emp?characterEncoding=UTF-8</span></span><br><span class="line"><span class="code">    username: ENC(M9LpI0WkgVh0rpx+BkOGew==)</span></span><br><span class="line"><span class="code">    password: ENC(M9LpI0WkgVh0rpx+BkOGew==)</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h1&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java 框架" scheme="http://example.com/tags/Java-%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="http://example.com/2021/08/02/Linux/"/>
    <id>http://example.com/2021/08/02/Linux/</id>
    <published>2021-08-02T11:33:14.000Z</published>
    <updated>2021-08-02T11:52:07.946Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><span id="more"></span><pre><code>1. Linux系统特点    * 开放性（开源）、多用户、多任务、良好的用户界面、优异的性能与稳定性     1. 多用户多任务：         1. 单用户：一个用户，在登录计算机（操作系统），只允许同时登录一个用户         2. 单任务：一个任务，允许用户同时进行的操作任务数量         3. 多用户：多个用户，在登录计算机（操作系统）允许同时登录多个用户进行操作         4. 多任务：多个任务，允许用户同时进行多个操作任务    2. Window 和 Linux 的区别        * Window：单用户、多任务        * Linux：多用户、多任务2. Linux分支    分支：Linux分支有很多，现在比较有名的ubuntu、debian、centos、redhat、suse等等。3. Linux系统的文件    1. Linux系统的文件目录结构        * Bin：全称 binary，含义是二进制。该目录存储的都是一些二进制文件，文件都是可以被运行的        * Dev：该目录中主要存放的是外接设备，例如盘、其他的光盘等。在其中的外接设备是不能直接被使用的，需要挂载（类似windows下的分配盘符）。        * Etc:该目录主要存储一些配置文件。        * Home：表示“家”，表示除了root用户以外其他用户的家目录，类似于windows下的User/用户目录        * Proc：process，表示进程，该目录中存储的是Linux运行时的进程。        * Root：该目录是root用户自己的家目录。        * Sbin：全称super binary。该目录也是存储一些可以被执行的二进制文件，但是必须得有super权限用户才能执行。        * Tmp：表示“临时”的，当系统运行时候产生的临时文件会在这个目录下存着。        * Usr：存放的是用户自己安装的软件。类似于windows下的program files        * Var：存放的程序/系统的日志文件的目录        * Mnt：当外接设备需要挂载的时候，就需要挂载到mnt目录下。4. Linux的基本指令    1. 一个完整的指令的标准格式：Linux通用的格式        #指令主题[选项][操作对象]        * 一个指令可以包含多个选项，操作对象也可以是多个    2. 基础指令        1. ls指令            * 含义：ls（list）            1. #ls                * 含义：列出当前工作目录下的所有文件/文件夹的名称            2. #ls 路径                * 含义：列出指定路径下的所有文件/文件夹的名称                        * 关于路径（重要）：                    * 路径可以分为两种：相对路径、绝对路径。                    * 相对路径：相对首先得有一个参照物（一般就是当前的工作路径）                        * 相对路径的写法：在相对路径中通常会用到2个符号&quot;./&quot;(表示当前目录下)、&quot;../&quot;(上一级目录下)                    * 绝对路径：绝对路径不需要参照物，直接从根&quot;/&quot;开始寻找对应路径            3. #ls 选项 路径                 * 含义：在列出指定路径下的文件/文件夹的名称，并以指定的格式进行显示。                 * 常见的语法：                     * #ls-l 路径                     * #ls-la 路径                 * 选项的解释：                     *-l: 表示list,表示以详细的列表的形式进行展示                     *-a:表示显示所有的文件/文件夹（包含了隐藏文件/文件夹）                  * 在检索的结果中，其中&quot;-&quot;表示该行对应的文档类型为文件，&quot;d&quot;表示文档类型为文件夹                * 在linux中隐藏文件一般都是要以&quot;.&quot;开头            4. #ls-lh 路径                * 含义：列出指定路径下的所有文件/文件夹的名称，以列表的形式并且在显示文档大小的时候以可读性较高的形式显示        2. pwd指令            * 用法：#pwd （print working directory，打印当前工作目录）        3. cd命令            * 命令：#cd （change directory，改变目录）            * 作用：用于切换当前的工作目录的            * 语法：#cd 路径            * 补充：在Linux中有一个特殊的符号&quot;~&quot;,表示当期用户的家目录。切换的方式：#cd~        4. mkdir指令            * 指令：mkdir（创建目录）            * 语法1：#mkdir 路径 （可以使文件夹名称也可以是包含名称的一个完整路径）            * 注意：ls列出的结果颜色说明：其中蓝色的名称表示文件夹，黑色的表示文件，绿色的其权限为拥有所有权限。            * 语法2：#mkdir-p 路径                * 含义：当一次性创建多层不存在的目录的时候，添加-p参数，否则会报错            * 语法3：#mkdir 路径1 路径2 路径3...(表示一次性创建多个目录)        5. touch指令            * 作用：创建文件            * 语法：#touch 文件路径 （路径可以是直接的文件名也可以是路径）        6. cp指令            * 作用：复制文件/文件夹到指定的位置            * 语法：#cp 被复制的文档路径 文档被复制到的路径            注意：                1. Linux在复制过程中是可以重新对新位置的文件进行重命名的，但是如果不是必须的需要，则建议保持前后名称一致。                2. 当使用cp命令进行文件夹复制操作的时候需要添加选项&quot;-r&quot;(-r表示递归复制)                    7. mv指令            * move 移动剪切            * 作用：移动文档到新的位置            * 语法：#mv 需要移动的文档路径 需要保存的位置的路径            * 确认：移动之后的文件还在不在原来的位置？原始文件时不在原始位置的            * 补充：在Linux中重命名的命令也是mv。语法和移动语法一样。        8. rm命令            * remove 移除、删除            * 作用：移除/删除文档            * 语法：#rm 选项 需要移除的文档路径            * 在删除的时候如果不带选项，会提示是否删除，如果需要确认则输入&quot;y/yes&quot;,否则输入&quot;n/no&quot; 按下回车            * 注意：                1. 如果在删除的时候不想频繁的确认，则可以在指令中添加&quot;-f&quot;，表示force（强制）                2. 删除一个目录的时候需要做递归删除，并且一般也不需要进行删除确认询问，所以移除目录的时候一般需要使用-rf选项        9. vim命令            * vim是一款文本编译器            * 语法：#vim文件的路径            * 作用：打开一个文件（可以不存在，也可以存在）                * 退出打开的文件，在没有按下其他命令的时候，按下shift+冒号，输入q，按下回车即可        10. 输出重定向            * 一般命令的输出都会显示在终端中，有些时候需要将一些命令的执行结果想要保存到文件中进行后续的分析/统计，则这时候需要使用到的输出重定向技术。            * &gt; :覆盖输出，会覆盖掉原先的文件内容            * &gt;&gt;:追加输出，不会覆盖原始文件内容，会在原始内容末尾继续添加            * 语法：#正常执行的指令 &gt;/&gt;&gt; 文件路径            * 注意：文件可以不存在，不存在则新建        11. cat命令            * 作用1：cat有直接打开一个文件的功能            * 语法1：#cat 文件的路径            * 作用2：cat还可以对文件进行合并            * 语法2：#cat 待合并的文件路径1 待合并的文件路径2 ...待合并文件路径n&gt; 合并之后的文件路径    3. 高级指令（重点）        1. df指令            * 作用：查看磁盘空间            * 语法：#df-h  -h表示以可读性较高的形式展示大小        2. free指令            * 作用：查看内存使用情况            * 语法：#free -m                 * Swap:用于临时内存，当系统真实内存不够使用的时候可以临时使用磁盘空间来充当内存        3. head指令            * 作用：查看一个文件的前n行，如果不指定n，则默认显示前10行            * 语法：#head-n 文件路径 （n表示数字）        4. tail指令            * 作用1：查看一个文件的末n行，如果n不指定默认显示后10行            * 语法：#tail-n 文件的路径 n同样表示数字            * 作用2：可以通过tail指令查看一个文件的动态变化内容(变化的内容不能是用户手动增加的)            * 语法：#tail-f 文件路径                * 该命令一般用于查看系统的日志文件比较多        5. less指令            * 作用：查看文件，以较少的内容进行输出，按下辅助功能键(数字+回车、空格键+上下方向键)查看更多            * 语法：#less 需要查看的文件路径                * 在退出的时候只需按下q键即可        6. wc指令            * 作用：统计文件内容信息（包含行数、单词数、字节数）            * 语法：#wc-lwc 需要统计的文件路径                * -l：表示lines，行数                * -w：表示words，单词数                * -c：表示bytes，字节数                    7. date指令（重点）            * 作用：表示操作时间日期（读取、设置）            * 语法1：#date             * 语法2:#date +%F （等价于#date &quot;+%Y-%m-%d&quot;)            * 语法3：#date &quot;+%F%T&quot; 引号表示让“年月日与时分秒”成为一个不可分割的整体 等价操作#date &quot;+%Y-%m-%d %M:%H:%S&quot;            * 语法4：获取之前或者之后的某个时间(备份) #date -d &quot;-1 day&quot; &quot;%Y-%m-%d %M:%H:%S&quot;                * 符号可选值：+（之后）或者 -（之前）                * 单位可选值：day、month、year                * %F：表示完整的年月日                * %T：表示完整的时分秒                * %Y:表示四位年份                * %m：表示两位月份（带前导0）                * %d：表示日期（带前导0）                * %H：表示小时（带前导0）                * %M: 表示分钟（带前导0）                * %S: 表示秒数（带前导0）        8. cal指令            * 作用：用来操作日历            * 语法1：#cal 等价于#cal -1 直接输出当前月份的日历            * 语法2：#cal -3   表示输出上一个月+本月+下一个月的日历            * 语法3：#cal -y 年份   表示输出某一年的日历        9. clear/ctrl + L指令            * 作用：清除终端中已经存在的命令和结果(信息)。            * 语法：clear  或者快捷键：ctrl+L            * 注意：该命令并不是真的清除了之前的信息，而是把之前的信息隐藏到了最上面，通过滚动条框可继续查看以前的信息。        10. 管道（重要）            * 管道符：|            * 作用：管道一般可以用于“过滤”、“特殊”、“扩展处理”。            * 语法：管道不能单独使用，必须要配合前面所讲的一些指令来一起使用，其作用主要是辅助作用。            * 过滤案例(重要)：需要通过管道查询出根目录下包含“y”字母的文档名称。                * #ls /|grep y            * 针对上面这个命令说明：                1. 以管道作为分界线：前面的命令有个输出，后面需要先输入，然后再过滤，最后再输出，通俗的讲就是管道前面的输出就是后面指令的输入。                2. 扩展处理：请使用学过的命令，来统计某个目录下的文档的总个数？                    * #ls/|wc-l    4. 高级指令        1. hostname指令            * 作用：操作服务器的主机名（读取）            * 语法1：#hostname  表示输出完整的主机名            * 语法2：#hostname -f  表示输出当前主机名中的FQDN(全限定域名)        2. id指令            * 作用：查看一个用户的一些基本信息（包含用户id，用户组id，附加组id...)，该指令如果不指定用户则默认当前用户            * 语法1：#id  默认显示当前执行该命令的用户的基本信息            * 语法2：#id 用户名  显示指定用户的基本信息                * 验证用户信息：通过文件/etc/passwd                * 验证用户组信息：通过文件/etc/group        3. whoami指令            * 指令：“我是谁” 显示当前登录的用户名，一般用于shell脚本，用于获取当前操作的用户名方便记录日志。            * 语法：#whoami        4. ps -ef指令（重点）            * 作用:主要是查看服务器进程信息            * 选项含义：                * -e：等价于“-A”，表示列出全部的进程                * -f：显示全部的列（显示全字段）            * 列的含义：                * UID:该进程执行的用户id                * PID：进程id                * PPID：该进程的父级进程id，如果一个程序的父级进程找不到，该程序的进程称之为僵尸进程                * C：cpu的占用率，其形式是百分数                * STIME：进行的启动时间                * TTY：终端设备，发起该进程的识别符号，如果显示“？”则表示该进程并不是由终端设备发起                * TIME:进程的执行时间                * CMD：该进程的名称或者对应的路径        5. top指令（重点）            * 作用：查看服务器的进程占的资源            * 语法：                * 进入命令：#top  （动态显示）                * 退出命令：按下q键            * 输出的表头信息                * PID：进程id                * USER:该进程对应的用户                * PR:优先级                * VIRT:虚拟内存                * RES：常驻内存                * SHR：共享内存                    * 计算一个进程实际使用的内存 = 常驻内存（RES）- 共享内存（SHR）                * S：表示进程的状态（sleeping，其中S表示睡眠，R表示运行）                * %CPU：表示CPU的占用百分比                * %MEN:表示内存的占用百分比                * TIME+：执行时间                * COMMAND：进程的名称或者路径                * 在运行top的时候，可以按下方便的快捷键：                    * M：表示将结果按照内存（MEM）从高到低进行降序排列                    * P：表示将结果按照CPU使用率从高到低进行降序排列                    * 1：当服务器拥有多个cpu的时候可以使用“1”快捷键来切换是否展开显示各个cpu的详细信息        6. du -sh指令            * 作用：查看目录的真实大小            * 语法：#du -sh 目录路径            * 选项含义：                * -s：只显示汇总的大小                * -h：表示以高可读性的形式进行显示        7. find指令            * 作用：用于查找文件（其参数有55个之多）            * 语法：#find 路径范围 选项 选项的值            * 选项：                * -name：按照文档名称进行搜索（支持模糊搜索）                * -type：按照文档的类型进行搜索                    * 文档类型：“-”表示文件（在使用find的时候需要用f来替换），“d”表示文件夹        8. service指令（重点）            * 作用：用于控制一些软件的服务启动/停止/重启            * 语法：#service 服务名 start/stop/restart        9. kill命令（重点）            * 作用：表示杀死进程 （当遇到僵尸进程或者处于某些原因需要关闭进程的时候）            * 语法1：#kill 进程PID （语法需要配合ps一起使用）            * 语法2：#killall 进程名称（比kill更加好用）        10. ifconfig命令（重点）            * 作用：用于操作网卡相关指令            * 简单语法：#ifconfig （获取网卡信息）        11. reboot指令            * 作用：重新启动计算机            * 语法1：#reboot  重启            * 语法2:#reboot -w  模拟重启，但是不重启（只写关机与开机的日志信息）        12. shutdown指令            * 作用：关机（慎用）            * 语法1：#shutdown -h now “关机提示” 或者 #shutdown -h15:25 “关机提示”                * 如果想要取消关机计划的话，则可以按照以下方式去尝试：                    * 针对于centos7.x以前的版本：ctrl+c                    * 针对于centos7.x(包含)以后的版本，#shutdown -c                * 除了shutdown关机以外，还有以下几个关机命令：                    * #init 0                    * #halt                    * poweroff        13. uptime指令            * 作用：输出计算机的持续在线时间（计算机从开机到现在运行的时间）            * 语法：#uptime        14. uname指令            * 获取计算机操作系统相关信息            * 语法1：#uname  获取操作系统的类型            * 语法2：uname -a  all，表示获取全部的系统信息（类型、全部主机名、内核版本、发布时间、开源计划）        15. netstat -tnlp指令            * 作用：查看网络连接状态            * 语法：#netstat -tnlp            * 选项名称：                * -t：表示值列出tcp协议的连接                * -n：表示将地址从字母组合转化成ip地址，将协议转化成端口号来表示                * -l：表示过滤出“state（状态）”列出其值为LISTEN(监听)的连接                * -p：表示显示发起连接的进程pid和进程名称        16. man指令            * 作用：manual 手册（包含了Linux中全部命令手册，英文）            * 语法：#man 命令  （退出按下q键）</code></pre><p>​    </p><pre><code>5.VIM    1. vi介绍：        * vi编辑器是所有Unix及Linux系统下标准的编辑器，在Unix及Linux系统的任何版本中，vi编辑器是完全相同的。        * 关于vim：            * vi和vim都是Linux中的编辑器，不同的是，vim比较高级，可以视为vi的升级版本。vi使用于文本编辑，但是vim更适用于coding（写代码的）            * vim重点是光标的移动，模式切换、删除、查找、替换、复制、粘贴、撤销命令的使用    2. vim三种模式（重点）        1. Vim中存在三种模式（大众的认知）：命令模式、编辑模式（输入模式）、末行模式（尾行模式）            * 命令模式：在该模式下是不能对文件直接编辑，可以输入快捷键进行一些操作（删除行、复制行、移动光标、粘贴等等）【打开文件之后默认进入的模式】            * 编辑模式：在该模式下可以对文件内容进行编辑            * 末行模式：可以在末行输入命令来对文件进行操作（搜索、替换、保存、退出、撤销、高亮等等）        2. Vim的打开文件的方式（4种，要求掌握的就前3种）            * #vim 文件路径  作用：打开指定的文件            * #vim +数字 文件路径  作用：打开指定的文件，并且将光标移动到指定行            * #vim +/关键词 文件路径  作用：打开指定的文件，并且高亮显示关键词            * #vim 文件路径1 文件路径2 文件路径3  作用：同时打开多个文件            * 重点：                * 先复制出一个/etc/passwd文件，复制到当前家目录                * 后续一切操作命令都是基于/root/passwd文件进行操作                * 退出方式：输入:q按下回车即可        3. 命令模式            * 注意：该模式是打开文件的第一个看到的模式（打开文件即可进入）            1. 光标移动                * 光标移动到行首                    * 按键：shift + 6或^                * 光标移动到行尾                    * 按键：shift + 4或$                * 光标移动到首行                    * 按键：gg                * 光标移动到末行                    * 按键：G                * 翻屏                    * 向上翻屏：按键ctrl+b (before)                    * 向下翻屏：ctrl (after)            2. 复制操作                * 复制光标所在行                    * 按键：yy                    * 粘贴：在想要粘贴的地方按下p键                * 以光标所在行为准（包含当前行），向下复制指定的行数                    * 按键：数字yy                * 可视化复制                    * 按键：ctrl + v,然后按下上下左右方向键来选中需要复制的区块，按下yy键进行复制，最后按下p键粘贴            3. 剪切/删除                * 剪切/删除光标所在行                    * 按键：dd  （删除之后下一行上移）                    * 注意：dd严格意义上说是剪切命令，但是如果剪切了不粘贴就是删除的效果。                * 剪切/删除光标所在行为准（包含当前行），向下删除/剪切指定的行                    * 按键：数字dd （删除之后下一行上移）                * 剪切/删除光标所在的当前行，但是删除之后下一行不上移                    * 按键：D （删除之后当前行会变成空白行）                            4. 撤销/恢复                * 撤销：输入:u（不属于命令模式）  或者 u  （undo）                * 恢复：ctrl+r  恢复（取消）之前的撤销操作            5. 扩展1：光标的快速移动                * 快速将光标移动到指定的行                    * 按键：数字G                * 以当前光标为准向上/向下移动n行                    * 按键：数字↑，数字↓                * 以当前光标为准向左/向右移动n字符                    * 按键：数字←，数字→                * 末行模式下的快速移动方式，移动到指定的行                    * 按键：输入英文&quot;:&quot;,其后输入行数数字，按下回车        4. 末行模式            * 进入方式：由命令模式进入，按下“:”即可进入            * 退出方式：                * 按下esc                * 连按2次esc                * 删除末行全部输入字符            * 保存操作                * 输入：“:w”  保存文件                * 输入：“:w路径”  另存为</code></pre><p>​    </p><pre><code>            * 退出（quit）                * 输入：“:q”  退出文件                            * 保存并退出                * 输出：“:wq”  保存并退出            * 强制（!）                * 输入：“:ql”  表示强制退出，刚才做的修改操作不保存            * 搜索/查找                * 输入：“/关键词”                    * 在搜索结果中切换上/下一个结果：N/n （next）            * 替换：                * :s/搜索的关键词/新的内容  替换光标所在行的第一行符合条件的内容                * :s/搜索的关键词/新的内容/g  替换光标所在行的第一处符合条件的内容                * :%s/搜索的关键词/新的内容  替换整个文档中每行第一个符合条件的内容                * :%s/搜索的关键词/新的内容/g  替换整个文档的符合条件的内容                    * % 表示整个文件                    * g 表示全局（global）            * 显示行号            * 输入：“:set nu” (number)            * 如果想取消显示，则输入：&quot;:set nonu&quot;            * 扩展2：使用vim同时打开多个文件，在末行模式下进行切换文件            * 查看当前已经打开的文件名称：“:files”                * 在%a的位置有2种显示可能                    * %a：a=active 表示当前正在打开的文件                    * #：表示上一个打开的文件            * 切换文件的方式：                * a：如果需要指定切换文件的名称，则可以输入：“:open 已经打开的文件名”                * b：可以通过其他命令来切换上一个/下一个文件                    * 输入：“:bn” 切换到下一个文件 (back next)                    * 输入：“:bp” 切换到上一个文件 (back previous)        5. 编辑模式            1. 进入方式：i(insert)、a(after)            2. 退出方式：按下esc键        6. 实用功能            1. 如何控制着色显示与否？                * 显示：“:syntax on”                * 关闭显示：“:syntax off”            2. vim中计算器的使用                * 当在编辑文件的时候突然需要使用计算器去计算一些公式，则此时需要用计算器，但是需要退出，vim自身继承了一个简易的计算器。                    * 进入编辑模式                    * 按下按键“ctrl+R”,然后输入“=”，此时光标会变到最后一行                    * 输入需要计算的内容，按下回车        7. 扩展3            1. vim的配置（重点）                * vim是一款编辑器，编辑器也是有配置文件的                * vim配置有三种情况                    * 在文件打开的时候在末行模式下输入的配置(临时的)                    * 个人配置文件(~/.vimrc，如果没有可以自行新建)                    * 全局配置文件(vim自带，/etc/vimrc)                * 新建好个人配置文件之后进入编辑                * 在配置文件中进行配置                    * 问题：如果某个配置项，在个人配置文件与全局配置文件产生冲突的时候应该以谁为准？                        * 测试步骤：在两个配置文件中针对同一配置设置不同的值                        * 结论：如果针对同一个配置项，个人配置文件中存在，则以个人配置文件为准，如果个人配置文件中不存在这一项，则以全局配置文件为准。                                    2. 异常退出                1. 异常退出：在编辑文件之后并没有正常的去wq(保存退出)，而是遇到突然关闭终端或者断电的情况，则会显示文件异常的情况，这个情况称之为异常退出。                    * 解决办法：将交换文件（在编程过程中产生的临时文件）删除即可                    * rm -f .passwd.swp            3. 别名机制                * 作用：相当于创建一些属于自己的自定义命令                * 别名机制依靠一个别名映射文件:~/.bashrc                * 注意：如果想新创造的命令生效，必须要重新登录当前用户。            4. 退出方式                * 回顾：之前vim中退出编辑的文件可以使用&quot;:q&quot;或者“:wq”                * 除了上面的这个语法之外，vim还支持另外一个保存退出方法“:x”,                * 说明：                    * “:x”在文件没有修改的情况下，表示直接退出，在文件修改的情况下表示保存并退出；                    * 如果文件没有被修改，但是使用wq进行退出的话，则文件的修改时间会被更新；但是如果文件没有被修改，使用x进行退出的话，则文件修改时间不会被更新。主要是会混淆用户对文件的修改时间的认定。                    * 因此建议以后使用“:x”来进行对文件的保存退出。                    * 注意：不要使用X，不要使用X，不要使用X6.Linux自有服务    1. 运行模式        * 运行模式也可以称之为运行级别        * 在linux中存在一个进程：init（initialize，初始化），进程id是1            * 查看进程：#ps -ef|grep init            * 该进程存在一个对应的配置文件，inittab(系统运行级别配置文件，位置/etc/inittab)        * Centos6.5中存在7种运行级别/模式            * 0:表示关机级别（不要将默认的运行级别设置成这个值）            * 1：单用户模式            * 2：多用户模式，不带NFS(Network File System)            * 3：多用户模式，完全的多用户模式            * 4：没有被使用的模式（被保留的模式）            * 5：X11，完整的图形化界面模式            * 6：表示重启级别（不要将默认的运行级别设置成这个值）            * 与该级别相关的几个命令：                * #init 0  表示关机                * #init 3：表示切换到不带桌面的模式                * #init 5：切换到图形界面                * #init 6：重启电脑            * 注意：init指令需要超级管路员的权限，普通用户无法执行            * 这些命令其实都是调用的init进程，将数字(运行级别)传递给进程，进程去读配置文件执行对应的操作                                * 切换到纯命令行模式下 #init 3                * 切换之后需要输入用户名和密码，在输入密码的时候没有“*”提示输入，只要自己确认输入的密码没有错误，按下回车即可                                * 回到桌面模式  #init 5                * 设置模式永久为命令行模式                    * 将/etc/inittab文件中的initdefault值设置成3，然后重启操作系统        2. 用户与用户组管理（重点）            1. 用户管理            1. 添加用户                    * 常用语法：#useradd 选项 用户名                    * 常用选项：                        * -g：表示指定用户的用户主组，选项的值可以是用户组的id，也可以是组名                        * -G：表示指定用户的用户附加组，选项的值可以是用户组的id，也可以是组名                        * -u：uid：用户的id(用户的标识符)，系统默认会从500之后按顺序分配uid，如果不想使用系统分配的，可以通过该选项自定义。                            * 创建用户 zhangsan，不带任何选项                            * 验证是否成功：                                * 验证/etc/passed的最后一行，查看是否有zhangsan的信息                                * 验证是否存在家目录(在Centos 下创建好用户之后随之产生一个同名家目录)                        * 扩展：认识passed文件                            * 用户名：密码：用户ID:用户组ID:注释:家目录:解释器 shell                            * 用户名：创建新用户名称，后期登录的时候需要输入                            * 密码：此密码位置一般情况都是“x”，表示密码的占位                            * 用户ID：用户的识别符                            * 用户组ID：该用户所属的主组ID                            * 注释：解释该用户是做什么用的                            * 家目录：用户登录进入系统之后默认的位置                            * 解释器 shell：等待用户进入系统之后，用户输入指令之后，该解释器会收集用户输入的指令，传递给内核处理                         * 注意：在不添加选项的时候，执行useradd之后会执行一系列的操作                             * 创建同名的家目录                             * 创建同名的用户组                                                      * 注意：查看用户的主组可以查看passwd文件，查看附加组可以查看group文件                                                        2. 修改用户                * 常用语法：#usermod 选项 用户名                * usermod：user modify 用户修改                * 常用选项：                    * 同用户管理三个一样 外加一个 -l：修改用户名                                    * 案例1：修改zhangssan用户主组为500，附加组改为501                    * #usermod -g 500 -G 501 zhangsan                                * 案例2：修改zhangsan用户用户名，改为wangerma                    * #usermod -l 新的用户名 旧的用户名                        * #usermod -l wangerma zhangsan</code></pre><p>​            </p><pre><code>            3. 设置密码                1. Linux不允许没有密码的用户登录到系统，因为前面创建的用户目前都处于锁定状态，需要设置密码之后才能登录到计算机                2. 常用语法：#passwd 用户名                    * 在设置密码的时候也是没有任何输入提示的，放心输入，确保两次输入的密码一致，按下回车即可。                    * 设置密码之后shadow文件中的体现，能够看出lisi用户没有密码的。                                        * 切换用户命令：#su（switch user）                    * 如果用户名不指定则表示切换到root用户                    * 切换用户需要注意的事项：                        * 从root往普通用户切换不需要密码，但是反之则需要root密码                        * 切换用户之后前后的工作路径是不变的                        * 普通用户没有办法访问root用户家目录，但是反之则可以            4. 删除用户                1. 常用语法：#userdel 选项 用户名                    * userdel：user delete（用户删除）                2. 常用选项                    * -r：表示删除用户的同时，删除其家目录                    * 注意：已经登录的用户删除的时候会提示删除失败，但是没有登录的用户可以正常删除                        * 解决办法：简单粗暴，kill对应用户的全部进程</code></pre><p>​    </p><pre><code>            2. 用户组管理                * 每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理，不同Linux系统对用户组打的规定有所不同，如Linux下的用户属于与它同名的用户组，这个用户组在创建的时同时创建。                * 用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对/etc/group文件的更新。                    * 文件结构：                        * 用户组名:密码:用户组ID:组内用户名                        * 密码：    X表示占位符，虽然用户组可以设置密码，但是绝大部分的情况下不设置密码                        * 组内用户名：表示福附加组是该组的用户名称                1. 用户组添加                    * 常用语法：#groupadd 选项 用户组名                    * 常用选项：                        * -g:类似用户添加里的&quot;-u&quot;,-g表示选择自己设置一个自定义的用户组ID数字，如果自己不指定，则默认从500之后递增。                2. 用户组编辑                    * 常用语法：#groupmod 选项 用户组名                    * 常用选项：                        * -g：类似用户修改里的“-u”，-g表示选择自己设置一个自定义的用户组ID数字                        * -n：类似于用户修改“-l”，表示设置新的用户组的名称                3. 用户组删除                    * 常用语法：#groupdel 用户组名                    * 注意:当如果需要删除一个组，但是这个组是某个用户的主组时，则不允许删除；如果确定需要删除，则先从组内移出所有用户        3. 网络设置            * 首先知道网卡配置文件位置：/etc/sysconfig/network-scripts            * 在目录中网卡的配置文件名称格式：ifcfg-网卡名称                * ONBOOT:是否开机启动                * BOOTPROTO:ip地址分配方式，DHCP表示动态主机分配协议                * HWADDR：硬件地址，MAC地址            * 如果后续需要重启网卡怎么去操作呢？                * #service network restart                * 在有的分支版本中可能没有service命令来快速操作服务，但是有一个共性的目录：/etc/init.d这个目录中放着很多对服务的快捷方式。                    * 此处重启网卡命令还可使用：#/etc/init.d/network restart            * 扩展1：如果修改网卡的配置文件，但是配置文件的目录层次根深，此时可以在浅的目录中创建一个快捷方式(软链接)，方便以后去查找                * #ln-s 原始文件的路径 快捷方式的路径                 * 其中，文件类型位置的“l”表示其类型为link(连接类型)，后面的“-&gt;”指向的原始文件路径            * 扩展2：如何去重启单个网卡？                * 停止某个网卡：#ifdown 网卡名                * 开启某个网卡：#ifup 网卡名                * 注意：在实际工作中不要随意禁用网卡        4. ssh服务（重点）            * ssh(secure shell，安全外壳协议)，该协议有2个常用的作用：远程连接协议、远程文件传输协议。            * 协议使用端口号：默认是22，如果需要修改，则需要修改ssh服务的配置文件                * #/etc/ssh/ssh_config            * 端口号可以修改，但是需要注意2个事项：                * 注意范围，端口范围是从0-65535                * 不能使用别的服务已经占用的端口            * 服务启动/停止/重启                * #service sshd start/stop/restart                * #/etc/init.d/sshd start/stop/restart                             1. 远程终端                * 终端工具主要帮助运维人员连接远程的服务器，常见终端工具有：Xshell、secureCRT、Putty等            2. SSH服务文件传输                * 可视化的界面传输工具：Filezilla</code></pre><p>​    </p><pre><code>    2. 设置主机名        1. 临时设置主机名(立竿见影)，需要切换用户使之生效            * #hostname 设置的主机名        2. 永久设置主机名（需要重启）            * 先找到一个文件 /etc/sysconfig/network（主机名的配置文件）            * 修改其中的HOSTNAME为自己需要设置的永久主机名        3. 修改linux服务器的hosts文件，将修改的后的主机名指向本地(设置FQDN)            * Hosts 文件位置：/etc/hosts            * 问题：不设置FQDN会怎么样？                * 很多开源服务器软件(例如Apache)则无法启动，或出现报错                * 方便记忆，看到主机名对其作用有一个初步判断                * 如果不设置则会影响本地的域名的解析(本地访问)</code></pre><p>​<br>​    </p><pre><code>    3. chkconfig        * 作用：相当于windows下“安全卫士”、“电脑管家”之类的安全辅助工具提供“开机启动项”的一个管理服务        * 在linux下不是所有的软件安装完后之后都有开机启动服务，有的可能需要自己去添加。除此之外还可以查看和删除。        1. 开机启动服务查询            * #chkconfig --list        2. 删除服务            * #chkconfig --del 服务名        3. 添加开机启动服务            * chkconfig --add 服务名 (必须要保证服务正常运行，才可以添加)        4. 设置服务在某个级别下开机启动/不启动（重点命令）            * #chkconfig --level 连在一起的启动级别 服务名 on/off</code></pre><p>​        </p><pre><code>    4. ntp服务        * 作用：ntp主要是用于对计算机的时间同步管理的操作。        * 时间是对服务器来说很重要的，一般很多网站都需要读取服务器时间来记录相关信息，如果时间不准，则可能造成很大影响。        * 同步服务器时间方式有2个：一次性同步(手动同步)、通过服务自动同步        1. 一次性同步时间（简单）            * #ntpdate 时间服务器域名或ip地址 ip地址查看可以访问：hhtp://www.ntp.org.cn/pool.php                            2. 设置时间同步服务            * 服务名：ntpd            * 启动ntpd服务                * #service ntpd start  或者 /ect/init.d/ntpd start            * 设置ntpd服务开机启动：                * #chkconfig --list|grep ntpd                * #chkconfig --level 35 ntpd on    5. 防火墙服务        * 防火墙：防范一些网络攻击，有软件防火墙、硬件防火墙之分。         * 防火墙选择让请求通过，从而保证网络的安全性        * 在当前的centos6.5中防火墙有一个名称：iptables（7.x中默认使用的是firewalld）        1. 查看iptables是否开机启动            * chkconfig --list | grep iptables        2. iptables服务启动/重启/关闭            * #service iptables start/restart/stop            * /etc/init.d/iptables start/restart/stop        3. 查看iptables的状态(规则)            * #service iptables status            * 如果iptables没有启动，则提示服务没启动，如果已经启动，则显示防火墙的相关的规则信息。        4. 查看规则的命令            * #iptables-L-n            * 含义：                * -L：表示列出规则                * -n：表示将单词表达形式改成数字形式显示        5. 简单设置防火墙规则            * 例如：需要允许80端口通过防火墙，则规则可以用以下的命令来设置                * #iptables-A INPUT-p tcp--dport80 -j ACCEPT #允许访问80端口            * iptables：主命令                * -l：表示将规则放到最前面                * -A：add，添加规则                * INPUT：进站请求（出站output）                * -p：protocol，指定协议（icmp/tcp/udp）                * --dport：指定端口号                * -j：指定行为结果，允许(accept)/禁止（reject）            * 添加完成之后需要保存操作：                * /etc/init.d/iptables save                            6. rpm管理（重点）        * rpm的作用类似于windows上的电脑管家中“软件管理”等产品，主要作用是对linux服务器上的软件包进行对应管理操作。        * 管理分为：查询、卸载、安装。        1. 查询某个软件的安装情况            * #rpm-qa|grep 关键词            * 选项：                * -q：查询，query                * -a：全部，all                         2. 卸载某个软件            * rpm-e 软件的名称            * 当存在依赖关系的时候又不想去解决这个问题的时候可以：                * #rmp-e 软件包名 --nodeps        3. 软件的安装            * 软件包的获得方式：                * 去官网下载                * 不介意老版本的话，可以从光盘(或者镜像文件)中读取            * 扩展:光盘的挂载和解挂                * 解挂操作                    * 命令：#umount                    * 语法：#umount 当前设备的挂载点(路径)                * 挂载光盘                    * 命令：mount                    * 语法：#mount 设备原始地址 要挂载的位置路径                * 设备原始地址：地址统一都在/dev下，然后根据大小确定具体name值，拼凑在一起组成原始地址。例如：“/dev/sr0”                * 要挂载的位置路径：挂载目录一般都在mnt下，也可以在mnt下创建目录。如：“/mnt/dvd”            * 安装软件的命令：                * #rpm-ivh 软件包完整名称                    * 选项：                    * -i：install，安装                    * -v：显示进度条                    * -h：表示以“#形式显示进度条”    7. cron/crontab计划任务（重点）        * 作用：让操作系统在指定的时间去执行相应的任务        * 语法：#crontab 选项        * 常用选项：            * -l：lsit，列出指定用户的计划任务列表            * -e：edit，编辑指定用户的计划任务列表            * -u：user，指定的用户名，如果不指定，则表示当前用户            * -r：remove，删除指定用户的计划任务列表        1. 编辑计划任务（重点）            * 计划任务的规则语法格式，以行为单位，一行则为一个计划：                * 分 时 日 月 周 需要执行的命令                    * 例如：每天的0点0分执行reboot指令，则可以写成：                        * 0 0 * * * reboot                * 取值范围：                    * 分：0~59                    * 时：0~23                    * 日：1~31                    * 月：1~12                    * 周：0~6,0表示星期天                * 四个符号：                    * *：表示取值范围中的每一个数字                    * -：做连续区间表达式的，要想表示1~7，则可以写成：1-7                    * /：表示每多个,例如：想每10分钟一次，*/10                    * ,:表示多个取值            * Crontab 权限问题：本身是任何用户都可以创建自己的计划任务。            * 但是超级管理员可以通过配置来设置某些用户不允许设置计划任务                * 配置文件位于（黑名单）：                    * /etc/cron.deny  里面写用户名：一行一个                * 还有一个配置文件：(白名单)：                    * /etc/cron.allow (本身不存在，自己创建)                * 注意：白名单优先级高于黑名单，如果一个用户同时存在两个名单文件中，则会默认允许创建计划任务。7.Linux权限管理操作    1. 权限介绍        1. 什么是权限?            * 在多用户(可以不同时)计算机系统的管理中，权限是指某个特定的用户具有特定的系统资源使用权利。        2. 在Linux中分别有读、写、执行权限：            * 读权限：                * 对于文件夹来说，读权限影响用户是否能够列出目录结构                * 对于文件来说：读权限影响用户是否可以查看文件内容            * 写权限                * 对文件夹来说，写权限影响用户是否可以在文件夹下“创建/删除/复制到/移动到”文档                * 对于文件来说，写权限影响用户是否可以编辑文件内容            * 执行权限：                * 一般都对文件来说，特别脚本文件。    2. 身份介绍        * Owner身份（文件所有者，默认为文档的创建者）        * Group身份（与文件所有者同组的用户）        * Others身份（其他人）        * Root用户（超级用户）            * 在Linux中，还有一个神一样存在的用户，这就是root用户，因为在所有用户中它拥有最大的权限，所以管理着普通用户。    3. Linux的权限介绍        1. 要设置权限，就需要知道文件的一些基本属性和权限的分配规则。在Linux中，ls命令常用来查看文件的属性，用于显示文件的文件名和相关属性。            * #ls-l 路径 （ls-l 等价于 ll）            * Linux中存在用户、用户组和其他人的概念，各自有不同的权限，对于一个文档来说，其权限具体分配如下：            * drwxr-x---                * 十字符表示的含义：                    * 第1位：表示文档类型，取值常见的有“d表示文件夹”、“-表示文件”、“l表示软连接”等                    * 第2-4位：表示文档所有者的权限情况，第2位表示读权限的情况，取值有r、-;第3位表示写权限的情况，w表示可写，-表示不可写，第4位表示执行权限的情况，取值有x、-。                    * 第5-7位：表示与所有者同一个组的用户的权限情况，第5位表示读权限的情况，取值有r、-;第6位表示写权限的情况，w表示可写，-表示不可写，第7位表示执行权限的情况取值有x、-。                    * 第8-10位：表示除了上面的前2部分的用户之外的其他用户的权限情况，第8位表示读权限的情况，取值有r、-;第9位表示写权限的情况，w表示可写，第10位表示执行权限的情况，取值有x、-。                    * 权限分配中，均是rwx的三个参数组合，且位置顺序不会变化。没有对应权限就用 - 代替。    4. 权限设置        * 语法:#chmod 选项 权限模式 文档        * 注意事项：            * 常用选项：                * -R：递归设置权限（当文档类型为文件夹的时候）            * 权限模式：就是该文档需要设置的权限信息        * 文档：可以是文件，也可以是文件夹，可以是相对路径也可以是文件夹，可以是相对路径也可以是绝对路径。            * 注意：如果想要给文档设置权限，操作者要么是root用户，要么就是文档的所有者。        1. 字母形式            * 给谁设置：                * u：表示所有者身份 owner（user）                * g：表示给所有者同组用户设置（group）                * o：表示others，给其他用户设置权限                * a：表示all，给所有人（包含ugo部分）设置权限                    * 如果在设置权限的时候不指定给谁设置，则默认给所有用户设置            * 权限字符：                * r：读                * w：写                * x：表示执行            * 执行分配方式：                * +：表示给具体的用户新增权限（相对当前）                * -：表示删除用户的权限（相对当前）                * =：表示权限设置成具体的值（注重结果）                * 例如：如果某个文件什么权限都没有，可以使用root用户设置所有人都有执行权限，则可以写成：                    * #chmod +x 该文件                    * #chmod a=x 该文件                    * #chmod a+x 该文件                * 提示：当文档拥有执行权限，则其终端是绿色。        2. 数字形式            * 经常会有一些技术性的网页上看到类似于#chmod 777 a.txt 这样的一个权限，这种形式称之为数字形式权限(777)            * 读：r    4            * 写：w    2            * 执行：x  1            * 没有任何权限：0            * 数值        权限                        目录列表            * 0            不能读，不能写，不能执行        ---            * 1            不能读，不能写，可执行             --x            * 2            不能读，可写，不能执行             -w-            * 3            不能读，可写，可执行             -wx            * 4            可读，不可写，不可执行             w--            * 5            可读，不能写，可执行             r-x            * 6            可读，可写，不可执行             rw-            * 7            可读，可写，可执行                         rwx                        * 面试题：用超级管理员设置文档的权限命令是#chmod -R 731 aaa，请问这个命令有没有什么不合理地地方？                * 拥有者：7=4+2+1=读+写+执行                * 同组用户：3=2+1=写+执行（不能读怎么能写？）                * 其他用户：1=1=执行            * 注意：在写权限的时候千万不要设置类似于上面“奇葩的权限”。如果一个权限数字但凡出现2与3的数字，则该权限有不合理地情况。            * 注意事项：在Linux中，如果想要删除一个文件，不是看文件有没有对应的权限，而是看文件所在的目录是否有写权限，如果有才可以删除。    5. 属主与属组设置        * 属主：所属的用户(文件的主人)        * 属组：所属的用户组        * 这两项信息在文档创建的时候会使用创建者的信息（用户名、用户所属的主组名称）        * 如果有时候去删除某个用户，则该用户对应的文档的属主和属组信息就需要去修改。                1. chown            * 作用：更改文档所属用户            * 语法：#chown -R username 文档路径        2. chgrp（了解）            * 作用：更改文档的所属用户组            * 语法：#chgrp -R groupname 文档的路径            * 思考：如果通过一个命令实现既可以更改所属的用户，也可以修改所属的用户组呢？                * 可以实现的，通过chown命令                * 语法：#chown -R username:groupname 文档路径    6. 扩展        * 可以使用sudo（switch user do）命令来进行权限设置。sudo可以让管理员(root)事先定义某些特殊命令谁可以执行。        * 默认sudo中是没有除root之外用户的规则，要想使用规则先配置sudo        * sudo配置文件：/etc/sudoers            * 配置sudo文件请使用“#visudo”，打开之后其使用方法和vim一致            * 配置普通用户的权限                * Root 表示用户名                * ALL：表示允许登录的主机（地址白名单）                * (ALL):表示以谁的身份执行，ALL表示root身份                * ALL：表示当前用户可以执行的命令，多个命令可以使用“,”分割            * 注意：在写sudo规则的时候不建议写直接形式的命令，而是写命令的完整路径，路径可以使用which命令来查看                * 语法：#which 指令名称8.shell基础    1. 什么是shell        * Shell（外壳）是一个用C语言编写的程序，它是用户使用Linux的桥梁。Shell既是一种命令语言，又是一种程序设计语言。        * Shell是指一种用用程序，这个应用程序提供一个界面，用户通过这个界面访问操作系统内核的服务。    2. shell入门        * 编写规范：            * 代码规范：                * #!/bin/bash （指定告知系统当前这个脚本要使用的shell解释器）                * Shell相关指令            * 文件命名规范：                * 文件名.sh  .sh是linux下bash shell的默认后缀        * 使用流程：            * 创建.sh文件  touch/vim            * 编写shell代码            * 执行shell脚本  脚本必须得有执行权限        * 案例：创建test.sh，实现第一个shell脚本程序，输出hello world            * 输出命令：#echo 123            * 注意：输出的内容如果包含字母和符号（不包含变量），则需要用引号包括起来，如果是纯数字可以包可以不包。            * 注意：这里在运行时一定要写成./test.sh，而不是test.sh，运行其他二进制程序也一样，直接写test.sh,Linux系统会去PATH里寻找有没有叫test.sh的，而只有/bin,/sbin,/usr/sbin等在PATH里，你的当前目录通常不在PATH里，所以写成test.sh是会找不到命令的，用./test.sh告诉系统说，就在当前目录寻找。                    3. shell进阶（重点）        1. 变量（重点）            * 在一个脚本周期内，其值可以发生改变的量就是变量。            * 一个脚本周期：一个脚本周期我们可以简单理解为当前的shell文件            * 变量是shell中不可或缺的一部分，也是最基础、最重要的组成部分。        2. 变量的定义和使用（重点）            * 先定义后使用            * 变量名的规范                * 注意：变量名后面的等号左右不能有空格，这可能和你熟悉的所有编程语言都不一样。                * 规则：                    * 命名只能使用英文字母、数字和下划线，首个字母不能以数字开头。                    * 中间不能有空格，可以使用下划线                    * 不能使用标点符号                    * 不能使用bash里的关键字（可用help命令查看保留关键字）            * 关于单双引号的问题：                * 双引号能够识别变量，双引号能够实现转义                * 单引号是不能识别变量，只会原样输出，单引号是不能转义的            * 注意：反引号（esc键下方的那个键），当在脚本中需要执行一些指令并且将执行的结果赋给变量的时候需要使用“反引号”        3. 只读变量（了解）            * 语法：readonly 变量名        4. 接收用户输入（重点）            * 语法：read =p 提示信息 变量名        5. 删除变量（了解）            * 语法：unset 变量名        6. shell脚本附带选项（重点）            * 问题：自己写的shell是否可以像内置命令一样传递一些选项呢？                * 可以的，传递方式与上述的描述是一样的，关键是怎么接收。                * 传递：                    * #./test.sh a b c                * 接收：                    * 在脚本中可以用&quot;$1&quot;来表示a，&quot;$2&quot;来表示b，以此类推</code></pre><p>​        </p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Linux&quot;&gt;&lt;a href=&quot;#Linux&quot; class=&quot;headerlink&quot; title=&quot;Linux&quot;&gt;&lt;/a&gt;Linux&lt;/h2&gt;</summary>
    
    
    
    <category term="Linux基础" scheme="http://example.com/categories/Linux%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring</title>
    <link href="http://example.com/2021/08/02/Spring/"/>
    <id>http://example.com/2021/08/02/Spring/</id>
    <published>2021-08-02T09:01:01.000Z</published>
    <updated>2021-08-12T06:48:50.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><span id="more"></span><pre><code>1. 框架怎么学：框架是一个软件，其他人写好的软件    1. 知道框架能做什么，mybatis--访问数据库，对表中的数据进行增删改查    2. 框架的语法，框架要完成一个功能，需要一定的步骤的支持的    3. 框架的内部实现，框架内部怎么做，原理是什么    4. 通过学习，可以实现一个框架2. 什么是spring        * 是一个框架，核心技术是ioc，aop，实现解耦合    * spring是一个容器，容器中存放的是java对象，需要做的是把对象放入到容器中3. 怎么使用spring    * spring是一个容器，把项目中用的对象放入到容器中    * 让容器完成对象的创建，对象之间关系的管理(属性赋值)    * 我们在程序中从容器中获取 要使用的对象4. 什么样的对象放入容器中    * dao类，service类，controller类，工具类（1.使用xml配置文件，使用&lt;bean&gt;  2.注解）    * spring中的对象默认都是单例的，在容器中叫这个名称的对象只有一个5. 不放入到spring容器中的对象    * 实体类对象，实体类数据来自数据库的    * servlet，listener，filter等6. 使用spring框架的步骤    1. 加入依赖    2. 创建类：接口，实现类，没有接口的类    3. 创建spring的配置文件，使用&lt;bean&gt;声明对象    4. 我们使用容器中的对象，通过AppliacationContext接口和它的实现类ClassPathXmlApplicationContext的方法getBean()</code></pre><p>​     </p><pre><code>一.Spring的第一个核心功能 ioc    1. IoC(Inversion of Control)：控制反转，是一个理论，概念，思想。        * 把对象的创建、赋值，管理工作都交给代码之外的容器实现，也就是对象的创建是有其它外部资源完成。            * 控制：创建对象，对象的属性赋值，对象之间的关系管理。        * 反转：把原来的开发人员管理，创建对象的权限转移给代码之外的容器实现。由容器代替开发人员管理对象。创建对象，给属性赋值。        * 正转：由开发人员在代码中，使用new 构造方法创建对象，开发人员主动管理对象。        * 容器：是一个服务器软件，一个框架(spring)    2. 为什么要使用ioc：目的就是减少对代码的改动，也能实现不同的功能，实现解耦合    3. java中创建对象有哪些方式：        * 构造方法，new Student()        * 反射        * 序列化        * 克隆        * ioc：容器创建对象        * 动态代理    4. ioc的体现：        * servlet             * 创建类继承HttpServlet            * 在web.xml 注册servlet            * 没有创建Servlet对象            * Servelt 是Tomcat服务器它给你创建的。Tomcat也称为容器                * Tomcat作为容器：里面存放的有Servlet对象，Listener，Filter对象    5. IoC的技术实现：        * DI 是ioc的技术实现        * DI（Dependency Injection）：依赖注入，只需要在程序中提供要使用的对象名称就可以，至于对象如何在容器中创建、赋值、查找都由容器内部实现。        * spring是使用di实现了ioc的功能，spring底层创建对象，使用的是反射机制。    6. di：依赖注入，表示创建对象，给属性赋值。        1. di的实现有两种：            * 在spring的配置文件中，使用标签和属性完成，叫做基于XML的di实现            * 使用spring中的注解，完成属性赋值，叫做基于注解的di实现        2. di的语法分类：            * set注入（设值注入）：spring调用类的set方法，在set方法可以实现属性的赋值，80%左右都是使用的set注入                        * 构造注入：spring调用类的有参数构造方法，创建对象。在构造方法中完成赋值。            * 自动注入：由spring根据某些规则，给引用类型完成赋值，常用的有byName，byType                3. di：给属性赋值                简单类型：spring中规定java的基本数据类型和String都是简单类型               1. set注入（设值注入）：spring调用类的set方法，你可以在set方法中完成属性赋值                 * 简单类型的set注入                    &lt;bean id=&quot;xx&quot; class&quot;yyy&quot;&gt;                    &lt;property name=&quot;属性名字&quot; value=&quot;此属性的值&quot;/&gt;                    一个property只能给一个属性赋值                    &lt;property...&gt;                    &lt;/bean&gt;                * 引用类型的set注入：spring调用类的set方法                    &lt;bean id=&quot;xxx&quot; class=&quot;yyy&quot;&gt;                    &lt;property name=&quot;属性名称&quot; ref=&quot;bean的id(对象的名称)&quot;/&gt;                    &lt;/bean&gt;                                    * 注意：需要有set方法，没有set方法是会报错的            * 此属性的值要用双引号(&quot;&quot;)包裹，这是xml文件的规则            2. 构造注入：spring调用类有参数构造方法，在创建对象的同时，在构造方法中给属性赋值。                    * 构造注入使用 &lt;constructor-arg&gt;标签                       &lt;constructor-arg&gt;标签：一个 &lt;constructor-arg&gt;表示构造方法一个参数。                       &lt;constructor-arg&gt;标签属性：                            name:表示构造方法的形参名                            index：表示构造方法的参数的位置，参数从左往右位置是0，1，2的顺序                            value：构造方法的形参类型是简单类型的，使用value                            ref：构造方法的形参是引用类型的，使用ref                        3. 自动注入：由spring根据某些规则，给引用类型完成赋值，常用的有byName，byType                * byName：按名称注入，java类中引用类型的属性名和spring容器中的【id】一样，数据类型一样。这样的bean赋值给引用类型                * byType：按类型注入，java类中引用类型的叫【数据类型】和spring容器中bean的【class】是同源关系，这样的bean能够赋值给引用类型    7. 常用注解        1. @Component            * 创建对象的，等同于&lt;bean&gt;的功能 属性：value 就是对象的名称，也就是bean的id值            * value的值是唯一的，创建的对象在整个spring容器中就一个            * @Component(value = &quot;myStudent&quot;)等同于&lt;bean id=&quot;myStudent&quot; class=&quot;com.bjpowernode.ba01.Student&quot;/&gt;                2. spring中和@Component功能一致，创建对象的注解还有：              1. @Repository（用在持久层类的上面）：放在dao的实现类上面表示创建dao对象，dao对象是能访问数据库的              2. @Service（用在业务层类的上面）：放在service的实现类上面，创建service对象，service对象是做业务处理的，可以有事务等功能的。              3. @Controller（用在控制器的上面）：放在控制器(处理器)类的上面，创建控制器对象的，控制器对象，能够接受用户提交的参数，显示请求的处理结果。                  3. @Value:简单类型的属性赋值              * 属性：value 是string类型的，表示简单类型的属性值              * 位置：                  * 在属性定义的上面，无需set方法，推荐使用                    * 在set方法的上面        4. @Autowired:spring框架中引用类型的赋值注解，支持byName，byType，默认是byType            * 位置：                  * 在属性定义的上面，无需set方法，推荐使用                    * 在set方法的上面            * 如果要是用byName，需要做的是：                * 在属性上面加入@Autowired                * 在属性上面加入@Qualifier(value=&quot;bean的id&quot;):表示使用指定名称的bean完成赋值            * 属性：required，是一个boolean类型的，默认true                * required = true：表示引用类型赋值失败，程序报错，并且终止运行。                * required = false：引用类型如果赋值失败，程序正常执行，引用类型是null                * 推荐使用true 可以帮助我们检查程序是否有错                5. @Resource:jdk中的注解            1. spring框架提供了对这个注解的功能支持，可以使用它给的引用类型赋值            2. 使用的也是自动注入原理，支持byName，buType，默认是byName                * 默认是byName：先使用byName自动注入，如果byName赋值失败，再使用byType            3. 位置：                * 在属性定义的上面，无需set方法，推荐使用                    * 在set方法的上面                6. 注解的使用步骤：            1. 加入依赖：spring-context，间接加入spring-aop            2. 在类中加入注解            3. 在spring的配置文件中，加入组件扫描器的标签  &lt;context:component-scan base-package=&quot;包名&quot;/&gt;        8. ioc能够实现解耦合：        * ioc能够实现业务对象之间的解耦合，例如service和dao对象之间的解耦合</code></pre><p>​<br>​    </p><pre><code>二.spring的第二个核心功能aop    1. 动态代理        * 实现方式;            1. jdk动态代理                * 使用jdk中的Proxy，Method，InvocationHandler创建代理对象                * jdk动态代理要求目标类必须实现接口            2. cglib动态代理                * 第三方的工具库，创建代理对象，原理是继承。通过继承目标类，创建子类，子类就是代理对象。                * 要求目标类不能是final的，方法不能是final的        2. 动态代理的作用        1. 在目标类源代码不改变的情况下，增加功能        2. 减少代码的重复        3. 专注于业务逻辑        4. 解耦合，让你的业务功能和日志，事务非业务功能分离                * 什么时候考虑用aop技术            * 当你要给一个系统中存在的类修改功能，但是原有类的功能不完善，但是你没有源代码，使用aop就增加功能            * 你要给项目中的多个类，增加一个相同的功能，使用aop            * 给业务方法增加事务，日志输出    3. Aop：面向切面编程，基于动态代理的，可以使用jdk，cglib两种代理方式。        * Aop就是动态代理的规范化，把动态代理的实现步骤，方式都定义好，让开发人员用一种统一的方式，使用动态代理。                      4. AOP(Aspect Orient Programming) 面向切面编程          * Aspect：切面，给你的目标类增加的功能，就是切面。像上面用的日志，事务都是切面              * 切面的特点：一般都是非业务方法，独立使用的。                * 怎么理解面向切面编程            * 需要在分析项目功能时，找出切面            * 合理的安排切面的执行时间(在目标方法之前，还是目标方法之后)            * 合理的安全切面执行的位置，在哪个类，哪个方法增加增强功能                    * 术语：            * Aspect：切面，表示增强的功能，就是一堆代码，完成某一个功能。非业务功能                * 常见的业务功能有日志，事务，统计信息等            * JoinPoint：连接点，连接业务方法和切面的位置。就是某类中的业务方法            * Pointcut：切入点，指多个连接点方法的集合。多个方法            * 目标对象：给哪个类的方法增加功能，这个类就是目标对象            * Advice：通知，通知表示切面功能执行的时间。        * 切面的三要素：            1. 切面的功能代码，切面干什么的            2. 切面的执行位置，使用Pointcut表示切面执行的位置            3. 切面的执行时间，使用Advice表示时间，在目标方法之前，还是目标方法之后。    5. aop的实现        * aop是一个规范，是动态代理的一个规范化，一个标准        * aop的技术实现框架：            1. spring：spring在内部实现了aop规范，能有aop工作。                * spring主要在事务处理时使用aop                * 我们项目开发中很少使用spring的aop实现。因为spring的aop比较笨重。            2. aspectJ：一个开源的专门做aop的框架。spring框架中集成了aspectJ框架，通过spring就能使用aspectJ的功能                * aspectJ框架实现aop有两种方式：                    1. 使用xml的配置文件：配置全局事务                    2. 使用注解，我们在项目中要做aop功能，一般都使用注解，aspectJ有5个注解。    6. aspectj框架的使用        1. 表示切面执行时间，使用的通知注解            * @Before：前置通知，在目标方法之前先执行切面的功能        2. 表示切面位置的切入点表达式：execution(访问修饰符 返回值 包名.类名.方法名称(方法的参数) 异常）)            7. 常用注解：        1. @Aspect: 是aspectj框架中的注解            * 作用：表示当前类是切面类。            * 切面类：是用来给业务方法增加功能的类，在这个类中有切面的功能代码            * 位置：在类定义的上面            * 定义方法，方法是实现切面功能的            * 方法的定义要求：                * 公共方法 public                * 方法没有返回值                * 方法名称自定义                * 方法可以有参数，也可以没有参数。如果没有参数，参数不是自定义的，有几个参数类型可以使用。                        2. @Before：前置通知注解            * 属性：value，是切入点表达式，表示切面的功能执行的位置。            * 位置：在方法的上面            * 特点：                * 在目标方法之前先执行的                * 不会改变目标方法的执行结果                * 不会影响目标方法的执行            指定通知方法中的参数：JoinPoint                * JoinPoint：业务方法，要加入切面功能的业务方法                * 作用是：可以在通知方法中获取方法执行时的信息，例如方法名称，方法的实参。                * 如果你的切面功能中需要用到方法的信息，就加入JoinPoint                * 这个JoinPoint参数的值是由框架赋予，必须是第一个位置的参数        3. @AfterReturning: 后置通知            * 后置通知定义方法，方法是实现切面功能的            * 方法的定义要求：                * 公共方法 public                * 方法没有返回值                * 方法名称自定义                * 方法是有参数的,推荐是Object，参数名自定义            * 属性：1.value： 切入点表达式  2。returning 自定义的变量,表示目标方法的返回值的。            * 位置：在方法定义的上面            * 特点：                * 在目标方法之后执行的                * 能够获取到目标方法的返回值，可以根据这个返回值做不同的处理功能                * 可以修改这个返回值        4. @Around: 环绕通知            * 环绕通知方法的定义格式：                * public                * 必须有一个返回值，推荐使用Object                * 方法名称自定义                * 方法有参数，固定的参数 ProceedingJoinPoint            * 属性：value 切入点表达式            * 位置：在方法的定义上面            * 特点：                * 它是功能最强的通知                * 在目标方法的前和后都能增强功能                * 控制目标方法是否被调用执行                * 修改原来的目标方法的执行结果。影响最后的调用结果                        * 环绕通知，等同于jdk动态代理的 InvocationHandler接口                    * 参数：ProceedingJoinPoint 就等同于 Method            * 作用：执行目标方法            * 返回值：就是目标方法的执行结果，可以被修改            * 环绕通知：经常做事务，在目标方法之前开启事务，执行目标方法，在目标方法之后提交事务三. 把mybatis框架和spring集成在一起，像一个框架一样使用    1. 用的技术是：ioc        * 为什么用ioc：            * 因为ioc能创建对象，可以把mybatis框架中的对象交给spring统一创建            * 开发人员从spring中获取对象，就不用同时面对两个或多个框架了，就面对一个spring    2. mybatis使用步骤，对象        1. 定义dao接口，StudentDao        2. 定义mapper文件 StudentDao.xml        3. 定义mybatis的主配置文件 mybatis.xml        4. 创建dao的代理对象            * StudentDao dao = sqlSession.getMapper(StudentDao.class);            *  List&lt;Student&gt; students = dao.selectStudent();        5. 要使用dao对象，需要使用getMapper()方法            1. 获取SqlSession对象，需要使用SqlSessionFactory的openSession()方法            2. 创建SqlSessionFactory对象。通过读取mybatis的主配置文件，能创建SqlSessionFactory对象            * 需要使SqlSessionFactory对象，使用Factory能获取SqlSession，有了SqlSession就能有dao            * 目的就是获取到对象Factory创建需要读取主配置文件            * 注意：我们会使用独立的连接池替换mybatis默认的自带的，把连接池类也交给spring创建            * 主配置文件：                * 数据库信息                * mapper文件的位置        3. 通过以上的说明，我们需要让spring创建以下对象        1. 独立的连接池类的对象，使用阿里的druid连接池            * 数据源DataSource        2. SqlSessionFactory对象            * 使用的SqlSessionFactoryBean在内部创建的SqlSessionFactory        3. 创建dao对象            * dao代理对象，使用的MapperScannConfigure，在这个类的内部，调用getMapper()，创建接口的Dao对象                * 需要学习就是上面三个对象的创建语法，使用xml的bean标签四. spring的事务处理    1. 什么是事务        * 事务是一组sql语句的集合，集合中有多条sql语句，可能是insert，update，select等        * 我们希望这些多个sql语句都能成功，或者失败，这些sql语句的执行是一致的，作为一个整体执行    2. 什么时候想到使用事务        * 当我的操作涉及多个表，或者是多个sql语句的insert，update，delete。        * 需要保证这些语句都是成功才能完成我的功能，或者都失败，保证操作是符合要求的。            * 在java代码中写程序，控制事务，此时事务应该放在哪里？            * service类的业务方法上，因为业务方法会调用多个dao方法，执行多个sql语句    3. 通常使用JDBC访问数据库，还是mybatis访问数据库怎么处理事务        * JDBC访问数据库，处理事务  Connection conn;conn.commit();conn.rollback();        * mybatis访问数据库，处理事务 SqlSession.commit(); SqlSession.rollback();        4. 3问题中事务的处理方式，有什么不足        1. 不同的数据库访问技术，处理事务的对象，方法不同，需要了解不同数据库访问技术使用事务的原理        2. 掌握多种数据库中事务的处理逻辑。什么时候提交事务，什么时候回顾事务        3. 处理事务的多种方法        * 总结：就是多种数据库的访问技术，有不同的事务处理的机制，对象，方法        5. 怎么解决不足        * spring提供一种处理事务的统一模型，能使用统一的步骤，方式完成多种不同数据库访问技术的事务处理    6. 处理事务需要怎么做，做什么        * spring处理事务的模型，使用的步骤都是固定的。把事务使用的信息提供给spring就可以了                1. 内部事务提交，回滚事务，使用的事务管理器对象，代替你完成commit，rollback        2. 事务管理器是一个接口和它的众多实现类            * 接口：PlatformTransactionManager，定义了事务重要方法 commit，rollback            * 实现类：spring把每一种数据库访问技术对应的事务处理类都创建好了                * mybatis访问数据库---spring创建好的是DataSourceTransactionManager                * hibernate访问数据库---spring创建好的是HibernateTransactionManagr            * 怎么使用：你需要告诉spring 你用的是哪种数据库的访问技术，怎么告诉spring呢？                * 声明数据库访问技术对应的事务管理器实现类，在spring的配置文件中使用&lt;bean&gt;声明就可以了                3. 你的业务方法需要什么样的事务，说明需要事务的类型            1. 说明方法需要的事务：                * 事务的隔离级别                * 事务的超时时间                    * 表示一个方法最长的执行时间，如果方法执行时超过了时间，事务就会回滚。                    * 单位是秒，整数值，默认是-1                * 事务的传播行为                    * 控制业务方法是不是有事务的，是什么样的事务的                    * 表示你的业务方法调用时，事务在方法之间是如何使用的        4. 事务提交事务，回滚事务的时机            1. 当你的业务方法，执行成功，没有异常抛出，当方法执行完毕，spring在方法执行后提交事务。事务管理器commit            2. 当你的业务方法抛出运行时异常或ERROR,spring执行回滚，调用事务管理器rollback                * 运行时异常的定义：RuntimeException 和它的子类都是运行时异常            3. 当你的业务方法抛出非运行异常时，主要是受查异常时，提交事务                * 受查异常：在你写代码中，必须处理的异常。例如IOException，SQLException    7. 总结spring事务        1. 管理事务的是 事务管理器和它的实现类        2. spring的事务是一个统一模型            * 指定要使用的事务管理器的类型，使用&lt;bean&gt;            * 指定哪些类，哪些方法需要加入事务的功能            * 指定方法需要的隔离级别，传播行为，超时    8. spring框架中提供的事务处理方案        1. 适合中小项目使用的，注解方案            * spring框架自己用aop实现给业务方法增加事务的功能，使用@Transactional注解增加事务。            * @Transactional注解是spring框架自己注解，方法public方法的上面，表示当前方法具有事务            * 可以给注解的属性赋值，表示具体的隔离级别，传播行为，异常信息等等                2. 使用@Transactional的步骤：            1. 需要声明事务管理器对象                * &lt;bean id=&quot;xx&quot; class=&quot;DataSourceTransactionManager&quot;&gt;            2. 开启事务注解驱动，告诉spring框架，我要使用注解的方式管理事务。                * spring使用aop机制，创建@Transactional所在的类的代理对象，给方法加入事务的功能。                * spring给业务方法加入事务:                    * 在你的业务方法执行之前，先开启事务，在业务方法之后提交或回滚事务，使用aop的环绕通知            3. 在你的方法的上面加入@Transactional                        * rollbackFor:表示发生异常一定回滚                  * 处理逻辑是：                   1）spring框架会首先检查方法抛出的异常是不是在rollbackFor的属性值中                       如果异常在rollbackFor列表中，不管是什么类型的异常，一定回滚                   2）如果你的抛出的异常不在rollbackFor列表中，spring会判断异常是不是RuntimeException，                       如果是一定回滚。                            * @Transactional(                propagation = Propagation.REQUIRED,                isolation = Isolation.DEFAULT,                readOnly = false,                rollbackFor = &#123;                        NullPointerException.class, NotEnoughException.class                &#125;            4. @Transactional 可以直接使用，不需要上面的那些指定            * 使用的是事务控制的默认值，默认的传播行为是REQUIRED，默认的隔离级别DEFAULT            * 默认抛出运行时异常，回滚事务        3. 适合大型项目            * 有很多的类，方法，需要大量的配置事务，使用aspectj框架功能            * 在spring配置文件中声明类，方法需要的事务。这种方式业务方法和事务配置完全分离。            * 实现步骤：都是在xml文件中实现                1. 要使用的是aspectj框架，需要加入依赖                    &lt;!--aspectj依赖--&gt;                    &lt;dependency&gt;                      &lt;groupId&gt;org.springframework&lt;/groupId&gt;                      &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;                      &lt;version&gt;5.2.5.RELEASE&lt;/version&gt;                    &lt;/dependency&gt;                2. 声明事务管理器对象                    * &lt;bean id=&quot;xx&quot; class=&quot;DataSourceTransactionManager&quot;&gt;                3. 声明方法需要的事务类型（配置方法的事务属性【隔离级别，传播行为，超时】）                4. 配置aop：指定哪些类要创建代理。五.    web项目中怎么使用容器对象    1. 做的是javase项目有main方法的，执行代码是执行main方法的，在main里面创建的容器对象        *  ApplicationContext ctx = new ClassPathXmlApplicationContext(config);    2. web项目是在tomcat服务器上运行的。tomcat一启动，项目一直运行的    3. 需求：        * web项目中容器对象只需要创建一次，把容器对象放入到全局作用域ServletContext中    4. 怎么实现：        * 使用监听器 当全局作用域对象被创建时，创建容器 存入ServletContext        * 监听器作用：            1. 创建容器对象，执行ApplicationContext ctx = new ClassPathXmlApplicationContext(config);            2. 把容器对象放入到ServletContext，ServletContext.setAttribute(key,ctx)        * 监听器可以自己创建，也可以使用框架中提供好的ContextLoaderListener        * ApplicationContext：javase项目中使用的容器对象        * WebApplicationContext：web项目中使用的容器对象        *  servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context); 把创建的容器对象，放入到全局作用域        *  key：WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE        *  value：this.context        5. 配置监听器        * 目的是创建容器对象，创建了容器对象，就能把spring.xml配置文件中的所有对象都能创建好        * 用户发起请求就可以直接使用对象了。</code></pre><p>​     </p><p>​<br>​            </p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h2&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java 框架" scheme="http://example.com/tags/Java-%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
</feed>
