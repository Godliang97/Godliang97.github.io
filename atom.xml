<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-08-18T08:42:05.688Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>一只栗子球</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MyBatis-Plus</title>
    <link href="http://example.com/2021/08/18/mybatis-plus/"/>
    <id>http://example.com/2021/08/18/mybatis-plus/</id>
    <published>2021-08-18T02:42:24.000Z</published>
    <updated>2021-08-18T08:42:05.688Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MP"><a href="#MP" class="headerlink" title="MP"></a>MP</h3><span id="more"></span><h2 id="MyBatis-Plus"><a href="#MyBatis-Plus" class="headerlink" title="MyBatis-Plus"></a>MyBatis-Plus</h2><h3 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在持久层框架中mybatis应用比较多，而且比重在逐渐上升。通常项目的组合是SSM。mybatis之所以火，是因为它的灵活，使用方便，优化比较容易。</span><br><span class="line">mybatis直接执行sql语句，sql语句是写在xml文件中，使用mybatis需要多个xml配置文件，在一定程度上比较繁琐。一般数据库的操作都要涉及到CURD。</span><br><span class="line">mybatis-plus是在mybatis上的增强，减少了xml的配置，几乎不用编写xml就可以做到单表的CURD，很是方便，极大的提高了开发的效率。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="一、什么是mybatis-plus"><a href="#一、什么是mybatis-plus" class="headerlink" title="一、什么是mybatis-plus"></a>一、什么是mybatis-plus</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mybatis-Plus(简称MP)是一个mybatis的增强工具，在mybatis的基础上只做了增强不做改变，为简化开发，提高效率而生。</span><br><span class="line">Mybatis-Plus在Mybatis之上套了一层外衣，单表CURD的操作几乎都可以由Mybaits-Plus代替执行。而且提供了各种查询方式，分页行为。作为使用者无需编写xml直接调用Mybatis-Plus提供的API即可。</span><br></pre></td></tr></table></figure><h3 id="二、快速开始"><a href="#二、快速开始" class="headerlink" title="二、快速开始"></a>二、快速开始</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">几分钟就可以快速上手MP，前提是需要熟悉mybatis，spring或springboot，maven，掌握lambda表达式更能提高效率！</span><br><span class="line">准备环境：</span><br><span class="line">拥有java开发环境以及相应的 IDE</span><br><span class="line">熟悉SpringBoot</span><br><span class="line">熟悉Maven</span><br></pre></td></tr></table></figure><h4 id="1-准备数据表"><a href="#1-准备数据表" class="headerlink" title="1.准备数据表"></a>1.准备数据表</h4><p><img src="https://pic.imgdb.cn/item/611cc7964907e2d39c546017.png"></p><h4 id="2-idea中配置maven"><a href="#2-idea中配置maven" class="headerlink" title="2.idea中配置maven"></a>2.idea中配置maven</h4><p><img src="https://pic.imgdb.cn/item/611cc7b34907e2d39c54c059.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设置maven本地仓库地址：</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc7414907e2d39c533ce7.png"></p><h4 id="3-创建springboot应用"><a href="#3-创建springboot应用" class="headerlink" title="3.创建springboot应用"></a>3.创建springboot应用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用Spring Initializr快速初始化一个SpringBoot工程</span><br><span class="line">idea中File-New Project 选择 Spring Initializr 后填写项目信息，创建工程</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foefmT"><img src="https://z3.ax1x.com/2021/08/18/foefmT.png" alt="foefmT.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">项目信息：</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foeotJ"><img src="https://z3.ax1x.com/2021/08/18/foeotJ.png" alt="foeotJ.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择依赖项目MySQL</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foeh0U"><img src="https://z3.ax1x.com/2021/08/18/foeh0U.png" alt="foeh0U.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建好的项目结构：</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foeIk4"><img src="https://z3.ax1x.com/2021/08/18/foeIk4.png" alt="foeIk4.png"></a></p><h4 id="4、pom-xml"><a href="#4、pom-xml" class="headerlink" title="4、pom.xml"></a>4、pom.xml</h4><p><a href="https://imgtu.com/i/fowp59"><img src="https://z3.ax1x.com/2021/08/18/fowp59.png" alt="fowp59.png"></a></p><h4 id="5、application-yml添加数据库配置"><a href="#5、application-yml添加数据库配置" class="headerlink" title="5、application.yml添加数据库配置"></a>5、application.yml添加数据库配置</h4><p><a href="https://imgtu.com/i/fodvbF"><img src="https://z3.ax1x.com/2021/08/18/fodvbF.png" alt="fodvbF.png"></a></p><h4 id="6、实体entity"><a href="#6、实体entity" class="headerlink" title="6、实体entity"></a>6、实体entity</h4><p><a href="https://imgtu.com/i/fowCCR"><img src="https://z3.ax1x.com/2021/08/18/fowCCR.png" alt="fowCCR.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@TableId 设置主键，idType.AUTO使用自动增长产生主键</span><br></pre></td></tr></table></figure><h4 id="7、mapper"><a href="#7、mapper" class="headerlink" title="7、mapper"></a>7、mapper</h4><p><a href="https://imgtu.com/i/fowSUJ"><img src="https://z3.ax1x.com/2021/08/18/fowSUJ.png" alt="fowSUJ.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">插入Mybatis Plus中的BaseMapper，在UserMapper中使用MP中的方法，实现CURD</span><br></pre></td></tr></table></figure><h4 id="8、添加-MapperScan扫描Mapper文件夹"><a href="#8、添加-MapperScan扫描Mapper文件夹" class="headerlink" title="8、添加@MapperScan扫描Mapper文件夹"></a>8、添加@MapperScan扫描Mapper文件夹</h4><p><a href="https://imgtu.com/i/fodzE4"><img src="https://z3.ax1x.com/2021/08/18/fodzE4.png" alt="fodzE4.png"></a></p><h4 id="9、测试"><a href="#9、测试" class="headerlink" title="9、测试"></a>9、测试</h4><p><a href="https://imgtu.com/i/fowP81"><img src="https://z3.ax1x.com/2021/08/18/fowP81.png" alt="fowP81.png"></a></p><h3 id="三、配置mybatis日志"><a href="#三、配置mybatis日志" class="headerlink" title="三、配置mybatis日志"></a>三、配置mybatis日志</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">application.yml</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/fowigx"><img src="https://z3.ax1x.com/2021/08/18/fowigx.png" alt="fowigx.png"></a></p><h3 id="四：CURD基本用法"><a href="#四：CURD基本用法" class="headerlink" title="四：CURD基本用法"></a>四：CURD基本用法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CURD的操作来自BaseMapper中的方法。BaseMapper中共有17个方法。CURD操作都有多个不同的参数。继承BaseMapper中的方法。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BaseMapper方法列表：</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/fowAKK"><img src="https://z3.ax1x.com/2021/08/18/fowAKK.png" alt="fowAKK.png"></a></p><h4 id="1、Insert"><a href="#1、Insert" class="headerlink" title="1、Insert"></a>1、Insert</h4><p><a href="https://imgtu.com/i/fowFv6"><img src="https://z3.ax1x.com/2021/08/18/fowFv6.png" alt="fowFv6.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注：Insert返回值int，数据插入成功的行数，成功的记录数。getId()获取主键值</span><br></pre></td></tr></table></figure><h4 id="2、Update"><a href="#2、Update" class="headerlink" title="2、Update"></a>2、Update</h4><p><a href="https://imgtu.com/i/fowEDO"><img src="https://z3.ax1x.com/2021/08/18/fowEDO.png" alt="fowEDO.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意：null的字段不更新</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/fowVbD"><img src="https://z3.ax1x.com/2021/08/18/fowVbD.png" alt="fowVbD.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日志：</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foweVe"><img src="https://z3.ax1x.com/2021/08/18/foweVe.png" alt="foweVe.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">email没有赋值，是null，所以没有出现在set语句中；age有默认0，被更新了。</span><br></pre></td></tr></table></figure><h4 id="3、Delete"><a href="#3、Delete" class="headerlink" title="3、Delete"></a>3、Delete</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">删除有个多个方法：</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/fown5d"><img src="https://z3.ax1x.com/2021/08/18/fown5d.png" alt="fown5d.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1)deleteById:按主键删除</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/fowmUH"><img src="https://z3.ax1x.com/2021/08/18/fowmUH.png" alt="fowmUH.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(2)根据Map中条件删除</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/fowKPA"><img src="https://z3.ax1x.com/2021/08/18/fowKPA.png" alt="fowKPA.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注：删除条件封装在Map中，key是列名，value是值，多个key之间and连接</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日志：</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/fowM8I"><img src="https://z3.ax1x.com/2021/08/18/fowM8I.png" alt="fowM8I.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(3)批量删除</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/fowQ2t"><img src="https://z3.ax1x.com/2021/08/18/fowQ2t.png" alt="fowQ2t.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注：list集合的创建可以使用lambda表达式，也可以使用add()。把要删除的id防暑List，传给deleteBatch()。批量操作使用 in(...)</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/fowlxP"><img src="https://z3.ax1x.com/2021/08/18/fowlxP.png" alt="fowlxP.png"></a></p><h4 id="4、Select"><a href="#4、Select" class="headerlink" title="4、Select"></a>4、Select</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1)根据主键id查询</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/fow3Kf"><img src="https://z3.ax1x.com/2021/08/18/fow3Kf.png" alt="fow3Kf.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注：没有查询结果，不会报错</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日志：</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/fow8r8"><img src="https://z3.ax1x.com/2021/08/18/fow8r8.png" alt="fow8r8.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(2)批量查询记录</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/fowGqS"><img src="https://z3.ax1x.com/2021/08/18/fowGqS.png" alt="fowGqS.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注：根据id查询记录，把需要查询的多个id存入到List，调用selectBatchIds(),传入List，返回值也是List。查询条件是 from user where in id(1,2)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(3)使用Map的条件查询</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/fowYVg"><img src="https://z3.ax1x.com/2021/08/18/fowYVg.png" alt="fowYVg.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">把查询的条件字段put到Map，key是字段，value是条件值。多个条件是and连接。调用selectByMap(),传入Map作为参数，返回值是List集合。</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/fowtaQ"><img src="https://z3.ax1x.com/2021/08/18/fowtaQ.png" alt="fowtaQ.png"></a></p><h3 id="五、ActiveRecord（AR）"><a href="#五、ActiveRecord（AR）" class="headerlink" title="五、ActiveRecord（AR）"></a>五、ActiveRecord（AR）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ActiveRecord是什么：</span><br><span class="line">1.每一个数据库表对应创建一个类，类的每一个对象实例对应于数据库中表的一行记录；通常表的每一个字段在类中都有相应的Field</span><br><span class="line">2.ActiveRecord负责把自己持久化。在ActiveRecord中封装了对数据库的访问，通过对象自己实现CURD，实现优雅的数据库操作</span><br><span class="line">3.ActiveRecord也封装了部分业务逻辑。可以作为业务对象使用。</span><br></pre></td></tr></table></figure><h4 id="1、AR之Insert"><a href="#1、AR之Insert" class="headerlink" title="1、AR之Insert"></a>1、AR之Insert</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1)dept表设计</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/fowN5j"><img src="https://z3.ax1x.com/2021/08/18/fowN5j.png" alt="fowN5j.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(2)entity实体类  必须继承Model，Model定义了表的CURD方法，Dept属性名和列名是一样的。</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/fowaPs"><img src="https://z3.ax1x.com/2021/08/18/fowaPs.png" alt="fowaPs.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(3)mapper</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/fowdGn"><img src="https://z3.ax1x.com/2021/08/18/fowdGn.png" alt="fowdGn.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不使用mapper也需要定义这个类，MP通过mapper获取到表的结构；不定义时，MP报错无法获取表的结构信息</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(4)测试AR</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foww2q"><img src="https://z3.ax1x.com/2021/08/18/foww2q.png" alt="foww2q.png"></a></p><h4 id="2、AR之Update"><a href="#2、AR之Update" class="headerlink" title="2、AR之Update"></a>2、AR之Update</h4><p><a href="https://imgtu.com/i/fow0x0"><img src="https://z3.ax1x.com/2021/08/18/fow0x0.png" alt="fow0x0.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建实体对象，对要更新的属性赋值，null的属性不更新，根据主键更新记录。返回值是boolean，true更新成功，没有更新记录是false。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日志：</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/fowDMV"><img src="https://z3.ax1x.com/2021/08/18/fowDMV.png" alt="fowDMV.png"></a></p><h4 id="3、AR之Delete"><a href="#3、AR之Delete" class="headerlink" title="3、AR之Delete"></a>3、AR之Delete</h4><p><a href="https://imgtu.com/i/fowsqU"><img src="https://z3.ax1x.com/2021/08/18/fowsqU.png" alt="fowsqU.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用主键作为删除条件，deleteByID参数是主键值，sql语句条件是where id=1。返回值始终是true。通过源码查看：</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/fowrrT"><img src="https://z3.ax1x.com/2021/08/18/fowrrT.png" alt="fowrrT.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">删除返回值条件是result&gt;=0，只要sql语法是正确的，返回值是true。和删除记录的数量无关。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日志：</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foqvLV"><img src="https://z3.ax1x.com/2021/08/18/foqvLV.png" alt="foqvLV.png"></a></p><h4 id="4、AR之Select"><a href="#4、AR之Select" class="headerlink" title="4、AR之Select"></a>4、AR之Select</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1)对象调用selectById()</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foqzZT"><img src="https://z3.ax1x.com/2021/08/18/foqzZT.png" alt="foqzZT.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象提供主键值，调用selectById()无参数，使用id=2作为查询条件，返回值是查询的结果对象；没有查询到对象，返回是null；不提供主键id值,会报错。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(2)selectById(主键)</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foLSdU"><img src="https://z3.ax1x.com/2021/08/18/foLSdU.png" alt="foLSdU.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建对象，不设置id主键值，selectById的参数是查询条件，和对象的属性值无关。返回值是对象结果，id不存在返回null。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(3)其他方法</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foqjs0"><img src="https://z3.ax1x.com/2021/08/18/foqjs0.png" alt="foqjs0.png"></a></p><h3 id="六、表和列"><a href="#六、表和列" class="headerlink" title="六、表和列"></a>六、表和列</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">主键、TableName、TableId</span><br></pre></td></tr></table></figure><h4 id="1、主键类型"><a href="#1、主键类型" class="headerlink" title="1、主键类型"></a>1、主键类型</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">IdType枚举类，主键定义如下：</span><br><span class="line">1.none 没有主键</span><br><span class="line">2.auto 自动增长(mysql,sql server)</span><br><span class="line">3.input 手工输入</span><br><span class="line">4.id_worker 实体类</span><br><span class="line">5.id_worker_str 实体类使用 String id，表和列使用 varchar 50</span><br><span class="line">6.uuid 实体类使用 String id，列使用varchar 50</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id_worker:Twitter 雪花算法-分布式ID</span><br></pre></td></tr></table></figure><h4 id="2、指定表名"><a href="#2、指定表名" class="headerlink" title="2、指定表名"></a>2、指定表名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">定义实体类，默认的表名和实体类同名；如果不一致，在实体类定义上面使用@TableName说明表名称。</span><br><span class="line">例如：@TableName(value=&quot;数据库表名&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">步骤：</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1)表</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foL1SA"><img src="https://z3.ax1x.com/2021/08/18/foL1SA.png" alt="foL1SA.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(2)entity</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foL3QI"><img src="https://z3.ax1x.com/2021/08/18/foL3QI.png" alt="foL3QI.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(3)mapper</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foLMJH"><img src="https://z3.ax1x.com/2021/08/18/foLMJH.png" alt="foLMJH.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(4)测试 </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注入mapper对象</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foLQWd"><img src="https://z3.ax1x.com/2021/08/18/foLQWd.png" alt="foLQWd.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert记录：</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foLKFe"><img src="https://z3.ax1x.com/2021/08/18/foLKFe.png" alt="foLKFe.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日志：</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foLBSs"><img src="https://z3.ax1x.com/2021/08/18/foLBSs.png" alt="foLBSs.png"></a></p><h4 id="3、指定列名"><a href="#3、指定列名" class="headerlink" title="3、指定列名"></a>3、指定列名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1)表</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foLdYQ"><img src="https://z3.ax1x.com/2021/08/18/foLdYQ.png" alt="foLdYQ.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(2)entity</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foLwWj"><img src="https://z3.ax1x.com/2021/08/18/foLwWj.png" alt="foLwWj.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(3)mapper</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foLaFg"><img src="https://z3.ax1x.com/2021/08/18/foLaFg.png" alt="foLaFg.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(4)测试</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foLNTS"><img src="https://z3.ax1x.com/2021/08/18/foLNTS.png" alt="foLNTS.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日志：</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foLbTO"><img src="https://z3.ax1x.com/2021/08/18/foLbTO.png" alt="foLbTO.png"></a></p><h4 id="4、驼峰命名"><a href="#4、驼峰命名" class="headerlink" title="4、驼峰命名"></a>4、驼峰命名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列名使用下划线，属性名是驼峰命名方式。MyBatis默认支持这种规则</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1)定义表</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foLH0K"><img src="https://z3.ax1x.com/2021/08/18/foLH0K.png" alt="foLH0K.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(2)entity</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foLLkD"><img src="https://z3.ax1x.com/2021/08/18/foLLkD.png" alt="foLLkD.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(3)mapepr</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foL7m6"><img src="https://z3.ax1x.com/2021/08/18/foL7m6.png" alt="foL7m6.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(4)测试</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foLoOx"><img src="https://z3.ax1x.com/2021/08/18/foLoOx.png" alt="foLoOx.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日志：</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foO9nP"><img src="https://z3.ax1x.com/2021/08/18/foO9nP.png" alt="foO9nP.png"></a></p><h3 id="七、自定义sql"><a href="#七、自定义sql" class="headerlink" title="七、自定义sql"></a>七、自定义sql</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.表定义</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foOSXt"><img src="https://z3.ax1x.com/2021/08/18/foOSXt.png" alt="foOSXt.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.创建实体</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foOP78"><img src="https://z3.ax1x.com/2021/08/18/foOP78.png" alt="foOP78.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.创建mapper</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foLz6I"><img src="https://z3.ax1x.com/2021/08/18/foLz6I.png" alt="foLz6I.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4.新建sql映射xml文件</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foLx1A"><img src="https://z3.ax1x.com/2021/08/18/foLx1A.png" alt="foLx1A.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5.配置xml文件位置</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">application.yml</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foOUnx"><img src="https://z3.ax1x.com/2021/08/18/foOUnx.png" alt="foOUnx.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6.测试</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foOJ39"><img src="https://z3.ax1x.com/2021/08/18/foOJ39.png" alt="foOJ39.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日志：</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foOtj1"><img src="https://z3.ax1x.com/2021/08/18/foOtj1.png" alt="foOtj1.png"></a></p><h3 id="八、分页和查询"><a href="#八、分页和查询" class="headerlink" title="八、分页和查询"></a>八、分页和查询</h3><h4 id="1、查询构造器：Wrapper"><a href="#1、查询构造器：Wrapper" class="headerlink" title="1、查询构造器：Wrapper"></a>1、查询构造器：Wrapper</h4><p><a href="https://imgtu.com/i/foOYcR"><img src="https://z3.ax1x.com/2021/08/18/foOYcR.png" alt="foOYcR.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QueryWrapper(LambdaQueryWrapper)和UpdateWrapper(LamdbaUpdateWrapper)的父类用于生成sql的where条件，entity属性也用于生成sql的where。MP3.x开始支持lambda表达式，LambdaQueryWrapper，LamdbaUpdateWrapper支持lambda表达式的构造查询条件。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1)QueryWrapper:查询条件封装类</span><br><span class="line">方法：select   说明：设置查询字段 select 后面的内容</span><br><span class="line">2)UpdateWrapper:更新条件封装类</span><br><span class="line">方法：set说明：设置要更新的字段，MP拼接sql语句</span><br><span class="line"> setsql       参数是sql语句，MP不在处理语句</span><br></pre></td></tr></table></figure><h4 id="2、查询"><a href="#2、查询" class="headerlink" title="2、查询"></a>2、查询</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student表：初始数据</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/foOG9J"><img src="https://z3.ax1x.com/2021/08/18/foOG9J.png" alt="foOG9J.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1)allEq</span><br><span class="line">以mapper为参数条件</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a)条件:name 是张三，age是22</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc0954907e2d39c3a5f98.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日志：</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc0954907e2d39c3a5fa6.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b)查询条件有 null</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc0954907e2d39c3a5fae.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">true日志：</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc0954907e2d39c3a5fc9.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">false日志：</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc0954907e2d39c3a5fd8.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2)eq 等于=</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc13b4907e2d39c3cd154.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日志：</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc13b4907e2d39c3cd15d.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3)ne 不等于</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc13b4907e2d39c3cd168.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日志：</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc13b4907e2d39c3cd17d.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4)gt 大于</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc13b4907e2d39c3cd18d.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日志：</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc19c4907e2d39c3e492d.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5)ge 大于等于</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc19c4907e2d39c3e4958.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日志：</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc19c4907e2d39c3e49db.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6）lt 小于</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc19c4907e2d39c3e49ba.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日志：</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc19c4907e2d39c3e49db.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7)le 小于等于</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc2764907e2d39c4175b4.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日志：</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc2764907e2d39c4175c1.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8)between 在两个值范围之间</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc2764907e2d39c4175d4.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日志：</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc2764907e2d39c4175e6.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9)notbetween 不在两个值范围之间</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc2764907e2d39c4175fb.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日志：</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc3884907e2d39c457efc.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10)like 匹配值 &quot;%值%&quot;</span><br><span class="line">   nolike 不匹配 &quot;%值%&quot;</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc3884907e2d39c457f0a.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日志：</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc3884907e2d39c457f16.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">11)likeLeft:匹配 like &quot;%值&quot;</span><br><span class="line">   likeRight:匹配 like &quot;%值&quot;</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc3884907e2d39c457f2a.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日志：</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc3884907e2d39c457f39.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">12)isNull: 判断字段值为 null</span><br><span class="line">   isNotNull: 判断字段值不为 null</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc5c34907e2d39c4dbef4.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日志：</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc5c34907e2d39c4dbf09.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">13)in:后面值列表，在列表中都是符合条件的</span><br><span class="line">   notin:不在列表中的</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc5c34907e2d39c4dbf1b.png"></p><p><img src="https://pic.imgdb.cn/item/611cc5c34907e2d39c4dbf30.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日志：</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc5c34907e2d39c4dbf3e.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">14)insql:常用来做子查询 类似in()</span><br><span class="line">   notinsql：类似notin()</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc60b4907e2d39c4ec7f8.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日志：</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc60b4907e2d39c4ec807.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15)groupBy:基于多个字段分组</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc60b4907e2d39c4ec812.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日志：</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc60b4907e2d39c4ec82c.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">16)orderByAsc:按字段升序</span><br><span class="line">   orderByDesc:按字段降序</span><br><span class="line">   orderBy:每个字段指定排序方向</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc60b4907e2d39c4ec83d.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日志：</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc6544907e2d39c4fca0d.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">17)or:连接条件用or，默认是and</span><br><span class="line">   and:连接条件用 and</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc6544907e2d39c4fca17.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日志;</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc6544907e2d39c4fca22.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">18)last:拼接sql语句</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc6544907e2d39c4fca31.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日志：</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc6544907e2d39c4fca44.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">19)exists:拼接exists(sql语句)</span><br><span class="line">   notexists:是exists的相反操作</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc6924907e2d39c50c5d4.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日志：</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc6924907e2d39c50c5df.png"></p><h4 id="3、分页"><a href="#3、分页" class="headerlink" title="3、分页"></a>3、分页</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">前提：配置分页插件，实现物理分页。默认是内存分页</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc6924907e2d39c50c5ee.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">分页查询：</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc6924907e2d39c50c605.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日志：</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc6924907e2d39c50c617.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出：</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc6d74907e2d39c51c382.png"></p><h3 id="九、MP生成器"><a href="#九、MP生成器" class="headerlink" title="九、MP生成器"></a>九、MP生成器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">准备条件：</span><br><span class="line">&lt;!-- 模板引擎 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.0&lt;/version&gt;</span><br><span class="line">&lt;dependency&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建生成类：</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/611cc6d74907e2d39c51c38d.png"></p><p><img src="https://pic.imgdb.cn/item/611cc6d74907e2d39c51c3a3.png"></p><p><img src="https://pic.imgdb.cn/item/611cc6d74907e2d39c51c3b1.png"></p><p><img src="https://pic.imgdb.cn/item/611cc6d74907e2d39c51c3bc.png"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;MP&quot;&gt;&lt;a href=&quot;#MP&quot; class=&quot;headerlink&quot; title=&quot;MP&quot;&gt;&lt;/a&gt;MP&lt;/h3&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java 框架" scheme="http://example.com/tags/Java-%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Filter&amp;Listener</title>
    <link href="http://example.com/2021/08/17/filter/"/>
    <id>http://example.com/2021/08/17/filter/</id>
    <published>2021-08-17T03:37:17.000Z</published>
    <updated>2021-08-17T03:39:41.420Z</updated>
    
    <content type="html"><![CDATA[<h3 id="过滤器和监听器简单入门"><a href="#过滤器和监听器简单入门" class="headerlink" title="过滤器和监听器简单入门"></a>过滤器和监听器简单入门</h3><span id="more"></span><h3 id="Filter-过滤器"><a href="#Filter-过滤器" class="headerlink" title="Filter:过滤器"></a>Filter:过滤器</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 概念：</span><br><span class="line"><span class="bullet">*</span> web中的过滤器：当访问服务器的资源时，过滤器可以将请求拦截下来，完成一些特殊的功能。</span><br><span class="line"><span class="bullet">*</span> 过滤器的作用：</span><br><span class="line"><span class="bullet">*</span> 一般用于完成通用的操作。如：登录验证、统一编码处理、敏感字符过滤...</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 快速入门：</span><br><span class="line"><span class="bullet">1.</span> 步骤：</span><br><span class="line"><span class="bullet">1.</span> 定义一个类，实现接口Filter</span><br><span class="line"><span class="bullet">2.</span> 复写方法</span><br><span class="line"><span class="bullet">3.</span> 配置拦截路径</span><br><span class="line"><span class="bullet">1.</span> web.xml</span><br><span class="line"><span class="bullet">2.</span> 注解</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 代码：</span><br><span class="line"><span class="code">@WebFilter(&quot;/*&quot;) //访问所有资源之前，都会执行该过滤器</span></span><br><span class="line"><span class="code">public class FilterDemo1 implements Filter &#123;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    @Override</span></span><br><span class="line"><span class="code">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    @Override</span></span><br><span class="line"><span class="code">    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</span></span><br><span class="line"><span class="code">        System.out.println(&quot;filterDemo1被执行了.....&quot;);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        //放行</span></span><br><span class="line"><span class="code">        filterChain.doFilter(servletRequest,servletResponse);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    @Override</span></span><br><span class="line"><span class="code">    public void destroy() &#123;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">2.</span> 过滤器执行流程</span><br><span class="line"><span class="bullet">1.</span> 执行过滤器</span><br><span class="line"><span class="bullet">2.</span> 执行放行后的资源</span><br><span class="line"><span class="bullet">3.</span> 回来执行过滤器放行代码</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> 过滤器生命周期方法</span><br><span class="line"><span class="bullet">1.</span> init：在服务器启动后，会创建Filter对象，然后调用init方法。只执行一次。用于加载资源</span><br><span class="line"><span class="bullet">2.</span> doFilter：每一次请求被拦截时，会执行。执行多次</span><br><span class="line"><span class="bullet">3.</span> destroy：在服务器关闭后，Filter对象被销毁。如果服务器是正常关闭，则会执行destroy方法。用于释放资源</span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> 过滤器配置详解</span><br><span class="line"><span class="bullet">*</span> 拦截路径配置：</span><br><span class="line"><span class="bullet">1.</span> 具体资源路径：/index.jsp  只有访问index.jsp资源时，过滤器才会被执行</span><br><span class="line"><span class="bullet">2.</span> 拦截目录：/user/<span class="emphasis">*  访问/user下的所有资源时，过滤器都会被执行</span></span><br><span class="line"><span class="emphasis">3. 后缀名拦截：*</span>.jsp  访问所有的后缀名为.jsp资源时，过滤器都会被执行</span><br><span class="line"><span class="bullet">4.</span> 拦截所有资源：/<span class="emphasis">*  访问所有资源时，过滤器都会被执行</span></span><br><span class="line"><span class="emphasis">*</span> 拦截方式配置：资源被访问的方式</span><br><span class="line"><span class="bullet">*</span> 注解配置：</span><br><span class="line"><span class="bullet">*</span> 设置dispatcherTypes属性</span><br><span class="line"><span class="bullet">1.</span> REQUEST:默认值。浏览器直接请求资源</span><br><span class="line"><span class="bullet">2.</span> FORWARD:转发访问资源</span><br><span class="line"><span class="bullet">3.</span> INCLUDE:包含访问资源</span><br><span class="line"><span class="bullet">4.</span> ERROR:错误跳转资源</span><br><span class="line"><span class="bullet">5.</span> ASYNC:异步访问资源</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> web.xml配置</span><br><span class="line"><span class="bullet">*</span> 设置<span class="xml"><span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span></span>标签即可</span><br><span class="line"></span><br><span class="line"><span class="bullet">5.</span> 过滤器链(配置多个过滤器)</span><br><span class="line"><span class="bullet">*</span> 执行顺序：如果有两个过滤器：过滤器1和过滤器2</span><br><span class="line"><span class="bullet">1.</span> 过滤器1</span><br><span class="line"><span class="bullet">2.</span> 过滤器2</span><br><span class="line"><span class="bullet">3.</span> 资源执行</span><br><span class="line"><span class="bullet">4.</span> 过滤器2</span><br><span class="line"><span class="bullet">5.</span> 过滤器1</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 过滤器先后顺序问题：</span><br><span class="line"><span class="bullet">1.</span> 注解配置：按照类名的字符串比较规则比较，值小的先执行</span><br><span class="line"><span class="bullet">*</span> 如：AFilter 和 BFilter，AFilter就先执行了。</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> web.xml配置：<span class="xml"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span>谁定义在上边，谁先执行</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">6.</span> 增强对象的功能：</span><br><span class="line"><span class="bullet">*</span> 设计模式：一些通用的解决固定问题的方式</span><br><span class="line"><span class="bullet">1.</span> 装饰模式</span><br><span class="line"><span class="bullet">2.</span> 代理模式</span><br><span class="line"><span class="bullet">*</span> 概念：</span><br><span class="line"><span class="bullet">1.</span> 真实的对象：被代理的对象</span><br><span class="line"><span class="bullet">2.</span> 代理对象</span><br><span class="line"><span class="bullet">3.</span> 代理模式:代理对象代理真实对象，达到增强真实对象功能的目的</span><br><span class="line"><span class="bullet">*</span> 实现方式：</span><br><span class="line"><span class="bullet">1.</span> 静态代理：有一个类文件描述代理模式</span><br><span class="line"><span class="bullet">2.</span> 动态代理：在内存中形成代理类</span><br><span class="line"><span class="bullet">*</span> 实现步骤：</span><br><span class="line"><span class="bullet">1.</span> 代理对象和真实对象实现相同的接口</span><br><span class="line"><span class="bullet">2.</span> 代理对象 = Proxy.newProxyInstance;</span><br><span class="line"><span class="bullet">3.</span> 使用代理对象调用方法。</span><br><span class="line"><span class="bullet">4.</span> 增强方法</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 增强方式：</span><br><span class="line"><span class="bullet">1.</span> 增强参数列表</span><br><span class="line"><span class="bullet">2.</span> 增强返回值类型</span><br><span class="line"><span class="bullet">3.</span> 增强方法体执行逻辑</span><br></pre></td></tr></table></figure><h3 id="Listener-监听器"><a href="#Listener-监听器" class="headerlink" title="Listener:监听器"></a>Listener:监听器</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 概念：web的三大组件之一。</span><br><span class="line"><span class="bullet">*</span> 事件监听机制</span><br><span class="line"><span class="bullet">*</span> 事件：一件事情</span><br><span class="line"><span class="bullet">*</span> 事件源：事件发生的地方</span><br><span class="line"><span class="bullet">*</span> 监听器：一个对象</span><br><span class="line"><span class="bullet">*</span> 注册监听：将事件、事件源、监听器绑定在一起。当事件源上发生某个事件后，执行监听器代码</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> ServletContextListener:监听ServletContext对象的创建和销毁</span><br><span class="line"><span class="bullet">*</span> 方法：</span><br><span class="line"><span class="bullet">*</span> void contextDestroyed(ServletContextEvent sce):ServletContext对象销毁之前会调用该方法</span><br><span class="line"><span class="bullet">*</span> void contextInitialized(ServletContextEvent sce):ServletContext对象创建后会调用该方法</span><br><span class="line"><span class="bullet">*</span> 步骤：</span><br><span class="line"><span class="bullet">1.</span> 定义一个类，实现ServletContextListener接口</span><br><span class="line"><span class="bullet">2.</span> 复写方法</span><br><span class="line"><span class="bullet">3.</span> 配置</span><br><span class="line"><span class="bullet">1.</span> web.xml</span><br><span class="line"><span class="bullet">2.</span> 注解</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;过滤器和监听器简单入门&quot;&gt;&lt;a href=&quot;#过滤器和监听器简单入门&quot; class=&quot;headerlink&quot; title=&quot;过滤器和监听器简单入门&quot;&gt;&lt;/a&gt;过滤器和监听器简单入门&lt;/h3&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java 后端" scheme="http://example.com/tags/Java-%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="http://example.com/2021/08/13/redis/"/>
    <id>http://example.com/2021/08/13/redis/</id>
    <published>2021-08-13T06:45:53.000Z</published>
    <updated>2021-08-13T07:30:31.716Z</updated>
    
    <content type="html"><![CDATA[<h3 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h3><span id="more"></span><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 概念：redis是一款高性能的NOSQL系列的非关系型数据库</span><br><span class="line"><span class="code">关系型数据库与NOSQL数据库并非对立而是互补的关系，即通常情况下使用关系型数据库，在适合使用NOSQL的时候使用NOSQL数据库，让NOSQL数据库对关系型数据库的不足进行弥补。在一个分布式应用中往往是结合使用的，复杂的互联网应用通常都是多数据源、多数据类型，应该根据数据的使用情况和特点，存放在合适的数据库中。</span></span><br><span class="line"><span class="code">一般会将数据存储在关系型数据库中，在nosql数据库中备份存储关系型数据库的数据</span></span><br><span class="line"><span class="code">NoSQL数据库的一个显著特点就是去掉了关系数据库的关系型特性，数据之间一旦没有关系，使得扩展性、读写性能都大大提高。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> 命令操作</span><br><span class="line"><span class="bullet">1.</span> redis的数据结构</span><br><span class="line"><span class="bullet">*</span> redis存储的是：key，value格式的数据，其中key都是字符串，value有5种不同的数据结构</span><br><span class="line"><span class="bullet">*</span> value的数据结构：</span><br><span class="line"><span class="bullet">1.</span> 字符串类型 string</span><br><span class="line"><span class="bullet">2.</span> 哈希类型 hash ：map格式</span><br><span class="line"><span class="bullet">3.</span> 列表类型 list ：linkedlsit格式。支持重复元素</span><br><span class="line"><span class="bullet">4.</span> 集合类型 set  ：不允许重复元素</span><br><span class="line"><span class="bullet">5.</span> 有序集合类型 sortedset ：不允许重复元素，且元素有顺序</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 字符串类型 string</span><br><span class="line"><span class="bullet">1.</span> 存储：set key value</span><br><span class="line"><span class="code">127.0.0.1:6379&gt; set username zhangsan</span></span><br><span class="line"><span class="code">ok</span></span><br><span class="line"><span class="code">2. 获取：get key</span></span><br><span class="line"><span class="code">127.0.0.1:6379&gt; get username</span></span><br><span class="line"><span class="code">&quot;zhangsan&quot;</span></span><br><span class="line"><span class="code">3. 删除：del key</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3.</span> 哈希类型 hash</span><br><span class="line"><span class="bullet">1.</span> 存储：hset key field value</span><br><span class="line"><span class="code">127.0.0.1:6379&gt; hset myhash username lisi</span></span><br><span class="line"><span class="code">(integer) 1</span></span><br><span class="line"><span class="code">127.0.0.1:6379&gt; hset myhash password 123</span></span><br><span class="line"><span class="code">(integer) 1</span></span><br><span class="line"><span class="code">2. 获取：</span></span><br><span class="line"><span class="code">* hget key filed：获取指定的filed对应的值</span></span><br><span class="line"><span class="code">* hgetall key：获取所有的filed和value</span></span><br><span class="line"><span class="code">* 127.0.0.1:6379&gt; hgetall myhash</span></span><br><span class="line"><span class="code">1) &quot;username&quot;</span></span><br><span class="line"><span class="code">2) &quot;lisi&quot;</span></span><br><span class="line"><span class="code">3) &quot;password&quot;</span></span><br><span class="line"><span class="code">4) &quot;123&quot;</span></span><br><span class="line"><span class="code">3. 删除： hdel key filed</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">4.</span> 列表类型 list：简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</span><br><span class="line"><span class="bullet">1.</span> 存储：</span><br><span class="line"><span class="bullet">1.</span> lpush key value：从左边存入列表</span><br><span class="line"><span class="bullet">2.</span> rpush key value：从右边存入列表</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 获取：</span><br><span class="line"><span class="bullet">*</span> lrange key start end：范围获取</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> 删除：</span><br><span class="line"><span class="bullet">*</span> lpop key：从列表的最左边移除一个元素，并将元素返回</span><br><span class="line"><span class="bullet">*</span> rpop key：从列表的最右边移除一个元素，并将元素返回</span><br><span class="line"></span><br><span class="line"><span class="bullet">5.</span> 集合类型 set ：不允许重复元素</span><br><span class="line"><span class="bullet">1.</span> 存储：sadd key value</span><br><span class="line"><span class="bullet">2.</span> 获取：smembers key：获取set集合中所有元素</span><br><span class="line"><span class="bullet">3.</span> 删除：srem key value：删除set结合中的讴歌元素</span><br><span class="line"></span><br><span class="line"><span class="bullet">6.</span> 有序集合类型 sortedset：不允许重复元素，且元素有顺序</span><br><span class="line"><span class="bullet">1.</span> 存储：zadd key score value</span><br><span class="line"><span class="bullet">2.</span> 获取：zrange key start end</span><br><span class="line"><span class="bullet">3.</span> 删除：zrem key value</span><br><span class="line"></span><br><span class="line"><span class="bullet">7.</span> 通用命令</span><br><span class="line"><span class="bullet">1.</span> keys <span class="emphasis">* ：查询所有的键</span></span><br><span class="line"><span class="emphasis">2. type key：获取键对应的value的类型</span></span><br><span class="line"><span class="emphasis">3. del key：删除指定的key value</span></span><br></pre></td></tr></table></figure><h3 id="Redis持久化机制"><a href="#Redis持久化机制" class="headerlink" title="Redis持久化机制"></a>Redis持久化机制</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">redis是内存数据库，它把数据存储在内存中，这样在加快读取速度的同时也对数据安全性产生了新的问题，即当redis所在服务器发生宕机后，redis数据库里的所有数据将会全部丢失。为了解决这个问题，redis提供了持久化功能——RDB和AOF（Append Only File）。</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> RDB：默认方式，不需要进行配置，默认就使用这种机制</span><br><span class="line">RDB（Redis DataBase）是 Redis 默认的持久化方案。在指定的时间间隔内，执行指定次数的写操作，则会将内存中的数据写入到磁盘中。即在指定目录下生成一个dump.rdb文件。Redis重启会通过加载dump.rdb文件来恢复数据。</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 在一定的间隔时间中，检测key的变化情况，然后持久化数据</span><br><span class="line"><span class="bullet">1.</span> 编辑redis.windows.conf文件</span><br><span class="line"><span class="code">#   after 900 sec (15 min) if at least 1 key changed</span></span><br><span class="line"><span class="code">save 900 1</span></span><br><span class="line"><span class="code">#   after 300 sec (5 min) if at least 10 keys changed</span></span><br><span class="line"><span class="code">save 300 1</span></span><br><span class="line"><span class="code">#   after 60 sec if at least 10000 keys changed</span></span><br><span class="line"><span class="code">save 60 10000</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">RDB原理：</span></span><br><span class="line"><span class="code">Redis会复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等）数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程，来进行持久化。整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">RDB保存的文件:</span></span><br><span class="line"><span class="code">RDB保存的文件是dump.rdb文件 ,位置保存在Redis的启动目录。Redis每次同步数据到磁盘都会生成一个dump.rdb文件，新的dump.rdb会覆盖旧的dump.rdb文件。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">配置RDB持久化策略：</span></span><br><span class="line"><span class="code">在redis.conf的快照配置中，配置RDB保存的策略。在客户端执行FLUSHDB或者FLUSHALL或者SHUTDOWN时，也会把快照中的数据保存到dump.rdb，只不过这种操作已经把数据清空了，保存的也是空文件，没有意义。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">手动保存RDB快照:</span><br><span class="line">save命令执行一个同步保存操作，将当前 Redis 实例的所有数据快照(snapshot)以 RDB 文件的形式保存到硬盘。由于save指令会阻塞所有客户端，所以保存数据库的任务通常由 BGSAVE 命令异步地执行，而save作为保存数据的最后手段来使用，当负责保存数据的后台子进程不幸出现问题时使用。</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">RDB数据恢复：</span></span><br><span class="line"><span class="code">通过脚本将Redis产生的dump.rdb文件备份(cp dump.rdb dump_bak.rdb)，每次启动Redis前，把备份dump.rdb文件替换到Redis相应的目录(在redis.conf中配的的dir目录)下，Redis启动时会加载dump.rdb文件，并且把数据读到内存中。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">RDB小结：</span></span><br><span class="line"><span class="code">Redis默认开启RDB持久化方式，适合大规模的数据恢复但它的数据一致性和完整性较差。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> AOF：日志记录方式，可以记录每一条命令的操作。可以每一次命令操作后，持久化数据</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">1. 编辑redis.windows.conf文件</span></span><br><span class="line"><span class="code">appendonly no（关闭aof） --&gt; appendonly yes（开启aof）</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># appendfsync always ：每一次操作都会进行持久化</span></span><br><span class="line"><span class="code">appendfsync everysec ：每隔一秒进行一个持久化</span></span><br><span class="line"><span class="code"># appendfsync no ： 不进行持久化</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">AOF(Append Only File)，Redis 默认不开启。它的出现是为了弥补RDB的不足（数据的不一致性），所以它采用日志的形式来记录每个写操作，并追加到文件中。Redis 重启会根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</span></span><br><span class="line"><span class="code">   </span></span><br><span class="line"><span class="code">AOF原理：</span></span><br><span class="line"><span class="code">Redis以日志的形式来记录每个写操作，将Redis执行过的所有写指令记录下来(读操作不记录)，只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">AOF保存文件：</span></span><br><span class="line"><span class="code">AOF保存的文件是appendonly.aof文件 ,位置保存在Redis的启动目录。如果开启了AOF，Redis每次记录写操作都会往appendonly.aof文件追加新的日志内容。</span></span><br><span class="line"><span class="code">   </span></span><br><span class="line"><span class="code">配置AOF持久化策略：</span></span><br><span class="line"><span class="code">在redis.conf的“APPEND ONLY MODE”配置模块中，配置AOF保存策略。</span></span><br><span class="line"><span class="code">   </span></span><br><span class="line"><span class="code">AOF数据恢复：</span></span><br><span class="line"><span class="code">通过脚本将Redis产生的appendonly.aof文件备份(cp appendonly.aof appendonly_bak.aof)，每次启动Redis前，把备份的appendonly.aof文件替换到Redis相应的目录(在redis.conf中配的的dir目录)下，只要开启AOF的功能，Redis每次启动，会根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</span></span><br><span class="line"><span class="code">但在实际开发中，可能因为某些原因导致appendonly.aof 文件格式异常，从而导致数据还原失败，可以通过命令redis-check-aof --fix appendonly.aof 进行修复 。会把出现异常的部分往后所有写操作日志去掉。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">AOF的重写：</span></span><br><span class="line"><span class="code">AOF采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制,当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集。</span></span><br><span class="line"><span class="code">AOF文件持续增长而过大时，会fork出一条新进程来将文件重写(也是先写临时文件最后再rename)，遍历新进程的内存中数据，每条记录有一条的Set语句。重写aof文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的aof文件，这点和快照有点类似。</span></span><br><span class="line"><span class="code">Redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的一倍且文件大 于64M时触发。当然，也可以在配置文件中进行配置。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">AOF小结：</span></span><br><span class="line"><span class="code">Redis 需要手动开启AOF持久化方式，AOF 的数据完整性比RDB高，但记录内容多了，会影响数据恢复的 效率。</span></span><br><span class="line"><span class="code">关于Redis持久化的使用：若只打算用Redis 做缓存，可以关闭持久化。若打算使用Redis 的持久化，建议RDB和AOF都开启。其实RDB更适合做数据的备份，留一后手。AOF出问题了，还有RDB。</span></span><br><span class="line"><span class="code">AOF与RDB模式可以同时启用，这并不冲突。如果AOF是可用的，那Redis启动时将自动加载AOF，这个文件能够提供更好的持久性保障。</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 注意：使用redis缓存一些不经常发生变化的数据。</span><br><span class="line"><span class="bullet">*</span> 数据库的数据一旦发生改变，则需要更新缓存。</span><br><span class="line"><span class="bullet">*</span> 数据库的表执行 增删改的相关操作，需要将redis缓存数据清空，再次存入</span><br><span class="line"><span class="bullet">*</span> 在service对应的增删改方法中，将redis数据删除。</span><br></pre></td></tr></table></figure><h3 id="Java客户端-Jedis"><a href="#Java客户端-Jedis" class="headerlink" title="Java客户端 Jedis"></a>Java客户端 Jedis</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line">Java客户端 Jedis</span><br><span class="line"><span class="bullet">*</span> Jedis：一款java操作redis数据库的工具</span><br><span class="line"><span class="bullet">*</span> 使用步骤：</span><br><span class="line"><span class="bullet">1.</span> 下载jedis的jar包</span><br><span class="line"><span class="bullet">2.</span> 使用</span><br><span class="line"><span class="code">//1.获取连接</span></span><br><span class="line"><span class="code">        Jedis jedis = new Jedis(&quot;localhost&quot;,6379);</span></span><br><span class="line"><span class="code">        //2.操作</span></span><br><span class="line"><span class="code">        jedis.set(&quot;username&quot;,&quot;zhangsan&quot;);</span></span><br><span class="line"><span class="code">        //3.关闭连接</span></span><br><span class="line"><span class="code">        jedis.close();</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> Jedis操作各种redis中的数据格式</span><br><span class="line"><span class="bullet">1.</span> 字符串类型 string</span><br><span class="line"><span class="code">set</span></span><br><span class="line"><span class="code">get</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">代码：</span></span><br><span class="line"><span class="code"> //1.获取连接</span></span><br><span class="line"><span class="code">        Jedis jedis = new Jedis();//如果使用空参构造，默认值&quot;localhost&quot;,6379端口</span></span><br><span class="line"><span class="code">        //2.操作</span></span><br><span class="line"><span class="code">        //存储</span></span><br><span class="line"><span class="code">        jedis.set(&quot;username&quot;,&quot;zhangsan&quot;);</span></span><br><span class="line"><span class="code">        //获取</span></span><br><span class="line"><span class="code">        String username = jedis.get(&quot;username&quot;);</span></span><br><span class="line"><span class="code">        System.out.println(username);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        //可以使用setex()方法存储可以指定过期时间的 key value</span></span><br><span class="line"><span class="code">        jedis.setex(&quot;activecode&quot;,20,&quot;haha&quot;);//将activecode：haha键值对存入redis，并且20秒后自动删除该键值对</span></span><br><span class="line"><span class="code">        //3.关闭连接</span></span><br><span class="line"><span class="code">        jedis.close();</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> 哈希类型 hash ：map格式</span><br><span class="line"><span class="code">hset</span></span><br><span class="line"><span class="code">hget</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">代码：</span></span><br><span class="line"><span class="code"> //1.获取连接</span></span><br><span class="line"><span class="code">        Jedis jedis = new Jedis();//如果使用空参构造，默认值&quot;localhost&quot;,6379端口</span></span><br><span class="line"><span class="code">        //2.操作</span></span><br><span class="line"><span class="code">        //存储hash</span></span><br><span class="line"><span class="code">        jedis.hset(&quot;user&quot;, &quot;name&quot;, &quot;lisi&quot;);</span></span><br><span class="line"><span class="code">        jedis.hset(&quot;user&quot;, &quot;age&quot;, &quot;23&quot;);</span></span><br><span class="line"><span class="code">        jedis.hset(&quot;user&quot;, &quot;gender&quot;, &quot;male&quot;);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        //获取hash</span></span><br><span class="line"><span class="code">        String name = jedis.hget(&quot;user&quot;, &quot;name&quot;);</span></span><br><span class="line"><span class="code">        System.out.println(name);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        //获取hash的所有map中的数据</span></span><br><span class="line"><span class="code">        Map&lt;String, String&gt; user = jedis.hgetAll(&quot;user&quot;);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        //keyset</span></span><br><span class="line"><span class="code">        Set&lt;String&gt; keyset = user.keySet();</span></span><br><span class="line"><span class="code">        for (String key : keyset) &#123;</span></span><br><span class="line"><span class="code">            //获取value</span></span><br><span class="line"><span class="code">            String value = user.get(key);</span></span><br><span class="line"><span class="code">            System.out.println(key + &quot;:&quot; + value);</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">        //3.关闭连接</span></span><br><span class="line"><span class="code">        jedis.close();</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3.</span> 列表类型 list ：linkedlsit格式。支持重复元素</span><br><span class="line"><span class="code">lpush/rpush</span></span><br><span class="line"><span class="code">lpop/rpop</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">代码：</span></span><br><span class="line"><span class="code">//1.获取连接</span></span><br><span class="line"><span class="code">        Jedis jedis = new Jedis();//如果使用空参构造，默认值&quot;localhost&quot;,6379端口</span></span><br><span class="line"><span class="code">        //2.操作</span></span><br><span class="line"><span class="code">        //list存储</span></span><br><span class="line"><span class="code">        jedis.lpush(&quot;mylist&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;);//从左边存</span></span><br><span class="line"><span class="code">        jedis.rpush(&quot;mylist&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;);//从右边存</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        //list 范围获取</span></span><br><span class="line"><span class="code">        List&lt;String&gt; mylist = jedis.lrange(&quot;mylist&quot;, 0, -1);</span></span><br><span class="line"><span class="code">        System.out.println(mylist);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        //list 弹出</span></span><br><span class="line"><span class="code">        String element1 = jedis.lpop(&quot;mylist&quot;);</span></span><br><span class="line"><span class="code">        System.out.println(element1);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        String element2 = jedis.rpop(&quot;mylist&quot;);</span></span><br><span class="line"><span class="code">        System.out.println(element2);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        //list 范围获取</span></span><br><span class="line"><span class="code">        List&lt;String&gt; mylist2 = jedis.lrange(&quot;mylist&quot;, 0, -1);</span></span><br><span class="line"><span class="code">        System.out.println(mylist2);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        //3.关闭连接</span></span><br><span class="line"><span class="code">        jedis.close();</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">4.</span> 集合类型 set  ：不允许重复元素</span><br><span class="line"><span class="code">sadd</span></span><br><span class="line"><span class="code">代码：</span></span><br><span class="line"><span class="code">//1.获取连接</span></span><br><span class="line"><span class="code">        Jedis jedis = new Jedis();//如果使用空参构造，默认值&quot;localhost&quot;,6379端口</span></span><br><span class="line"><span class="code">        //2.操作</span></span><br><span class="line"><span class="code">        //set 存储</span></span><br><span class="line"><span class="code">        jedis.sadd(&quot;myset&quot;, &quot;haha&quot;, &quot;xixi&quot;, &quot;hehe&quot;);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        //set获取</span></span><br><span class="line"><span class="code">        Set&lt;String&gt; myset = jedis.smembers(&quot;myset&quot;);</span></span><br><span class="line"><span class="code">        System.out.println(myset);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        //3.关闭连接</span></span><br><span class="line"><span class="code">        jedis.close();</span></span><br><span class="line"><span class="code">        </span></span><br><span class="line"><span class="code">5. 有序集合类型 sortedset ：不允许重复元素，且元素有顺序</span></span><br><span class="line"><span class="code">zadd</span></span><br><span class="line"><span class="code">代码：</span></span><br><span class="line"><span class="code">//1.获取连接</span></span><br><span class="line"><span class="code">        Jedis jedis = new Jedis();//如果使用空参构造，默认值&quot;localhost&quot;,6379端口</span></span><br><span class="line"><span class="code">        //2.操作</span></span><br><span class="line"><span class="code">        //sortedset 存储</span></span><br><span class="line"><span class="code">        jedis.zadd(&quot;mysortedset&quot;, 88, &quot;亚索&quot;);</span></span><br><span class="line"><span class="code">        jedis.zadd(&quot;mysortedset&quot;, 34, &quot;阿狸&quot;);</span></span><br><span class="line"><span class="code">        jedis.zadd(&quot;mysortedset&quot;, 3, &quot;德玛&quot;);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        //sortedset 获取</span></span><br><span class="line"><span class="code">        Set&lt;String&gt; mysortedset = jedis.zrange(&quot;mysortedset&quot;, 0, -1);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        System.out.println(mysortedset);</span></span><br><span class="line"><span class="code">        //3.关闭连接</span></span><br><span class="line"><span class="code">        jedis.close();</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> jedis连接池：JedisPool</span><br><span class="line"><span class="bullet">*</span> 使用：</span><br><span class="line"><span class="bullet">1.</span> 创建JedisPool连接池对象</span><br><span class="line"><span class="bullet">2.</span> 调用方法 getResource()方法获取Jedis</span><br><span class="line"><span class="code">代码：</span></span><br><span class="line"><span class="code">private static JedisPool jedisPool;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    static &#123;</span></span><br><span class="line"><span class="code">        //读取配置文件</span></span><br><span class="line"><span class="code">        InputStream is = JedisPoolUtils.class.getClassLoader().getResourceAsStream(&quot;jedis.properties&quot;);</span></span><br><span class="line"><span class="code">        //创建Properties对象</span></span><br><span class="line"><span class="code">        Properties pro = new Properties();</span></span><br><span class="line"><span class="code">        //关联文件</span></span><br><span class="line"><span class="code">        try &#123;</span></span><br><span class="line"><span class="code">            pro.load(is);</span></span><br><span class="line"><span class="code">        &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="code">            e.printStackTrace();</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">        //获取数据，设置到JedisPoolConfig中</span></span><br><span class="line"><span class="code">        JedisPoolConfig config = new JedisPoolConfig();</span></span><br><span class="line"><span class="code">        config.setMaxTotal(Integer.parseInt(pro.getProperty(&quot;maxTotal&quot;)));</span></span><br><span class="line"><span class="code">        config.setMaxIdle(Integer.parseInt(pro.getProperty(&quot;maxIdle&quot;)));</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        //初始化JedisPool</span></span><br><span class="line"><span class="code">        jedisPool = new JedisPool(config, pro.getProperty(&quot;host&quot;), Integer.parseInt(pro.getProperty(&quot;port&quot;)));</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    /*</span></span><br><span class="line"><span class="code">    获取连接方法</span></span><br><span class="line"><span class="code">     */</span></span><br><span class="line"><span class="code">    public static Jedis getJedis() &#123;</span></span><br><span class="line"><span class="code">        return jedisPool.getResource();</span></span><br><span class="line"><span class="code">    &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;NoSQL&quot;&gt;&lt;a href=&quot;#NoSQL&quot; class=&quot;headerlink&quot; title=&quot;NoSQL&quot;&gt;&lt;/a&gt;NoSQL&lt;/h3&gt;</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat&amp;Servlet</title>
    <link href="http://example.com/2021/08/13/tomcat/"/>
    <id>http://example.com/2021/08/13/tomcat/</id>
    <published>2021-08-13T03:42:31.000Z</published>
    <updated>2021-08-13T03:44:50.976Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><span id="more"></span><h3 id="web服务器软件"><a href="#web服务器软件" class="headerlink" title="web服务器软件"></a>web服务器软件</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 服务器：安装了服务器软件的计算机</span><br><span class="line"><span class="bullet">*</span> 服务器软件：接收用户的请求，处理请求，做出响应</span><br><span class="line"><span class="bullet">*</span> web服务器软件：接收用户的请求，处理请求，做出响应</span><br><span class="line"><span class="bullet">*</span> 在web服务器软件中，可以部署web项目，让用户通过浏览器来访问这些项目</span><br><span class="line"><span class="bullet">*</span> web容器</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 常用的java相关的web服务器软件：</span><br><span class="line"><span class="bullet">*</span> weblogiv：oracle公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</span><br><span class="line"><span class="bullet">*</span> webSphere：IBM公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</span><br><span class="line"><span class="bullet">*</span> JBOSS：JBOSS公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</span><br><span class="line"><span class="bullet">*</span> Tomcat：Apache基金组织，中小型的JavaEE服务器，仅仅支持少量的JavaEE规范servlet/jsp。开源的，免费的。</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> JavaEE：Java语言在企业级开发中使用的技术规范的总和，一共规定了13项大的规范。</span><br></pre></td></tr></table></figure><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 概念：运行在服务器端的小程序</span><br><span class="line"><span class="bullet">*</span> Servlet就是一个接口，定义了Java类被浏览器访问到(tomcat识别)的规则。</span><br><span class="line"><span class="bullet">*</span> 将来我们自定义一个类，实现Servlet接口，复写方法。</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 快速入门：</span><br><span class="line"><span class="bullet">1.</span> 创建JavaEE项目</span><br><span class="line"><span class="bullet">2.</span> 定义一个类，实现Servlet接口</span><br><span class="line"><span class="bullet">*</span> public class ServletDemo1 implements Servlet </span><br><span class="line"><span class="bullet">3.</span> 实现接口中的抽象方法</span><br><span class="line"><span class="bullet">4.</span> 配置Servlet</span><br><span class="line"><span class="code">在web.xml中配置：</span></span><br><span class="line"><span class="code">&lt;!--配置Servlet --&gt;</span></span><br><span class="line"><span class="code">&lt;servlet&gt;</span></span><br><span class="line"><span class="code">    &lt;servlet-name&gt;demo1&lt;/servlet-name&gt;</span></span><br><span class="line"><span class="code">    &lt;servlet-class&gt;cn.itcast.web.servlet.ServletDemo1&lt;/servlet-class&gt;</span></span><br><span class="line"><span class="code">&lt;/servlet&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;servlet-name&gt;demo1&lt;/servlet-name&gt;</span></span><br><span class="line"><span class="code">    &lt;url-pattern&gt;/demo1&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="code">&lt;/servlet-mapping&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> 执行原理：</span><br><span class="line"><span class="bullet">1.</span> 当服务器接收到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径</span><br><span class="line"><span class="bullet">2.</span> 查找web.xml文件，是否有对应的<span class="xml"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span></span>标签体内容。</span><br><span class="line"><span class="bullet">3.</span> 如果有，则在找到对应的<span class="xml"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span></span>全类名</span><br><span class="line"><span class="bullet">4.</span> tomcat会将字节码文件加载进内存，并且创建其对象</span><br><span class="line"><span class="bullet">5.</span> 调用其方法</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> Servlet中的生命周期</span><br><span class="line"><span class="bullet">1.</span> 被创建：执行init方法，只执行一次</span><br><span class="line"><span class="bullet">*</span> Servlet什么时候被创建？</span><br><span class="line"><span class="bullet">*</span> 默认情况下，第一次被访问时，Servlet被创建</span><br><span class="line"><span class="bullet">*</span> 可以配置执行Servlet的创建时机。</span><br><span class="line"><span class="bullet">*</span> 在<span class="xml"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span>标签下配置</span><br><span class="line"><span class="bullet">1.</span> 第一次被访问时，创建</span><br><span class="line"><span class="bullet">            *</span> <span class="xml"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span></span>的值为负数</span><br><span class="line"><span class="bullet">        2.</span> 在服务器启动时，创建</span><br><span class="line"><span class="bullet">            *</span> <span class="xml"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span></span>的值为0或正整数</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> Servlet的init方法，只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的</span><br><span class="line"><span class="bullet">*</span> 多个用户同时访问时，可能存在线程安全问题。</span><br><span class="line"><span class="bullet">*</span> 解决：尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要对其改值。</span><br><span class="line"><span class="bullet">2.</span> 提供服务：执行service方法，执行多次</span><br><span class="line"><span class="bullet">*</span> 每次访问Servlet时，Servlet方法都会被调用一次</span><br><span class="line"><span class="bullet">3.</span> 被销毁：执行destory，执行一次</span><br><span class="line"><span class="bullet">*</span> Servlet被销毁时执行。服务器关闭时，Servlet被销毁</span><br><span class="line"><span class="bullet">*</span> 只有服务器正常关闭时，才会执行destroy方法，一般用于释放资源</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> Servlet3.0：</span><br><span class="line"><span class="bullet">*</span> 好处：</span><br><span class="line"><span class="bullet">*</span> 支持注解配置。可以不需要web.xml。</span><br><span class="line"><span class="bullet">*</span> 步骤：</span><br><span class="line"><span class="bullet">1.</span> 创建JavaEE项目，选择Servlet的版本3.0以上，可以不创建web.xml</span><br><span class="line"><span class="bullet">2.</span> 定义一个类，实现Servlet接口</span><br><span class="line"><span class="bullet">3.</span> 复写方法</span><br><span class="line"><span class="bullet">4.</span> 在类上使用@WebServlet注解，进行配置</span><br><span class="line"><span class="bullet">*</span> @WebServlet(&quot;虚拟目录---&gt;&quot;)</span><br></pre></td></tr></table></figure><h3 id="IDEA与tomcat的相关配置"><a href="#IDEA与tomcat的相关配置" class="headerlink" title="IDEA与tomcat的相关配置"></a>IDEA与tomcat的相关配置</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> IDEA会为每一个tomcat部署的项目单独建立一份配置文件</span><br><span class="line"><span class="bullet">*</span> 查看控制台的log：Using CATALINA<span class="emphasis">_BASE:   &quot;C:\Users\520520Gl\AppData\Local\JetBrains\IntelliJIdea2020.2\tomcat\Unnamed_</span>servlet&quot;</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 工作空间项目  和  tomcat部署的web项目</span><br><span class="line"><span class="bullet">*</span> tomcat真正访问的是“tomcat部署的web项目”，“tomcat部署的web项目”对应着“工作空间项目”的web目录下的所有资源</span><br><span class="line"><span class="bullet">*</span> WEB-INF目录下的资源不能被浏览器直接访问。</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> 断点调试：使用“小虫子”启动 dubug 启动</span><br></pre></td></tr></table></figure><h3 id="Servlet-1"><a href="#Servlet-1" class="headerlink" title="Servlet"></a>Servlet</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 概念</span><br><span class="line"><span class="bullet">2.</span> 步骤</span><br><span class="line"><span class="bullet">3.</span> 执行原理</span><br><span class="line"><span class="bullet">4.</span> 生命周期</span><br><span class="line"><span class="bullet">5.</span> Servlet3.0 注解配置</span><br><span class="line"><span class="bullet">6.</span> Servlet的体系结构</span><br><span class="line"><span class="code">Servlet --接口</span></span><br><span class="line"><span class="code">|</span></span><br><span class="line"><span class="code">GenericServlet -- 抽象类</span></span><br><span class="line"><span class="code">|</span></span><br><span class="line"><span class="code">HttpServlet -- 抽象类</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> GenericServlet：将Servlet接口中其他的方法做了默认空实现，只将Servlet()方法作为抽象</span><br><span class="line"><span class="bullet">*</span> 将来定义Servlet类时，可以继承GenericServlet，实现servlet()方法即可</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> HttpServlet：对http协议的一种封装，简化操作</span><br><span class="line"><span class="bullet">1.</span> 定义类继承HttpServlet</span><br><span class="line"><span class="bullet">2.</span> 复写doGet/doPost方法</span><br><span class="line"></span><br><span class="line"><span class="bullet">7.</span> Servlet相关配置</span><br><span class="line"><span class="bullet">1.</span> urlpartten：Servlet访问路径</span><br><span class="line"><span class="bullet">1.</span> 一个Servlet可以定义多个访问路径：@WebServlet(&#123;&quot;/d4&quot;,&quot;/dd4&quot;,&quot;/ddd4&#125;)</span><br><span class="line"><span class="bullet">2.</span> 路径定义规则：</span><br><span class="line"><span class="bullet">1.</span> /xxx</span><br><span class="line"><span class="bullet">2.</span> /xxx/xxx：多路径，目录结构</span><br><span class="line"><span class="bullet">3.</span> <span class="emphasis">*.db</span></span><br></pre></td></tr></table></figure><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 概念：Hyper Text Transfer Protocal 超文本传输协议</span><br><span class="line"><span class="bullet">*</span> 传输协议：定义了，客户端和服务端通信时，发送数据的格式</span><br><span class="line"><span class="bullet">*</span> 特点：</span><br><span class="line"><span class="bullet">1.</span> 基于TCP/IP的高级协议</span><br><span class="line"><span class="bullet">2.</span> 默认端口号：80</span><br><span class="line"><span class="bullet">3.</span> 基于请求/响应模型的：一次请求对应一次响应</span><br><span class="line"><span class="bullet">4.</span> 无状态的：每次请求之间相互独立，不能交互数据</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 历史版本：</span><br><span class="line"><span class="bullet">*</span> 1.0：每一次请求响应都会建立新的连接</span><br><span class="line"><span class="bullet">*</span> 1.1：复用连接</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 请求消息数据格式</span><br><span class="line"><span class="bullet">1.</span> 请求行</span><br><span class="line"><span class="code">请求方式 请求url 请求协议/版本</span></span><br><span class="line"><span class="code">GET /login.html HTTP/1.1</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> 请求方式：</span><br><span class="line"><span class="bullet">*</span> HTTP协议有7种请求方式，常用的有2种</span><br><span class="line"><span class="bullet">*</span> GET：</span><br><span class="line"><span class="bullet">1.</span> 请求参数在请求行中，在url后</span><br><span class="line"><span class="bullet">2.</span> 请求的url长度有限制的</span><br><span class="line"><span class="bullet">3.</span> 不太安全</span><br><span class="line"><span class="bullet">*</span> POST:</span><br><span class="line"><span class="bullet">1.</span> 请求参数在请求体中</span><br><span class="line"><span class="bullet">2.</span> 请求的url长度没有限制的</span><br><span class="line"><span class="bullet">3.</span> 相对安全</span><br><span class="line"><span class="bullet">2.</span> 请求头：客户端浏览器告诉服务器一些信息</span><br><span class="line"><span class="code">请求头名称：请求头值</span></span><br><span class="line"><span class="code">* 常见的请求头：</span></span><br><span class="line"><span class="code">1. User-Agent：浏览器告诉服务器，我访问你是用的浏览器版本信息</span></span><br><span class="line"><span class="code">* 可以在服务器端获取该头的信息，解决浏览器的兼容性问题</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> Referer：http://localhost/login.html</span><br><span class="line"><span class="bullet">*</span> 告诉服务器，我(当前请求)从哪里来？</span><br><span class="line"><span class="bullet">*</span> 作用：</span><br><span class="line"><span class="bullet">1.</span> 防盗链</span><br><span class="line"><span class="bullet">2.</span> 统计工作</span><br><span class="line"><span class="bullet">3.</span> 请求空行</span><br><span class="line"><span class="code">空行，就是用于分割POST请求的请求头，和请求体的。</span></span><br><span class="line"><span class="code">4. 请求体(正文)</span></span><br><span class="line"><span class="code">* 封装POST请求消息的请求参数的</span></span><br></pre></td></tr></table></figure><h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> tomcat服务器会根据请求url中的资源路径，创建对应的ServletDemo1的对象。</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> tomcat服务器，会创建request和response对象，request对象中封装请求消息数据。</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> tomcat将request和response两个对象传递给service方法，并且调用service方法。</span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> 程序员(我们)，可以通过request对象获取请求消息数据，可以通过response对象设置响应消息数据</span><br><span class="line"></span><br><span class="line"><span class="bullet">5.</span> 服务器在给浏览器做出响应之前，会从respon对象中拿到程序员设置的响应消息数据</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> request对象和response对象的原理</span><br><span class="line"><span class="bullet">1.</span> request和response对象是由服务器创建的。我们来使用它们</span><br><span class="line"><span class="bullet">2.</span> request对象是来获取请求消息，response对象是来设置响应消息</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> request对象继承体系结构：</span><br><span class="line"><span class="code">ServletRequest  -- 接口</span></span><br><span class="line"><span class="code">|继承</span></span><br><span class="line"><span class="code">HttpServletRequest  -- 接口</span></span><br><span class="line"><span class="code">|实现</span></span><br><span class="line"><span class="code">org.apache.catalina.connector.RequestFacade@52291ef3</span></span><br><span class="line"><span class="code">3. request功能：</span></span><br><span class="line"><span class="code">1. 获取请求消息数据</span></span><br><span class="line"><span class="code">1. 获取请求行数据</span></span><br><span class="line"><span class="code">* GET /day14/demo1?name=zhangsan HTTP/1.1</span></span><br><span class="line"><span class="code">* 方法：</span></span><br><span class="line"><span class="code">1. 获取请求方式：GET</span></span><br><span class="line"><span class="code">*String getMethod()</span></span><br><span class="line"><span class="code">2.(*) 获取虚拟目录:/day14</span></span><br><span class="line"><span class="code">* String getContextPath()</span></span><br><span class="line"><span class="code">3. 获取Servlet路径：/demo1</span></span><br><span class="line"><span class="code">* String getServletPath()</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">4. 获取get方式请求参数：name=zhangsan</span></span><br><span class="line"><span class="code">* String getQueryString()</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">5.(*) 获取请求URI:/day14/demo1</span></span><br><span class="line"><span class="code">* String getRequestURI(): /day14/demo1</span></span><br><span class="line"><span class="code">* StringBuffer getRequestURL(): http://localhost/day14/demo1</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> URL:统一资源定位符：http://localhost/day14/demo1</span><br><span class="line"><span class="bullet">*</span> URI:统一资源标识符：/day14/demo1</span><br><span class="line"></span><br><span class="line"><span class="bullet">6.</span> 获取协议及版本：HTTP/1.1</span><br><span class="line"><span class="bullet">*</span> String getProtocol()</span><br><span class="line"><span class="bullet">*</span> </span><br><span class="line">7. 获取客户机的ip地址：</span><br><span class="line"><span class="bullet">*</span> String getRemoteAddr()</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 获取请求头数据</span><br><span class="line"><span class="bullet">*</span> 方法：</span><br><span class="line"><span class="bullet">*</span> (<span class="emphasis">*)String getHeader(String name):通过请求头的名称获取请求头的值</span></span><br><span class="line"><span class="emphasis">*</span> Enumeration<span class="xml"><span class="tag">&lt;<span class="name">String</span>&gt;</span></span> getHeaderName():获取所有的请求头名称</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> 获取请求体数据：</span><br><span class="line"><span class="bullet">*</span> 请求体：只有POST请求方式，才有请求体，在请求体中封装POST请求的请求参数</span><br><span class="line"><span class="bullet">*</span> 步骤：</span><br><span class="line"><span class="bullet">1.</span> 获取流对象</span><br><span class="line"><span class="bullet">*</span> BufferedReader getReader():获取字符输入流，只能操作字符数据</span><br><span class="line"><span class="bullet">*</span> ServletInputStream getInputStream():获取字节输入流，可以操作所有类型数据</span><br><span class="line"><span class="bullet">*</span> 在文件上传知识点后讲解</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 再从流对象中拿数据</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 其他功能：</span><br><span class="line"><span class="bullet">1.</span> 获取请求参数通用方式：不论get还是post请求方式都可以使用下列方法来获取请求参数</span><br><span class="line"><span class="bullet">1.</span> String getParameter(String name):根据参数名称获取参数值</span><br><span class="line"><span class="bullet">2.</span> String[] getParameterValues(String name):根据参数名称获取参数值的数组 </span><br><span class="line"><span class="bullet">3.</span> Enumeration<span class="xml"><span class="tag">&lt;<span class="name">String</span>&gt;</span></span> getParameterNames():获取所有请求的参数名称</span><br><span class="line"><span class="bullet">4.</span> Map<span class="xml">&lt;String,String[]&gt;</span> getPatameterMap():获取所有参数的map集合</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 中文乱码问题：</span><br><span class="line"><span class="bullet">*</span> get方式：tomcat 8 已经将get方式乱码问题解决了</span><br><span class="line"><span class="bullet">*</span> post方式：会乱码</span><br><span class="line"><span class="bullet">*</span> 解决：在获取参数前，设置request的编码request.setCharacterEncoding(&quot;utf-8&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">2.</span> 请求转发：一种在服务器内部的资源跳转方式</span><br><span class="line"><span class="bullet">1.</span> 步骤：</span><br><span class="line"><span class="bullet">1.</span> 通过request对象获取请求转发器对象：RequestDispatcher getRequestDispatcher(String path)</span><br><span class="line"><span class="bullet">2.</span> 使用RequestDispatcher对象来进行转发：forword(ServletRequest request,ServletResponse response)</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 特点：</span><br><span class="line"><span class="bullet">1.</span> 浏览器地址栏路径不会发生变化</span><br><span class="line"><span class="bullet">2.</span> 只能转发到当前服务器内部资源中</span><br><span class="line"><span class="bullet">3.</span> 转发是一次请求</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">3. 共享数据：</span></span><br><span class="line"><span class="code">* 域对象：一个有作用范围的对象，可以在范围内共享数据</span></span><br><span class="line"><span class="code">* request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据</span></span><br><span class="line"><span class="code">* 方法：</span></span><br><span class="line"><span class="code">1. void SetAttribute(String name,Object obj):存储数据</span></span><br><span class="line"><span class="code">2. Object getAttribute(String name):通过键获取值</span></span><br><span class="line"><span class="code">3. void removeAttribute(String name):通过键移除键值对</span></span><br><span class="line"><span class="code">4. 获取SetvletContext：</span></span><br><span class="line"><span class="code">* ServletContext servletContext()</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">5.</span> BeanUtils工具类，简化数据封装</span><br><span class="line"><span class="bullet">*</span> 用于封装JavaBean的</span><br><span class="line"><span class="bullet">1.</span> JavaBean：标准的Java类</span><br><span class="line"><span class="bullet">1.</span> 要求：</span><br><span class="line"><span class="bullet">1.</span> 类必须被public修饰</span><br><span class="line"><span class="bullet">2.</span> 必须提供空参的构造器</span><br><span class="line"><span class="bullet">3.</span> 成员变量必须使用private修饰</span><br><span class="line"><span class="bullet">4.</span> 提供公共setter和getter方法</span><br><span class="line"><span class="bullet">2.</span> 功能：封装数据</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 概念：</span><br><span class="line"><span class="code">成员变量：</span></span><br><span class="line"><span class="code">属性：setter和getter方法截取后的产物</span></span><br><span class="line"><span class="code">例如：getUsername() --&gt; Username --&gt; username</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3.</span> 方法：</span><br><span class="line"><span class="bullet">1.</span> setProperty()</span><br><span class="line"><span class="bullet">2.</span> getProerty()</span><br><span class="line"><span class="bullet">3.</span> populate(Object obj,Map map):将map集合的键值对信息，封装到对应的JavaBean对象中</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h3&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java 前端" scheme="http://example.com/tags/Java-%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>MySQL基础</title>
    <link href="http://example.com/2021/08/13/mysql/"/>
    <id>http://example.com/2021/08/13/mysql/</id>
    <published>2021-08-13T03:33:56.000Z</published>
    <updated>2021-08-13T03:38:26.912Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><span id="more"></span><h3 id="DDL-操作数据库、表"><a href="#DDL-操作数据库、表" class="headerlink" title="DDL:操作数据库、表"></a>DDL:操作数据库、表</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">1，操作数据库：CRUD</span><br><span class="line"><span class="bullet">1.</span> C(Create):创建</span><br><span class="line"><span class="code">*创建数据库：</span></span><br><span class="line"><span class="code">*create database 数据库名称；</span></span><br><span class="line"><span class="code">*创建数据库，判断不存在，再创建；</span></span><br><span class="line"><span class="code">*create database if not exists 数据库名称；</span></span><br><span class="line"><span class="code">*创建数据库，并指定字符集</span></span><br><span class="line"><span class="code">*create database 数据库名称 character set 字符集名；</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">*练习：创建db4数据库，判断是否存在，并指定字符集gbk</span></span><br><span class="line"><span class="code">*create database if not exists db4 character set gbk;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> R(Retrieve):查询</span><br><span class="line"><span class="code">*查询所有数据库的名称；</span></span><br><span class="line"><span class="code">*show databases;</span></span><br><span class="line"><span class="code">*查询某个数据库的字符集：查询某个数据库的创建语句</span></span><br><span class="line"><span class="code">*show create database 数据库名称；</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3.</span> U(Update):修改</span><br><span class="line"><span class="code">*修改数据库的字符集</span></span><br><span class="line"><span class="code">*alter database 数据库名称 character set 字符集名称；</span></span><br><span class="line"><span class="code">4. D(Delete):删除</span></span><br><span class="line"><span class="code">*删除数据库</span></span><br><span class="line"><span class="code">*drop database 数据库名称；</span></span><br><span class="line"><span class="code">*判断数据库存在，存在再删除</span></span><br><span class="line"><span class="code">*drop database if exists 数据库名称；</span></span><br><span class="line"><span class="code">5.使用数据库</span></span><br><span class="line"><span class="code">*查询当前正在使用的数据库名称</span></span><br><span class="line"><span class="code">*select database();</span></span><br><span class="line"><span class="code">*使用数据库</span></span><br><span class="line"><span class="code">*use 数据库名称；</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">2.操作表</span><br><span class="line"><span class="bullet">1.</span> C(Create):创建</span><br><span class="line"><span class="bullet">1.</span> 语法：</span><br><span class="line"><span class="code">create table 表名(</span></span><br><span class="line"><span class="code">列名1 数据类型1，</span></span><br><span class="line"><span class="code">列名2 数据类型2，</span></span><br><span class="line"><span class="code">.....</span></span><br><span class="line"><span class="code">列名n 数据类型n</span></span><br><span class="line"><span class="code">);</span></span><br><span class="line"><span class="code">*注意：最后一列，不需要加逗号(,)</span></span><br><span class="line"><span class="code">*数据类型：</span></span><br><span class="line"><span class="code">1. int：整数类型</span></span><br><span class="line"><span class="code">*age int,</span></span><br><span class="line"><span class="code">2. double:小数类型</span></span><br><span class="line"><span class="code">*score double(5,2)</span></span><br><span class="line"><span class="code">3. date:日期，只包含年月日，yyyy-MM-dd</span></span><br><span class="line"><span class="code">4. datetime:日期，包含年月日时分秒 yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="code">5. timestamp:时间戳类型，包含年月日时分秒 yyyy-MM-dd-HH:mm:ss:</span></span><br><span class="line"><span class="code">*如果将来不给这个字段赋值，或赋值为null，则默认使用当前的系统时间，来自动赋值</span></span><br><span class="line"><span class="code">6. varchar :字符串</span></span><br><span class="line"><span class="code">*name varchar(20):姓名最大20个字符</span></span><br><span class="line"><span class="code">*zhangsan 8个字符 张三 2个字符</span></span><br><span class="line"><span class="code">*创建表</span></span><br><span class="line"><span class="code">create table student(</span></span><br><span class="line"><span class="code">id int,</span></span><br><span class="line"><span class="code">name varchar(32),</span></span><br><span class="line"><span class="code">    age int,</span></span><br><span class="line"><span class="code">score double(4,1),</span></span><br><span class="line"><span class="code">birthday date,</span></span><br><span class="line"><span class="code">insert_time  timestamp</span></span><br><span class="line"><span class="code">);</span></span><br><span class="line"><span class="code">*复制表：</span></span><br><span class="line"><span class="code">*create table 表名 like 被复制的表名；</span></span><br><span class="line"><span class="code">2. R(Retrieve):查询</span></span><br><span class="line"><span class="code">*查询某个数据库中所有的表名称</span></span><br><span class="line"><span class="code">*show tables;</span></span><br><span class="line"><span class="code">*查询表结构</span></span><br><span class="line"><span class="code">*desc 表名；</span></span><br><span class="line"><span class="code">3. U(Update):修改</span></span><br><span class="line"><span class="code">1. 修改表名</span></span><br><span class="line"><span class="code">alter table 表名 rename to 新的表名；</span></span><br><span class="line"><span class="code">2. 修改表的字符集</span></span><br><span class="line"><span class="code">alter table 表名 character set 字符集名称；</span></span><br><span class="line"><span class="code">3. 添加一列</span></span><br><span class="line"><span class="code">alter table 表名 add 列名 数据类型；</span></span><br><span class="line"><span class="code">4. 修改列名称 类型</span></span><br><span class="line"><span class="code">alter table 表名 change 列名 新列名 新数据类型；</span></span><br><span class="line"><span class="code">alter table 表名 modify 列名 新数据类型；</span></span><br><span class="line"><span class="code">5. 删除列</span></span><br><span class="line"><span class="code">alter table 表名 drop 列名；·</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">4. D(Delete):删除</span></span><br><span class="line"><span class="code">*drop table 表名；</span></span><br><span class="line"><span class="code">*drop table id exists 表名；</span></span><br></pre></td></tr></table></figure><h3 id="DML-增删改表中数据"><a href="#DML-增删改表中数据" class="headerlink" title="DML:增删改表中数据"></a>DML:增删改表中数据</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.添加数据：</span><br><span class="line"><span class="code">*语法：</span></span><br><span class="line"><span class="code">*insert into 表名(列名1，列名2，....列名n) value(值1，值2，...值n);</span></span><br><span class="line"><span class="code">*注意：</span></span><br><span class="line"><span class="code">1. 列名和摘要一一对应。</span></span><br><span class="line"><span class="code">2. 如果表名后，不定义列名，则默认给所有列添加值</span></span><br><span class="line"><span class="code">insert into 表名 values(值1,值2，...值n);</span></span><br><span class="line"><span class="code">3. 除了数字类型，其他类型需要使用引导（单双都可以）引起来</span></span><br></pre></td></tr></table></figure><h3 id="DQL：查询表中的记录"><a href="#DQL：查询表中的记录" class="headerlink" title="DQL：查询表中的记录"></a>DQL：查询表中的记录</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*select *</span> from 表名；</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 语法：</span><br><span class="line"><span class="code">select</span></span><br><span class="line"><span class="code">字段列表</span></span><br><span class="line"><span class="code">from</span></span><br><span class="line"><span class="code">表名列表</span></span><br><span class="line"><span class="code">where</span></span><br><span class="line"><span class="code">条件列表</span></span><br><span class="line"><span class="code">group by</span></span><br><span class="line"><span class="code">分组字段</span></span><br><span class="line"><span class="code">having</span></span><br><span class="line"><span class="code">分组之后的条件</span></span><br><span class="line"><span class="code">order by</span></span><br><span class="line"><span class="code">排序</span></span><br><span class="line"><span class="code">limit</span></span><br><span class="line"><span class="code">分页限定</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> 基础查询</span><br><span class="line"><span class="bullet">1.</span> 多个字段的查询</span><br><span class="line"><span class="code">*select 字段名去，字段名2...from 表名；</span></span><br><span class="line"><span class="code">*注意：</span></span><br><span class="line"><span class="code">*如果查询所有字段，则可以使用*来替代字段列表。</span></span><br><span class="line"><span class="code">2. 去除重复：</span></span><br><span class="line"><span class="code">*distinct</span></span><br><span class="line"><span class="code">3. 计算列：</span></span><br><span class="line"><span class="code">*一般可以使用四则运算计算一些列的值。（一般只会进行数值型的计算）</span></span><br><span class="line"><span class="code">*ifnull(表达式1，表达式2）：null参与运算，计算结果都是null</span></span><br><span class="line"><span class="code">*表达式1：哪个字段需要判断是否为null</span></span><br><span class="line"><span class="code">*表达式2：如果该字段为null后的替换值。</span></span><br><span class="line"><span class="code">4. 起别名：</span></span><br><span class="line"><span class="code">*as：as也可以省略</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">3.</span> 条件查询</span><br><span class="line"><span class="bullet">1.</span> where子句后跟条件</span><br><span class="line"><span class="bullet">2.</span> 运算符</span><br><span class="line"><span class="code">*&gt;、&lt;、&lt;=、&gt;=、=、&lt;&gt;</span></span><br><span class="line"><span class="code">*BETWEEN...AND</span></span><br><span class="line"><span class="code">*IN(集合)</span></span><br><span class="line"><span class="code">*LIKE：模糊查询</span></span><br><span class="line"><span class="code">*占位符：</span></span><br><span class="line"><span class="code">*_:单个任意字符</span></span><br><span class="line"><span class="code">*%：多个任意字符</span></span><br><span class="line"><span class="code">*IS NULL</span></span><br><span class="line"><span class="code">*and 或 &amp;&amp;</span></span><br><span class="line"><span class="code">*or 或||</span></span><br><span class="line"><span class="code">*not 或 ！</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">select * from 表名 where 条件语句；</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 排序查询</span><br><span class="line"><span class="code">*语法：order by 子句</span></span><br><span class="line"><span class="code">*order by 排序字段1 排序方式1，排序字段2 排序方式3...</span></span><br><span class="line"><span class="code">*排序方式：</span></span><br><span class="line"><span class="code">*ASC:z升序，默认的</span></span><br><span class="line"><span class="code">*DESC:降序。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">select * from 表名 order by 列名 排序方式;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">*注意：</span></span><br><span class="line"><span class="code">*如果有多个排序条件，则当前边的条件值一样时，才会判断第二条件。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> 聚合函数：将一列数据作为一个整体，进行纵向的计算。</span><br><span class="line"><span class="bullet">1.</span> count：计算个数</span><br><span class="line"><span class="bullet">1.</span> 一般选择非空的列：主键</span><br><span class="line"><span class="bullet">2.</span> count(<span class="emphasis">*)</span></span><br><span class="line"><span class="emphasis">2. max:计算最大值</span></span><br><span class="line"><span class="emphasis">3. min：计算最小值</span></span><br><span class="line"><span class="emphasis">4. sum：计算和</span></span><br><span class="line"><span class="emphasis">5. avg：计算平均值</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">select 聚合函数(列名）from 表名;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">3.</span> 分组查询</span><br><span class="line"><span class="bullet">1.</span> 语法：group by 分组字段；</span><br><span class="line"><span class="code">*按照性别分组，分别查询男、女同学的平均分，人数 要求：分数低于70分的人，不参与分组,分组之后，人数要大于2</span></span><br><span class="line"><span class="code">*SELECT SEX,AVG(math),COUNT(id) FROM student WHRER math &gt; 70 GROUP BY sex HAVING COUNT(id) &gt; 2;</span></span><br><span class="line"><span class="code">2. 注意：</span></span><br><span class="line"><span class="code">1. 分组之后查询的字段：分组字段、集合函数</span></span><br><span class="line"><span class="code">2. where 和 having 的区别？</span></span><br><span class="line"><span class="code">1. where 在分组之前进行限定，如果不满足条件，则不参与分组。having在分组之后进行限定，如果不满足结果，则不会被查询出来。</span></span><br><span class="line"><span class="code">2. where 后不可以跟聚合函数，having可以进行聚合函数的判断。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">4.</span> 分页查询：</span><br><span class="line"><span class="bullet">1.</span> 语法：limit 开始的索引，每页查询的条数；</span><br><span class="line"><span class="bullet">2.</span> 公式：开始的索引 - （当前的页码 - 1） <span class="emphasis">* 每页显示的条数</span></span><br><span class="line"><span class="emphasis">-- 每页显示3条记录</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">select *</span> from student limit 0,3; -- 第1页</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">select * from student limit 3,3; -- 第2页</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">select * from student limit 6,3; -- 第3页</span></span><br><span class="line"><span class="code">3. limit 是一个MySQL“方言”</span></span><br></pre></td></tr></table></figure><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*概念： 对表中的数据进行限定，保证数据的正确性、有效性和完整性。</span></span><br><span class="line"><span class="emphasis">*</span>分类：</span><br><span class="line"><span class="bullet">1.</span> 主键约束：primary key </span><br><span class="line"><span class="bullet">2.</span> 非空约束：not null</span><br><span class="line"><span class="bullet">3.</span> 唯一约束：unique</span><br><span class="line"><span class="bullet">4.</span> 外键约束：foreign key</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 非空约束：not null</span><br><span class="line"><span class="bullet">1.</span> 创建表时添加约束</span><br><span class="line"><span class="code">CREATE TABLE stu(</span></span><br><span class="line"><span class="code">id INT,</span></span><br><span class="line"><span class="code">NAME VARCHAR(20) NOT BULL -- name为非空</span></span><br><span class="line"><span class="code">);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> 创建表玩后，添加非空约束</span><br><span class="line"><span class="code">ALTER TABLE stu NAME VARCHAR(20) NOT NULL;</span></span><br><span class="line"><span class="code">3. 删除name的非空约束</span></span><br><span class="line"><span class="code">ALTER TABLE stu MODIFY NAME VARCHAR(20);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> 唯一约束：unique ，值不能重复</span><br><span class="line"><span class="bullet">1.</span> 创建表时，添加唯一约束</span><br><span class="line"><span class="code">CREATE TABLE stu(</span></span><br><span class="line"><span class="code">id INT,</span></span><br><span class="line"><span class="code">phone_number VARCHAR(20) UNIQUE -- 添加唯一约束</span></span><br><span class="line"><span class="code">);</span></span><br><span class="line"><span class="code">*注意mysql中，唯一约束限定的列的值可以有多个null</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> 删除唯一约束</span><br><span class="line"><span class="code">-- 错误 alter table stu modify phone_number VARCHAR(20); </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">ALTER TABLE stu DROP INDEX phone_number;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3.</span> 在创建表后，添加唯一约束</span><br><span class="line"><span class="code">ALTER TABLE stu MODIFY phone_number VARCHAR(20) UNIQUE;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> 主键约束：primary key</span><br><span class="line"><span class="bullet">1.</span> 注意：</span><br><span class="line"><span class="bullet">1.</span> 含义：非空且唯一</span><br><span class="line"><span class="bullet">2.</span> 一张表只能有一个字段为主键</span><br><span class="line"><span class="bullet">3.</span> 主键就是表中记录的唯一标识</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">2. 在创建表时，添加主键约束</span></span><br><span class="line"><span class="code">create table stu(</span></span><br><span class="line"><span class="code">id int primary key, -- 给id添加主键约束</span></span><br><span class="line"><span class="code">name varchar(20)</span></span><br><span class="line"><span class="code">);</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">3.</span> 删除主键</span><br><span class="line"><span class="code">-- 错误 alter table stu modify id int;</span></span><br><span class="line"><span class="code">ALTER TABLE stu DROP PRIMARY KEY;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">4.</span> 创建完表后，添加主键</span><br><span class="line"><span class="code">ALTER TABLE stu MODIFY id INT PRIMARY KEY;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">5.</span> 自动增长</span><br><span class="line"><span class="bullet">1.</span> 概念：如果某一列是数值类型的，使用 auto<span class="emphasis">_increment 可以来完成值的自动增长</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">2. 在创建表时，添加主键约束，并且完成主键自增长</span></span><br><span class="line"><span class="emphasis">create table stu(</span></span><br><span class="line"><span class="emphasis">id int primary key auto_</span>increment, -- 给id添加主键约束</span><br><span class="line"><span class="code">name varchar(20)</span></span><br><span class="line"><span class="code">);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">3. 删除自动增长</span></span><br><span class="line"><span class="code">ALTER TABLE stu MODIFY id INT;</span></span><br><span class="line"><span class="code">4. 添加自动增长</span></span><br><span class="line"><span class="code">ALTER TABLE stu MODIFY id INT AUTO_INCREMENT;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 外键约束：foreign key，让表与表产生关系，从而保证数据的正确性。</span><br><span class="line"><span class="bullet">1.</span> 在创建表时，可以添加外键</span><br><span class="line"><span class="code">*语法：</span></span><br><span class="line"><span class="code">create table 表名(</span></span><br><span class="line"><span class="code">....</span></span><br><span class="line"><span class="code">外键列</span></span><br><span class="line"><span class="code">constraint 外键名称 foreign key（外键列名称）references 主表名称(主表列名称）</span></span><br><span class="line"><span class="code">）；</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> 删除外键</span><br><span class="line"><span class="code">ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">3. 创建表后，添加外键</span></span><br><span class="line"><span class="code">ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键) REFERENCES 主表名称(主表列名称);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">4.</span> 级联操作</span><br><span class="line"><span class="bullet">1.</span> 添加级联操作</span><br><span class="line"><span class="code">语法：ALTER TABLE 表名 ADD CONSTRAINT 外键名称</span></span><br><span class="line"><span class="code">FOREIGN KEY (外键字段名称） REFERENCES 主表名称(主表列名称) ON UPDATE CASCADE ON DELETE CASCADE ;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> 分类：</span><br><span class="line"><span class="bullet">1.</span> 级联更新：ON UPDATE CASCADE</span><br><span class="line"><span class="bullet">2.</span> 级联删除：ON DELETE CASCADE</span><br></pre></td></tr></table></figure><h3 id="数据库的设计"><a href="#数据库的设计" class="headerlink" title="数据库的设计"></a>数据库的设计</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 多表之间的关系</span><br><span class="line"><span class="bullet">1.</span> 一对一（了解）：</span><br><span class="line"><span class="code">*如：人和身份证</span></span><br><span class="line"><span class="code">*分析：一个人只有一个身份证，一个身份证只能对应一个人</span></span><br><span class="line"><span class="code">2. 一对多（多对一）</span></span><br><span class="line"><span class="code">*如：部门和员工</span></span><br><span class="line"><span class="code">*分析：一个部门有多个员工，一个员工只能对应一个部门</span></span><br><span class="line"><span class="code">3. 多对多：</span></span><br><span class="line"><span class="code">*如：学生和课程</span></span><br><span class="line"><span class="code">*分析：一个学生可以选择很多课程，一个课程也可以被很多学生选择</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> 实现关系：</span><br><span class="line"><span class="bullet">1.</span> 一对多（多对一）：</span><br><span class="line"><span class="code">*如：部门和员工</span></span><br><span class="line"><span class="code">*实现方式：在多的一方建立外键，指向一的一方的主键。</span></span><br><span class="line"><span class="code">2. 多对多：</span></span><br><span class="line"><span class="code">*如：学生和课程</span></span><br><span class="line"><span class="code">*实现方式：多对多关系实现需要借助第三张中间表，中间表至少包含两个字段，这两个字段作为第三张表的外键，分别指向两张表的主键</span></span><br><span class="line"><span class="code">3. 一对一（了解）：</span></span><br><span class="line"><span class="code">*如：人和身份证</span></span><br><span class="line"><span class="code">*实现方式：一对一关系实现，可以在任意一方添加唯一外键指向另一方的主键。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3.</span> 案列</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">-- 创建旅游线路分类表 tab_category</span></span><br><span class="line"><span class="code">-- cid 旅游线路分类主键，自动增长</span></span><br><span class="line"><span class="code">-- cname 旅游线路分类名称非空，唯一，字符串 100</span></span><br><span class="line"><span class="code">CREATE TABLE tab_category(</span></span><br><span class="line"><span class="code">cid INT PRIMARY KEY AUTO_INCREMENT,</span></span><br><span class="line"><span class="code">canme VARCHAR(100) NOT NULL UNIQUE</span></span><br><span class="line"><span class="code">);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">/<span class="emphasis">*rid 旅游线路主键，自动增长</span></span><br><span class="line"><span class="emphasis">rname 旅游线路名称非空，唯一，字符串 100</span></span><br><span class="line"><span class="emphasis">price 价格</span></span><br><span class="line"><span class="emphasis">rdate 上架时间，日期类型</span></span><br><span class="line"><span class="emphasis">cid 外键，所属分类</span></span><br><span class="line"><span class="emphasis">*</span>/</span><br><span class="line">CREATE TABLE tab<span class="emphasis">_route(</span></span><br><span class="line"><span class="emphasis">rid INT PRIMARY KEY AUTO_</span>INCREMENT,</span><br><span class="line"><span class="code">rname VARCHAR(100) NOT NULL UNIQUE,</span></span><br><span class="line"><span class="code">price DOUBLE,</span></span><br><span class="line"><span class="code">rdate DATE,</span></span><br><span class="line"><span class="code">cid INT,</span></span><br><span class="line"><span class="code">FOREIGN KEY (cid) REFERENCES tab_category(cid)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">/<span class="emphasis">*创建用户表 tab_user</span></span><br><span class="line"><span class="emphasis">uid 用户主键，自增长</span></span><br><span class="line"><span class="emphasis">username 用户名长度 100，唯一，非空</span></span><br><span class="line"><span class="emphasis">PASSWORD 密码长度 30，非空</span></span><br><span class="line"><span class="emphasis">NAME 真实姓名长度 100</span></span><br><span class="line"><span class="emphasis">birthday 生日</span></span><br><span class="line"><span class="emphasis">sex 性别，定长字符串 1</span></span><br><span class="line"><span class="emphasis">telephone 手机号，字符串 11</span></span><br><span class="line"><span class="emphasis">email 邮箱，字符串长度 100</span></span><br><span class="line"><span class="emphasis">*</span>/</span><br><span class="line">CREATE TABLE tab<span class="emphasis">_user(</span></span><br><span class="line"><span class="emphasis">uid INT PRIMARY KEY AUTO_</span>INCREMENT,</span><br><span class="line"><span class="code">username VARCHAR(100) UNIQUE NOT NULL,</span></span><br><span class="line"><span class="code">PASSWORD VARCHAR(30) NOT NULL,</span></span><br><span class="line"><span class="code">NAME VARCHAR(100),</span></span><br><span class="line"><span class="code">birthday DATE,</span></span><br><span class="line"><span class="code">sex CHAR(1) DEFAULT &#x27;男&#x27;,</span></span><br><span class="line"><span class="code">telephone VARCHAR(11),</span></span><br><span class="line"><span class="code">email VARCHAR(100)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">/<span class="emphasis">*</span></span><br><span class="line"><span class="emphasis">rid 旅游线路 id，外键</span></span><br><span class="line"><span class="emphasis">date 收藏时间</span></span><br><span class="line"><span class="emphasis">uid 用户 id，外键</span></span><br><span class="line"><span class="emphasis">rid 和 uid  不能重复，设置复合主键，同一个用户不能收藏同一个线路两次</span></span><br><span class="line"><span class="emphasis">*</span>/</span><br><span class="line"></span><br><span class="line">CREATE TABLE tab<span class="emphasis">_favorite(</span></span><br><span class="line"><span class="emphasis">rid INT,</span></span><br><span class="line"><span class="emphasis">DATE DATETIME,</span></span><br><span class="line"><span class="emphasis">uid INT,</span></span><br><span class="line"><span class="emphasis">-- 创建复合主键</span></span><br><span class="line"><span class="emphasis">PRIMARY KEY(rid,uid),</span></span><br><span class="line"><span class="emphasis">FOREIGN KEY (rid) REFERENCES tab_</span>route(rid),</span><br><span class="line"><span class="code">FOREIGN KEY(uid) REFERENCES tab_user(uid)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2.数据库设计范式</span><br><span class="line"><span class="code">*概念：设计数据库时，需要遵循的一些规范。要遵循后边的范式要求，必须先遵循前边的所有范式要求</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">设计关系数据库时，遵从不同的范式要求，设计出合理的关系型数据库，</span></span><br><span class="line"><span class="code">这些不同的规范要求被称为不同的范式，各种范式呈递次范式，越高的范式数据库冗余越小。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF)、第三范式（3NF）、巴斯-科德范式（BCNF）、</span></span><br><span class="line"><span class="code">第四范式（4NF）和第五范式（SNF，又称完美范式）。</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*分裂：</span></span><br><span class="line"><span class="emphasis">1. 第一范式（1NF）：每一列都是不可分割的原子数据项</span></span><br><span class="line"><span class="emphasis">2. 第二范式（2NF）：在1NF的基础上，非码属性必须完全依赖于候选码（在1NF基础上消除非主属性对主码的部分函数依赖）</span></span><br><span class="line"><span class="emphasis">*</span>几个概念：</span><br><span class="line"><span class="bullet">1.</span> 函数依赖：A--&gt;B，如果通过A属性（属性组）的值，可以确定唯一B属性的值。则称B依赖于A</span><br><span class="line"><span class="code">例如：学号--&gt;姓名   （学号，课程名称） --&gt; 分数</span></span><br><span class="line"><span class="code">2. 完全函数依赖：A--&gt;B，如果A是一个属性组，则B属性值的确定需要依赖于A属性组中所有的属性值。</span></span><br><span class="line"><span class="code">例如：（学号，课程名称） --&gt; 分数</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3.</span> 部分函数依赖：A--&gt;B,如果A是一个属性组，则B属性值的确定只需要依赖于A属性组中某一些值即可。</span><br><span class="line"><span class="code">例如：（学号，课程名称） --&gt; 姓名</span></span><br><span class="line"><span class="code">4. 传递函数依赖：A--&gt;B, B--&gt;C ，如果通过A属性（属性组）的值，可以确 定唯一B属性的值，在通过B属性（属性组）的值可以确定唯一C属性的值，则称C 传递函数依赖于A</span></span><br><span class="line"><span class="code">例如：学号--&gt;系名，系名--&gt;系主任</span></span><br><span class="line"><span class="code">5. 码：如果一张表中，一个属性或属性组，被其他所有属性所完全依赖，则称这个属性（属性组）为该表的码</span></span><br><span class="line"><span class="code">例如：该表中码为：（学号，课程名称）</span></span><br><span class="line"><span class="code">*主属性：码属性组中的所有属性</span></span><br><span class="line"><span class="code">*非主属性：除过码属性组的属性</span></span><br><span class="line"><span class="code">3. 第三范式（3NF）：在2NF的基础上，任何非主属性不依赖于其他非主属性（在2NF基础上消除传递依赖）</span></span><br></pre></td></tr></table></figure><h3 id="数据库的备份和还原"><a href="#数据库的备份和还原" class="headerlink" title="数据库的备份和还原"></a>数据库的备份和还原</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 命令行：</span><br><span class="line"><span class="code">*语法：</span></span><br><span class="line"><span class="code">*备份：mysqldump -u用户名 -p密码 &gt; 保存的路径</span></span><br><span class="line"><span class="code">*还原：</span></span><br><span class="line"><span class="code">1. 登录数据库</span></span><br><span class="line"><span class="code">2. 创建数据库</span></span><br><span class="line"><span class="code">3. 使用数据库</span></span><br><span class="line"><span class="code">4. 执行文件。source 文件路径</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> 图形化工具</span><br></pre></td></tr></table></figure><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 查询语句：</span><br><span class="line"><span class="code">select</span></span><br><span class="line"><span class="code">列名列表</span></span><br><span class="line"><span class="code">from</span></span><br><span class="line"><span class="code">表名列表</span></span><br><span class="line"><span class="code">where.....</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> 笛卡尔积：</span><br><span class="line"><span class="bullet">*</span> 有两个集合A,B 取这两个集合的所有组合情况</span><br><span class="line"><span class="bullet">*</span> 要完成多表查询，需要消除无用的数据</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">* 多表查询的分类：</span></span><br><span class="line"><span class="code">1. 内连接查询：</span></span><br><span class="line"><span class="code">1. 隐式内连接：使用where条件消除无用数据</span></span><br><span class="line"><span class="code">2. 显示内连接：</span></span><br><span class="line"><span class="code">*语法：select 字段列表 from 表名1 [inner] join 表名2 on 条件</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">3. 内连接查询：</span></span><br><span class="line"><span class="code">1. 从哪些表查询数据</span></span><br><span class="line"><span class="code">2. 条件是什么</span></span><br><span class="line"><span class="code">3. 查询哪些数据</span></span><br><span class="line"><span class="code">2. 外连接查询：</span></span><br><span class="line"><span class="code">1. 左外连接：</span></span><br><span class="line"><span class="code">* 语法：select  字段列表 from 表1 left [outer] join 表2 on 条件;</span></span><br><span class="line"><span class="code">* 查询的是左表所有数据以及其交集部分。</span></span><br><span class="line"><span class="code">2. 右外连接：</span></span><br><span class="line"><span class="code">*语法：select 字段列表 from 表1 right [outer] jion 表2 on 条件;</span></span><br><span class="line"><span class="code">3. 子查询：</span></span><br><span class="line"><span class="code">* 概念：查询中嵌套查询，称嵌套查询为子查询。</span></span><br><span class="line"><span class="code">-- 查询工资最高的员工信息</span></span><br><span class="line"><span class="code">-- 1 查询最高的工资是多少 9000</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">SELECT MAX(salary) FROM emp;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">--2 查询员工信息，并且工资等于9000的</span></span><br><span class="line"><span class="code">SELECT * FROM emp WHERE emp.salary = 9000;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">-- 一条sql语句就完成这个操作。子查询</span></span><br><span class="line"><span class="code">SELECT * FROM emp WHERE emp.&#x27;salary&#x27; = (SELECT MAX(salary) FROM emp);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> 子查询的不同情况</span><br><span class="line"><span class="bullet">1.</span> 子查询的结果是单行单列的：</span><br><span class="line"><span class="code">*子查询可以作为条件，使用运算符去判断。运算符 ：&gt; &gt;= &lt; &lt;= =</span></span><br><span class="line"><span class="code">-- 查询员工工资小于平均工资的人</span></span><br><span class="line"><span class="code">SELECT * FROM emp WHERE emp.salary &lt; (SELECT AVG(salary) FROM emp);</span></span><br><span class="line"><span class="code">2. 子查询的结果是多行单列的：</span></span><br><span class="line"><span class="code">* 子查询可以作为条件，使用运算符in来判断</span></span><br><span class="line"><span class="code">-- 查询&#x27;财务部&#x27; 和 &#x27;市场部&#x27; 所有员工信息</span></span><br><span class="line"><span class="code">SELECT id FROM dept WHERE NAME = &#x27;财务部&#x27; OR NAME = &#x27;市场部&#x27;;</span></span><br><span class="line"><span class="code">SELECT * FROM emp WHERE dept_id = 3 OR dept_id = 2;</span></span><br><span class="line"><span class="code">-- 子查询</span></span><br><span class="line"><span class="code">SELECT * FROM emp WHERE dept_id IN (SELECT id FROM dept WHERE NAME = &#x27;财务部&#x27; OR NAME = &#x27;市场部&#x27;);</span></span><br><span class="line"><span class="code">3. 子查询的结果是多行多列的：</span></span><br><span class="line"><span class="code">* 子查询可以作为一张虚拟表参与查询</span></span><br><span class="line"><span class="code">-- 查询员工入职日期是2011-11-11日之后的员工信息和部门信息</span></span><br><span class="line"><span class="code">-- 子查询</span></span><br><span class="line"><span class="code">SELECT * FROM dept t1,(SELECT * FROM emp WHERE emp.&#x27;jion_date&#x27; &gt; &#x27;2011-11-11) t2 WHERE t1.id = t2.dept_id;</span></span><br><span class="line"><span class="code">-- 普通内连接</span></span><br><span class="line"><span class="code">SELECT * FROM emp t1,dept t2 WHERE t1.&#x27;dept_id&#x27; = t2.&#x27;id&#x27; AND t1.&#x27;jion_date&#x27; &gt; &#x27;2011-11-11&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 事务的基本介绍</span><br><span class="line"><span class="bullet">1.</span> 概念：</span><br><span class="line"><span class="bullet">*</span> 如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失效。</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 操作：</span><br><span class="line"><span class="bullet">1.</span> 开启事务：start transaction;</span><br><span class="line"><span class="bullet">2.</span> 回滚：rollback;</span><br><span class="line"><span class="bullet">3.</span> 提交:commit;</span><br><span class="line"><span class="bullet">3.</span> 例子：</span><br><span class="line"><span class="code">CREATE TABLE account(</span></span><br><span class="line"><span class="code">id INT PRIMARY KEY AUTO_INCREMENT,</span></span><br><span class="line"><span class="code">NAME VARCHAR(10),</span></span><br><span class="line"><span class="code">balance DOUBLE</span></span><br><span class="line"><span class="code">);</span></span><br><span class="line"><span class="code">-- 添加数据</span></span><br><span class="line"><span class="code">INSERT INTO account (NAME,balance) VALUES (&#x27;zhangsan&#x27;,1000),(&#x27;lisi&#x27;,1000);</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">SELECT * FROM account;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">-- 张三给李四转账 500 元</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">-- 0. 开启事务</span></span><br><span class="line"><span class="code">START TRANSACTION;</span></span><br><span class="line"><span class="code">-- 1. 张三账户 -500</span></span><br><span class="line"><span class="code">UPDATE account SET balance = balance - 500 WHERE NAME = &#x27;zhangsan&#x27;;</span></span><br><span class="line"><span class="code">-- 2. 李四账户 +500</span></span><br><span class="line"><span class="code">-- 出错了....</span></span><br><span class="line"><span class="code">UPDATE account SET balance = balance + 500 WHERE NAME = &#x27;lisi&#x27;;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">-- 发现执行没有问题，提交事务</span></span><br><span class="line"><span class="code">COMMIT;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">-- 发现出问题了，回滚事务</span></span><br><span class="line"><span class="code">ROLLBACK;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">4.</span> MySQL数据库中事务默认自动提交</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 事务提交的两种方式：</span><br><span class="line"><span class="bullet">*</span> 自动提交：</span><br><span class="line"><span class="bullet">*</span> mysql就是自动提交的</span><br><span class="line"><span class="bullet">*</span> 一条DML(增删改)语句会自动提交一次事务。</span><br><span class="line"><span class="bullet">*</span> 手动提交：</span><br><span class="line"><span class="bullet">*</span> Oracle 数据库默认是手动提交事务</span><br><span class="line"><span class="bullet">*</span> 需要先开启事务，再提交</span><br><span class="line"><span class="bullet">*</span> 修改事务的默认提交方式：</span><br><span class="line"><span class="bullet">*</span> 查看事务的默认提交方式：SELECT @@autocommit; -- 1 代表自动提交   0  代表手动提交</span><br><span class="line"><span class="bullet">*</span> 修改默认提交方式：SET @@autocommit = 0; -- 修改默认提交方式</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">2.</span> 事务的四大特征：</span><br><span class="line"><span class="bullet">1.</span> 原子性：是不可分割的最小操作单位，要么同时成功，要么同时失败。</span><br><span class="line"><span class="bullet">2.</span> 持久性：当事务提交或回滚后，数据库会持久化的保存数据。</span><br><span class="line"><span class="bullet">3.</span> 隔离性：多个事务之间，相互独立</span><br><span class="line"><span class="bullet">4.</span> 一致性：事务操作前后，数据总量不变 </span><br></pre></td></tr></table></figure><h3 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> SQL分类：</span><br><span class="line"><span class="bullet">1.</span> DDL：操作数据库和表</span><br><span class="line"><span class="bullet">2.</span> DML:增删改表中数据</span><br><span class="line"><span class="bullet">3.</span> DQL：查询表中数据</span><br><span class="line"><span class="bullet">4.</span> DCL:管理用户，授权</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> DBA：数据库管路员</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> DCL：管理用户，授权</span><br><span class="line"><span class="bullet">1.</span> 管理用户</span><br><span class="line"><span class="bullet">1.</span> 添加用户</span><br><span class="line"><span class="bullet">*</span> CREATE USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED BY &#x27;密码&#x27;;</span><br><span class="line"><span class="bullet">2.</span> 删除用户：</span><br><span class="line"><span class="bullet">*</span> DROP USER &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> 修改用户密码：</span><br><span class="line"><span class="bullet">*</span> UPDATE USER SET PASSWORD(&#x27;新密码&#x27;) WHERE USER = &#x27;用户名&#x27;;</span><br><span class="line"><span class="bullet">*</span> SET PASSWORD FOR &#x27;用户名&#x27;@&#x27;主机名&#x27; = PASSWORD(&#x27;新密码&#x27;);</span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> 查询用户：</span><br><span class="line"><span class="code">--1. 切换到mysql数据库</span></span><br><span class="line"><span class="code">USE mysql</span></span><br><span class="line"><span class="code">--2.查询user表</span></span><br><span class="line"><span class="code">SELECT * FROM USER;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> 通配符： % 表示可以在任意主机使用用户登录数据库</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 权限管理：</span><br><span class="line"><span class="bullet">1.</span> 查询权限：</span><br><span class="line"><span class="code">SHOW GRANT FOR &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span></span><br><span class="line"><span class="code">2. 授予权限：</span></span><br><span class="line"><span class="code">GRANT 权限列表 ON 数据库名.表名 TO &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span></span><br><span class="line"><span class="code">3. 撤销权限：</span></span><br><span class="line"><span class="code">REVOKE 权限列表 ON 数据库名.表名 FROM &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span></span><br></pre></td></tr></table></figure><h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 概念：java DataBase Connectivity  java数据库连接，java语言操作数据库</span><br><span class="line"><span class="code">*JDBC本质：其实是官方(sun公司)定义的一套操作所有关系型数据库的规则，及接口。各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> 快速入门：</span><br><span class="line"><span class="bullet">*</span> 步骤：</span><br><span class="line"><span class="bullet">1.</span> 导入jar包 mysql-connector-java-8.0.23.jar</span><br><span class="line"><span class="code">1.复制 mysql-connector-java-8.0.23.jar到项目的libs目录下</span></span><br><span class="line"><span class="code">2.右键--&gt; Add As Library</span></span><br><span class="line"><span class="code">2. 注册驱动</span></span><br><span class="line"><span class="code">3. 获取数据库连接对象 Connecion  （其实就是向系统底层获取资源，比较费时）</span></span><br><span class="line"><span class="code">4. 定义sql</span></span><br><span class="line"><span class="code">5. 获取执行sql语句的对象 Statement</span></span><br><span class="line"><span class="code">6. 执行sql，接收返回结果</span></span><br><span class="line"><span class="code">7. 处理结果</span></span><br><span class="line"><span class="code">8. 释放资源</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">代码实现：</span></span><br><span class="line"><span class="code">//1. 导入驱动jar包</span></span><br><span class="line"><span class="code">        //2. 注册驱动</span></span><br><span class="line"><span class="code">        Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span></span><br><span class="line"><span class="code">        //3. 获取数据库连接对象</span></span><br><span class="line"><span class="code">        Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/db1&quot;,&quot;root&quot;,&quot;root&quot;);</span></span><br><span class="line"><span class="code">        //4. 定义sql语句</span></span><br><span class="line"><span class="code">        String sql = &quot;update account set balance = 500 where id = 1&quot;;</span></span><br><span class="line"><span class="code">        //5. 获取执行sql的对象 Statement</span></span><br><span class="line"><span class="code">        Statement stat = conn.createStatement();</span></span><br><span class="line"><span class="code">        //6. 执行sql</span></span><br><span class="line"><span class="code">        int count = stat.executeUpdate(sql);</span></span><br><span class="line"><span class="code">        //7. 处理结果</span></span><br><span class="line"><span class="code">        System.out.println(count);</span></span><br><span class="line"><span class="code">        //8. 释放资源</span></span><br><span class="line"><span class="code">        stat.close();</span></span><br><span class="line"><span class="code">        conn.close();</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">3.</span> 详解各个对象：</span><br><span class="line"><span class="bullet">1.</span> DriverManager：驱动管理对象</span><br><span class="line"><span class="code">*功能：</span></span><br><span class="line"><span class="code">1. 注册驱动</span></span><br><span class="line"><span class="code">static voidsetLoginTimeout(int seconds)设置驱动程序在识别驱动程序后尝试连接到数据库时等待的最长时间（秒）。</span></span><br><span class="line"><span class="code">写代码使用：Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span></span><br><span class="line"><span class="code">通过查看源码发现：在com.mysql.cj.jdbc.Driver类中存在静态代码块：</span></span><br><span class="line"><span class="code">static &#123;</span></span><br><span class="line"><span class="code">    try &#123;</span></span><br><span class="line"><span class="code">        DriverManager.registerDriver(new Driver());</span></span><br><span class="line"><span class="code">        &#125; catch (SQLException var1) &#123;</span></span><br><span class="line"><span class="code">            throw new RuntimeException(&quot;Can&#x27;t register driver!&quot;);</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">注意：mysql5之后的驱动jar包可以省略注册驱动的步骤。</span></span><br><span class="line"><span class="code">2. 获取数据库连接：</span></span><br><span class="line"><span class="code">* 方法：static Connection getConnection(String url,String user,String password)</span></span><br><span class="line"><span class="code">* 参数：</span></span><br><span class="line"><span class="code">* url：指定连接的路径</span></span><br><span class="line"><span class="code">* 语法：jdbc:mysql://ip地址(域名):端口号/数据库名称</span></span><br><span class="line"><span class="code">* 细节：如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，这url可以简写为：jdbc:mysql://数据库名称</span></span><br><span class="line"><span class="code">* user:用户名</span></span><br><span class="line"><span class="code">* password：密码</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">2. Connection：数据库连接对象</span></span><br><span class="line"><span class="code">1. 功能：</span></span><br><span class="line"><span class="code">1. 获取执行sql 的对象</span></span><br><span class="line"><span class="code">* Statement createStatement()</span></span><br><span class="line"><span class="code">* PreparedStatement prepareStatement(String sql)</span></span><br><span class="line"><span class="code">2. 管理事务：</span></span><br><span class="line"><span class="code">* 开启事务：SetAutoCommit(boolean autoCommit) :调用该方法设置参数为false，即开启事务</span></span><br><span class="line"><span class="code">* 提交事务：commit()</span></span><br><span class="line"><span class="code">* 回滚事务：rollback()</span></span><br><span class="line"><span class="code">3. Statement：执行sql的对象</span></span><br><span class="line"><span class="code">1. 执行sql</span></span><br><span class="line"><span class="code">1. boolean execute(String sql) :可以执行任意的sql （了解）</span></span><br><span class="line"><span class="code">2. int executeUpdate(String sql)：执行DML(insert、update、delete）语句、DDL(create、alter、drop）语句</span></span><br><span class="line"><span class="code">* 返回值：影响的行数，可以通过这个影响的行数判断DML语句是否执行成功 返回值&gt;0的则执行成功，反之，则失败。</span></span><br><span class="line"><span class="code">3. ResulSet executeQuery(String sql) :执行DQL（select）语句</span></span><br><span class="line"><span class="code">2. 练习：</span></span><br><span class="line"><span class="code">1. account表 添加一条记录</span></span><br><span class="line"><span class="code">代码：</span></span><br><span class="line"><span class="code">Statement stat = null;</span></span><br><span class="line"><span class="code">    Connection conn = null;</span></span><br><span class="line"><span class="code">        try &#123;</span></span><br><span class="line"><span class="code">            //注册驱动</span></span><br><span class="line"><span class="code">            Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span></span><br><span class="line"><span class="code">            //定义sql</span></span><br><span class="line"><span class="code">            String sql = &quot;insert into account values(null,&#x27;王五&#x27;,3000)&quot;;</span></span><br><span class="line"><span class="code">            //3.获取Connection对象</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">            conn = DriverManager.getConnection(&quot;jdbc:mysql:///db1&quot;, &quot;root&quot;, &quot;root&quot;);</span></span><br><span class="line"><span class="code">            //4.获取执行sql的对象 Statement</span></span><br><span class="line"><span class="code">            stat = conn.createStatement();</span></span><br><span class="line"><span class="code">            //5.执行sql</span></span><br><span class="line"><span class="code">            int count = stat.executeUpdate(sql); //影响的行数</span></span><br><span class="line"><span class="code">            //6.处理结果</span></span><br><span class="line"><span class="code">            System.out.println(count);</span></span><br><span class="line"><span class="code">            if (count &gt; 0) &#123;</span></span><br><span class="line"><span class="code">                System.out.println(&quot;添加成功！&quot;);</span></span><br><span class="line"><span class="code">            &#125; else &#123;</span></span><br><span class="line"><span class="code">                System.out.println(&quot;添加失败&quot;);</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">        &#125; catch (SQLException throwables) &#123;</span></span><br><span class="line"><span class="code">            throwables.printStackTrace();</span></span><br><span class="line"><span class="code">        &#125; catch (ClassNotFoundException e) &#123;</span></span><br><span class="line"><span class="code">            e.printStackTrace();</span></span><br><span class="line"><span class="code">        &#125; finally &#123;</span></span><br><span class="line"><span class="code">            //7.释放资源</span></span><br><span class="line"><span class="code">            //避免空指针异常</span></span><br><span class="line"><span class="code">            if (stat != null) &#123;</span></span><br><span class="line"><span class="code">                try &#123;</span></span><br><span class="line"><span class="code">                    stat.close();</span></span><br><span class="line"><span class="code">                &#125; catch (SQLException throwables) &#123;</span></span><br><span class="line"><span class="code">                    throwables.printStackTrace();</span></span><br><span class="line"><span class="code">                &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">            if (conn != null) &#123;</span></span><br><span class="line"><span class="code">                try &#123;</span></span><br><span class="line"><span class="code">                    conn.close();</span></span><br><span class="line"><span class="code">                &#125; catch (SQLException throwables) &#123;</span></span><br><span class="line"><span class="code">                    throwables.printStackTrace();</span></span><br><span class="line"><span class="code">                &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> account表 修改一条记录</span><br><span class="line"><span class="code">代码：</span></span><br><span class="line"><span class="code">Connection conn = null;</span></span><br><span class="line"><span class="code">    Statement stmt = null;</span></span><br><span class="line"><span class="code">        try &#123;</span></span><br><span class="line"><span class="code">            //1.注册驱动</span></span><br><span class="line"><span class="code">            Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span></span><br><span class="line"><span class="code">            //2.获取连接对象</span></span><br><span class="line"><span class="code">            conn = DriverManager.getConnection(&quot;jdbc:mysql:///db1&quot;, &quot;root&quot;, &quot;root&quot;);</span></span><br><span class="line"><span class="code">            //3.定义sql语句</span></span><br><span class="line"><span class="code">            String sql = &quot;update account set balance = 1500 where id = 3&quot;;</span></span><br><span class="line"><span class="code">            //4.获取执行sql对象</span></span><br><span class="line"><span class="code">            stmt = conn.createStatement();</span></span><br><span class="line"><span class="code">            //5.执行sql</span></span><br><span class="line"><span class="code">            int count = stmt.executeUpdate(sql);</span></span><br><span class="line"><span class="code">            //6.处理结果</span></span><br><span class="line"><span class="code">            System.out.println(count);</span></span><br><span class="line"><span class="code">            if (count &gt; 0) &#123;</span></span><br><span class="line"><span class="code">                System.out.println(&quot;添加成功&quot;);</span></span><br><span class="line"><span class="code">            &#125; else &#123;</span></span><br><span class="line"><span class="code">                System.out.println(&quot;添加失败&quot;);</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">        &#125; catch (ClassNotFoundException e) &#123;</span></span><br><span class="line"><span class="code">            e.printStackTrace();</span></span><br><span class="line"><span class="code">        &#125; catch (SQLException throwables) &#123;</span></span><br><span class="line"><span class="code">            throwables.printStackTrace();</span></span><br><span class="line"><span class="code">        &#125; finally &#123;</span></span><br><span class="line"><span class="code">            //7.释放资源</span></span><br><span class="line"><span class="code">            if (stmt != null) &#123;</span></span><br><span class="line"><span class="code">                try &#123;</span></span><br><span class="line"><span class="code">                    stmt.close();</span></span><br><span class="line"><span class="code">                &#125; catch (SQLException throwables) &#123;</span></span><br><span class="line"><span class="code">                    throwables.printStackTrace();</span></span><br><span class="line"><span class="code">                &#125;</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">            if (conn != null) &#123;</span></span><br><span class="line"><span class="code">                try &#123;</span></span><br><span class="line"><span class="code">                    conn.close();</span></span><br><span class="line"><span class="code">                &#125; catch (SQLException throwables) &#123;</span></span><br><span class="line"><span class="code">                    throwables.printStackTrace();</span></span><br><span class="line"><span class="code">                &#125;</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">3. account表 删除一条记录</span></span><br><span class="line"><span class="code">代码：</span></span><br><span class="line"><span class="code">Connection conn = null;</span></span><br><span class="line"><span class="code">    Statement stmt = null;</span></span><br><span class="line"><span class="code">        try &#123;</span></span><br><span class="line"><span class="code">            //1.注册驱动</span></span><br><span class="line"><span class="code">            Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span></span><br><span class="line"><span class="code">            //2.获取连接对象</span></span><br><span class="line"><span class="code">            conn = DriverManager.getConnection(&quot;jdbc:mysql:///db1&quot;, &quot;root&quot;, &quot;root&quot;);</span></span><br><span class="line"><span class="code">            //3.定义sql语句</span></span><br><span class="line"><span class="code">            String sql = &quot;delete from account where id = 3&quot;;</span></span><br><span class="line"><span class="code">            //4.获取执行sql对象</span></span><br><span class="line"><span class="code">            stmt = conn.createStatement();</span></span><br><span class="line"><span class="code">            //5.执行sql</span></span><br><span class="line"><span class="code">            int count = stmt.executeUpdate(sql);</span></span><br><span class="line"><span class="code">            //6.处理结果</span></span><br><span class="line"><span class="code">            System.out.println(count);</span></span><br><span class="line"><span class="code">            if (count &gt; 0) &#123;</span></span><br><span class="line"><span class="code">                System.out.println(&quot;删除成功&quot;);</span></span><br><span class="line"><span class="code">            &#125; else &#123;</span></span><br><span class="line"><span class="code">                System.out.println(&quot;删除失败&quot;);</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">        &#125; catch (ClassNotFoundException e) &#123;</span></span><br><span class="line"><span class="code">            e.printStackTrace();</span></span><br><span class="line"><span class="code">        &#125; catch (SQLException throwables) &#123;</span></span><br><span class="line"><span class="code">            throwables.printStackTrace();</span></span><br><span class="line"><span class="code">        &#125; finally &#123;</span></span><br><span class="line"><span class="code">            //7.释放资源</span></span><br><span class="line"><span class="code">            if (conn != null) &#123;</span></span><br><span class="line"><span class="code">                try &#123;</span></span><br><span class="line"><span class="code">                    conn.close();</span></span><br><span class="line"><span class="code">                &#125; catch (SQLException throwables) &#123;</span></span><br><span class="line"><span class="code">                    throwables.printStackTrace();</span></span><br><span class="line"><span class="code">                &#125;</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">            if (stmt != null) &#123;</span></span><br><span class="line"><span class="code">                try &#123;</span></span><br><span class="line"><span class="code">                    stmt.close();</span></span><br><span class="line"><span class="code">                &#125; catch (SQLException throwables) &#123;</span></span><br><span class="line"><span class="code">                    throwables.printStackTrace();</span></span><br><span class="line"><span class="code">                &#125;</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">4.</span> ResultSet：结果集对象，封装查询结果</span><br><span class="line"><span class="bullet">*</span> boolean next():游标向下移动一行，判断当前行是否是最后一行末尾（是否有数据），如果是，返回false，如果不是则返回true</span><br><span class="line"><span class="bullet">*</span> getXxx(参数):获取数据</span><br><span class="line"><span class="bullet">*</span> Xxx：代表数据类型 如：int getint(),String getString()</span><br><span class="line"><span class="bullet">*</span> 参数：</span><br><span class="line"><span class="bullet">1.</span> int:代表列的编号，从1开始  如：getString(1)</span><br><span class="line"><span class="bullet">2.</span> String:代表列名称。 如：getDouble(&quot;balance&quot;)</span><br><span class="line"><span class="bullet">*</span> 注意：</span><br><span class="line"><span class="bullet">*</span> 使用步骤：</span><br><span class="line"><span class="bullet">1.</span> 游标向下移动一行</span><br><span class="line"><span class="bullet">2.</span> 判断是否有数据</span><br><span class="line"><span class="bullet">3.</span> 获取数据</span><br><span class="line"></span><br><span class="line"><span class="code">//循环判断游标是否是最后一行末尾</span></span><br><span class="line"><span class="code">            while (rs.next())&#123;</span></span><br><span class="line"><span class="code">                //获取数据</span></span><br><span class="line"><span class="code">                //6.2 获取数据</span></span><br><span class="line"><span class="code">                int id = rs.getInt(1);</span></span><br><span class="line"><span class="code">                String name = rs.getString(&quot;name&quot;);</span></span><br><span class="line"><span class="code">                double balance = rs.getDouble(3);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">                System.out.println(id + &quot;...&quot; + name + &quot;...&quot; + balance);</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">5. PrepareStatement:执行sql对象</span></span><br><span class="line"><span class="code">1. SQL注入问题：在拼接sql时，有一些sql的特殊关键字与字符串拼接，会造成安全性问题</span></span><br><span class="line"><span class="code">1. 用户名随便输入，输入密码：a&#x27; or &#x27;a&#x27; = &#x27;a</span></span><br><span class="line"><span class="code">2. sql:select * from user where username = &#x27;ahhfhg&#x27; and password = &#x27;a&#x27; or &#x27;a&#x27; = &#x27;a&#x27;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> 解决sql注入问题：使用PreparedStatement对象来解决</span><br><span class="line"><span class="bullet">3.</span> 预编译的SQL：参数使用？作为占位符</span><br><span class="line"><span class="bullet">4.</span> 步骤：</span><br><span class="line"><span class="bullet">1.</span> 导入驱动jar包 mysql-connector-java-8.0.23.jar</span><br><span class="line"><span class="bullet">2.</span> 注册驱动</span><br><span class="line"><span class="bullet">3.</span> 获取数据库连接对象 Connection</span><br><span class="line"><span class="bullet">4.</span> 定义sql</span><br><span class="line"><span class="bullet">*</span> 注意：sql的参数使用？作为占位符。如：select <span class="emphasis">* from user where username = ? and password = ?;</span></span><br><span class="line"><span class="emphasis">5. 获取执行sql语句的对象 PreparedStatement Connection.prepareStatement(String sql)</span></span><br><span class="line"><span class="emphasis">6. 给？赋值：</span></span><br><span class="line"><span class="emphasis">*</span> 方法：setXxx(参数1，参数2)</span><br><span class="line"><span class="bullet">*</span> 参数1：？的位置编号 从1开始</span><br><span class="line"><span class="bullet">*</span> 参数2：？的值</span><br><span class="line"><span class="bullet">7.</span> 执行sql，接受返回结果</span><br><span class="line"><span class="bullet">8.</span> 处理结果</span><br><span class="line"><span class="bullet">9.</span> 释放资源</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">5. 注意：后期都会使用PreparedStatement来完成增删改查的所有操作</span></span><br><span class="line"><span class="code">1. 可以防止SQL注入</span></span><br><span class="line"><span class="code">2. 效率更高</span></span><br></pre></td></tr></table></figure><h3 id="抽取JDBC工具类-：JDBCUtils"><a href="#抽取JDBC工具类-：JDBCUtils" class="headerlink" title="抽取JDBC工具类 ：JDBCUtils"></a>抽取JDBC工具类 ：JDBCUtils</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 目的：简化书写</span><br><span class="line"><span class="bullet">*</span> 分析：</span><br><span class="line"><span class="bullet">1.</span> 注册驱动也抽取</span><br><span class="line"><span class="bullet">2.</span> 抽取一个方法获取连接对象</span><br><span class="line"><span class="bullet">3.</span> 抽取一个方法释放资源</span><br><span class="line"><span class="bullet">*</span> 需求：不想传递参数（麻烦），还得保证工具类的通用性。</span><br><span class="line"><span class="bullet">*</span> 解决：配置文件</span><br><span class="line"><span class="code">jdbc.priperties</span></span><br><span class="line"><span class="code">url=</span></span><br><span class="line"><span class="code">user=</span></span><br><span class="line"><span class="code">password=</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">代码：</span></span><br><span class="line"><span class="code">private static String url;</span></span><br><span class="line"><span class="code">    private static String user;</span></span><br><span class="line"><span class="code">    private static String password;</span></span><br><span class="line"><span class="code">    private static String driver;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    /**</span></span><br><span class="line"><span class="code">     * 文件的读取，只需要读取一次即可拿到这些值，使用静态代码块</span></span><br><span class="line"><span class="code">     */</span></span><br><span class="line"><span class="code">    static &#123;</span></span><br><span class="line"><span class="code">        //读取资源文件，获取值。</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">        try &#123;</span></span><br><span class="line"><span class="code">            //1.创建Properties集合类</span></span><br><span class="line"><span class="code">            Properties pro = new Properties();</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">            //获取src路径下的文件的方式---&gt;Classloader 类加载器</span></span><br><span class="line"><span class="code">            ClassLoader classLoader = JDBCUtils.class.getClassLoader();</span></span><br><span class="line"><span class="code">            URL res = classLoader.getResource(&quot;jdbc.properties&quot;);</span></span><br><span class="line"><span class="code">            String path = res.getPath();</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        //2.加载文件</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        pro.load(new FileReader(path));</span></span><br><span class="line"><span class="code">        //3.获取数据，赋值</span></span><br><span class="line"><span class="code">        url = pro.getProperty(&quot;url&quot;);</span></span><br><span class="line"><span class="code">        user = pro.getProperty(&quot;user&quot;);</span></span><br><span class="line"><span class="code">        password = pro.getProperty(&quot;password&quot;);</span></span><br><span class="line"><span class="code">        driver = pro.getProperty(&quot;driver&quot;);</span></span><br><span class="line"><span class="code">        //4.注册驱动</span></span><br><span class="line"><span class="code">        Class.forName(driver);</span></span><br><span class="line"><span class="code">    &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="code">        e.printStackTrace();</span></span><br><span class="line"><span class="code">    &#125; catch (ClassNotFoundException e) &#123;</span></span><br><span class="line"><span class="code">        e.printStackTrace();</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    /**</span></span><br><span class="line"><span class="code">     * 获取连接</span></span><br><span class="line"><span class="code">     * @return连接对象</span></span><br><span class="line"><span class="code">     */</span></span><br><span class="line"><span class="code">public static Connection gerConnection() throws SQLException &#123;</span></span><br><span class="line"><span class="code">    return DriverManager.getConnection(url,user,password);</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    /**</span></span><br><span class="line"><span class="code">     * 释放资源</span></span><br><span class="line"><span class="code">     * @param rs</span></span><br><span class="line"><span class="code">     * @param stmt</span></span><br><span class="line"><span class="code">     * @param conn</span></span><br><span class="line"><span class="code">     */</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">public static void close(ResultSet rs,Statement stmt,Connection conn)&#123;</span><br><span class="line"><span class="code">    if(rs != null)&#123;</span></span><br><span class="line"><span class="code">        try &#123;</span></span><br><span class="line"><span class="code">            rs.close();</span></span><br><span class="line"><span class="code">        &#125; catch (SQLException throwables) &#123;</span></span><br><span class="line"><span class="code">            throwables.printStackTrace();</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">    if(stmt != null)&#123;</span></span><br><span class="line"><span class="code">        try &#123;</span></span><br><span class="line"><span class="code">            stmt.close();</span></span><br><span class="line"><span class="code">        &#125; catch (SQLException throwables) &#123;</span></span><br><span class="line"><span class="code">            throwables.printStackTrace();</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">    if(conn != null)&#123;</span></span><br><span class="line"><span class="code">        try &#123;</span></span><br><span class="line"><span class="code">            conn.close();</span></span><br><span class="line"><span class="code">        &#125; catch (SQLException throwables) &#123;</span></span><br><span class="line"><span class="code">            throwables.printStackTrace();</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 练习：</span><br><span class="line"><span class="bullet">*</span> 需求：</span><br><span class="line"><span class="bullet">1.</span> 通过键盘录入用户名和密码</span><br><span class="line"><span class="bullet">2.</span> 判断用户是否登录成功</span><br><span class="line"><span class="bullet">*</span> select <span class="emphasis">* from user where username = &quot;&quot; and password = &quot;&quot;;</span></span><br><span class="line"><span class="emphasis">*</span> 如果这个sql有查询结果，则成功，反之，则失败</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 步骤：</span><br><span class="line"><span class="bullet">1.</span> 创建数据库表 user</span><br><span class="line"><span class="code">CREATE TABLE USER(</span></span><br><span class="line"><span class="code">id INT PRIMARY KEY AUTO_INCREMENT,</span></span><br><span class="line"><span class="code">username VARCHAR(32),</span></span><br><span class="line"><span class="code">PASSWORD VARCHAR(32)</span></span><br><span class="line"><span class="code">);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">INSERT INTO USER VALUES(NULL,&#x27;zhangsan&#x27;,&#x27;123&#x27;);</span></span><br><span class="line"><span class="code">INSERT INTO USER VALUES(NULL,&#x27;lisi&#x27;,&#x27;234&#x27;);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">代码：</span></span><br><span class="line"><span class="code">//1.键盘录入，接受用户名和密码</span></span><br><span class="line"><span class="code">        Scanner sc = new Scanner(System.in);</span></span><br><span class="line"><span class="code">        System.out.println(&quot;请输入用户名:&quot;);</span></span><br><span class="line"><span class="code">        String username = sc.nextLine();</span></span><br><span class="line"><span class="code">        System.out.println(&quot;请输入密码:&quot;);</span></span><br><span class="line"><span class="code">        String password = sc.nextLine();</span></span><br><span class="line"><span class="code">        //2.调用方法</span></span><br><span class="line"><span class="code">        boolean flag = new JDBCDemo7().login2(username, password);</span></span><br><span class="line"><span class="code">        //3.判断结束，输出不同语句</span></span><br><span class="line"><span class="code">        if (flag) &#123;</span></span><br><span class="line"><span class="code">            //登录成功</span></span><br><span class="line"><span class="code">            System.out.println(&quot;登录成功&quot;);</span></span><br><span class="line"><span class="code">        &#125; else</span></span><br><span class="line"><span class="code">            System.out.println(&quot;用户名或密码错误！&quot;);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    /**</span></span><br><span class="line"><span class="code">     * 登录方法</span></span><br><span class="line"><span class="code">     */</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">public boolean login2(String username, String password) &#123;</span><br><span class="line"><span class="code">    if (username == null || password == null) &#123;</span></span><br><span class="line"><span class="code">        return false;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">    //连接数据库判断是否登录成功</span></span><br><span class="line"><span class="code">    ResultSet rs = null;</span></span><br><span class="line"><span class="code">    PreparedStatement pstmt  = null;</span></span><br><span class="line"><span class="code">    Connection conn = null;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    //1.获取连接</span></span><br><span class="line"><span class="code">    try &#123;</span></span><br><span class="line"><span class="code">        conn = JDBCUtils.gerConnection();</span></span><br><span class="line"><span class="code">        // 2.定义sql</span></span><br><span class="line"><span class="code">        String sql = &quot;select * from user where username = ? and password = ?&quot;;</span></span><br><span class="line"><span class="code">        //3.获取执行sql的对象</span></span><br><span class="line"><span class="code">        pstmt = conn.prepareStatement(sql);</span></span><br><span class="line"><span class="code">        //给?赋值</span></span><br><span class="line"><span class="code">        pstmt.setString(1,username);</span></span><br><span class="line"><span class="code">        pstmt.setString(2,password);</span></span><br><span class="line"><span class="code">        //4.执行查询,不需要传递sql</span></span><br><span class="line"><span class="code">        rs = pstmt.executeQuery();</span></span><br><span class="line"><span class="code">        //5.判断</span></span><br><span class="line"><span class="code">        return rs.next();//如果有下一行，则返回true</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    &#125; catch (SQLException throwables) &#123;</span></span><br><span class="line"><span class="code">        throwables.printStackTrace();</span></span><br><span class="line"><span class="code">    &#125; finally &#123;</span></span><br><span class="line"><span class="code">        JDBCUtils.close(rs, pstmt, conn);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">    return false;</span></span><br></pre></td></tr></table></figure><h3 id="JDBC控制事务"><a href="#JDBC控制事务" class="headerlink" title="JDBC控制事务"></a>JDBC控制事务</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 事务：一个包含多个步骤的业务操作，如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败。</span><br><span class="line"><span class="bullet">2.</span> 操作：</span><br><span class="line"><span class="bullet">1.</span> 开启事务</span><br><span class="line"><span class="bullet">2.</span> 提交事务</span><br><span class="line"><span class="bullet">3.</span> 回滚事务</span><br><span class="line"><span class="bullet">3.</span> 使用Connection对象来管理事务</span><br><span class="line"><span class="bullet">        *</span> 开启事务：SetAutoCommit(boolean autoCommit) :调用该方法设置参数为false，即开启事务</span><br><span class="line"><span class="bullet">*</span> 提交事务：commit()</span><br><span class="line"><span class="bullet">*</span> 回滚事务：rollback()</span><br><span class="line"></span><br><span class="line"><span class="code">代码：</span></span><br><span class="line"><span class="code">Connection conn = null;</span></span><br><span class="line"><span class="code">        PreparedStatement pstmt1 = null;</span></span><br><span class="line"><span class="code">        PreparedStatement pstmt2 = null;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    try &#123;</span></span><br><span class="line"><span class="code">        //1.获取连接</span></span><br><span class="line"><span class="code">        conn = JDBCUtils.getConnection();</span></span><br><span class="line"><span class="code">        //开启事务</span></span><br><span class="line"><span class="code">        conn.setAutoCommit(false);</span></span><br><span class="line"><span class="code">        //2.定义sql</span></span><br><span class="line"><span class="code">        //2.1 张三 - 500</span></span><br><span class="line"><span class="code">        String sql1 = &quot;update account set balance = balance - ? where id = ? &quot;;</span></span><br><span class="line"><span class="code">        //2.2 李四 + 500</span></span><br><span class="line"><span class="code">        String sql2 = &quot;update account set balance = balance + ? where  id = ?&quot;;</span></span><br><span class="line"><span class="code">        //3.获取执行sql对象</span></span><br><span class="line"><span class="code">        pstmt1 = conn.prepareStatement(sql1);</span></span><br><span class="line"><span class="code">        pstmt2 = conn.prepareStatement(sql2);</span></span><br><span class="line"><span class="code">        //4.设置参数</span></span><br><span class="line"><span class="code">        pstmt1.setDouble(1,500);</span></span><br><span class="line"><span class="code">        pstmt1.setInt(2,1);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        pstmt2.setDouble(1,500);</span></span><br><span class="line"><span class="code">        pstmt2.setInt(2,2);</span></span><br><span class="line"><span class="code">        //5.执行sql</span></span><br><span class="line"><span class="code">        pstmt1.executeUpdate();</span></span><br><span class="line"><span class="code">        //手动制造异常</span></span><br><span class="line"><span class="code">        int i = 3/0;</span></span><br><span class="line"><span class="code">        pstmt2.executeUpdate();</span></span><br><span class="line"><span class="code">        //提交事务</span></span><br><span class="line"><span class="code">        conn.commit();</span></span><br><span class="line"><span class="code">        &#125; catch (Exception e) &#123;</span></span><br><span class="line"><span class="code">            //事务回滚</span></span><br><span class="line"><span class="code">            try &#123;</span></span><br><span class="line"><span class="code">                if(conn != null)</span></span><br><span class="line"><span class="code">                    conn.rollback();</span></span><br><span class="line"><span class="code">            &#125; catch (SQLException el) &#123;</span></span><br><span class="line"><span class="code">                el.printStackTrace();</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">            e.printStackTrace();</span></span><br><span class="line"><span class="code">        &#125;finally &#123;</span></span><br><span class="line"><span class="code">            JDBCUtils.close(pstmt1,conn);</span></span><br><span class="line"><span class="code">            JDBCUtils.close(pstmt2,null);</span></span><br><span class="line"><span class="code">        &#125;</span></span><br></pre></td></tr></table></figure><h3 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 概念：其实就是一个容器（集合），存放数据库连接的容器。</span><br><span class="line"><span class="code">当刺痛初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器。</span></span><br><span class="line"><span class="code">2. 好处：</span></span><br><span class="line"><span class="code">1. 节约资源</span></span><br><span class="line"><span class="code">2. 用户访问高效</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">3.实现：</span></span><br><span class="line"><span class="code">1. 标准接口：DataSource  javax.sql包下的</span></span><br><span class="line"><span class="code">1. 方法：</span></span><br><span class="line"><span class="code">* 获取连接：getConnection()</span></span><br><span class="line"><span class="code">* 归还连接：Connection.close()。如果连接对象Connection是从连接池中获取的，那么调用Connection.close()方法，则不会再关闭连接了。而是归还连接</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">2. 一般我们不去实现它，有数据库厂商来实现</span></span><br><span class="line"><span class="code">1. C3P0:数据库连接池技术</span></span><br><span class="line"><span class="code">2. Druid：数据库连接池实现技术，由阿里巴巴提供的</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">4.</span> C3P0：数据库连接池技术</span><br><span class="line"><span class="bullet">*</span> 步骤：</span><br><span class="line"><span class="bullet">1.</span> 导入jar包（两个）c3p0-0.9.5.2.jar mchange-commons-java-0.2.12.jar</span><br><span class="line"><span class="bullet">2.</span> 定义配置文件：</span><br><span class="line"><span class="bullet">*</span> 名称：c3p0-config.xml 或者c3p0.properties</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">3. 创建核心对象 数据库连接池对象 ComboPooledDataSource</span></span><br><span class="line"><span class="code">4. 获取连接：getConnection</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">代码：</span></span><br><span class="line"><span class="code">//1.获取DataSource  使用默认配置</span></span><br><span class="line"><span class="code">        DataSource ds = new ComboPooledDataSource();</span></span><br><span class="line"><span class="code">        //2.获取连接</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        for (int i = 1; i &lt;= 11; i++) &#123;</span></span><br><span class="line"><span class="code">            Connection conn = ds.getConnection();</span></span><br><span class="line"><span class="code">            System.out.println(i + &quot;:&quot; + conn);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">            if (i == 5) &#123;</span></span><br><span class="line"><span class="code">                conn.close();//归还连接到连接池中</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">5. Druid:数据库连接池实现技术</span></span><br><span class="line"><span class="code">1. 步骤：</span></span><br><span class="line"><span class="code">1. 导入jar包 druid-1.0.9.jar</span></span><br><span class="line"><span class="code">2. 定义配置文件：</span></span><br><span class="line"><span class="code">* 是properties形式的</span></span><br><span class="line"><span class="code">* 可以叫任意名称，可以放在任意目录下</span></span><br><span class="line"><span class="code">3. 加载配置文件。Properties</span></span><br><span class="line"><span class="code">4. 获取数据库连接池对象：通过工厂类来获取 DruidDataSourceFactory</span></span><br><span class="line"><span class="code">5. 获取连接：getConnection</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">代码：</span></span><br><span class="line"><span class="code">//1.导入jar包</span></span><br><span class="line"><span class="code">        //2.定义配置文件</span></span><br><span class="line"><span class="code">        //3.加载配置文件</span></span><br><span class="line"><span class="code">        Properties pro = new Properties();</span></span><br><span class="line"><span class="code">        InputStream is = DruidDemo.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;);</span></span><br><span class="line"><span class="code">        pro.load(is);</span></span><br><span class="line"><span class="code">        //4.获取连接池对象</span></span><br><span class="line"><span class="code">        DataSource ds =DruidDataSourceFactory.createDataSource(pro);</span></span><br><span class="line"><span class="code">        //5.获取连接</span></span><br><span class="line"><span class="code">        Connection conn = ds.getConnection();</span></span><br><span class="line"><span class="code">        System.out.println(conn);</span></span><br><span class="line"><span class="code">2. 定义工具类</span></span><br><span class="line"><span class="code">1. 定义一个类 JDBCUtils</span></span><br><span class="line"><span class="code">2. 提供静态代码块加载配置文件，初始化连接池对象</span></span><br><span class="line"><span class="code">3. 提供方法</span></span><br><span class="line"><span class="code">1. 获取连接方法：通过数据库连接池获取连接</span></span><br><span class="line"><span class="code">2. 释放资源</span></span><br><span class="line"><span class="code">3. 获取连接池的方法</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">代码：</span></span><br><span class="line"><span class="code">//1.定义成员变量 DataSource</span></span><br><span class="line"><span class="code">    private static DataSource ds;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    static &#123;</span></span><br><span class="line"><span class="code">        //1.加载配置文件</span></span><br><span class="line"><span class="code">        Properties pro = new Properties();</span></span><br><span class="line"><span class="code">        try &#123;</span></span><br><span class="line"><span class="code">            pro.load(JDBCUtils.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;));</span></span><br><span class="line"><span class="code">            //2.获取DataSource</span></span><br><span class="line"><span class="code">            ds = DruidDataSourceFactory.createDataSource(pro);</span></span><br><span class="line"><span class="code">        &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="code">            e.printStackTrace();</span></span><br><span class="line"><span class="code">        &#125; catch (Exception e) &#123;</span></span><br><span class="line"><span class="code">            e.printStackTrace();</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    /**</span></span><br><span class="line"><span class="code">     * 获取连接</span></span><br><span class="line"><span class="code">     */</span></span><br><span class="line"><span class="code">    public static Connection getConnection() throws SQLException &#123;</span></span><br><span class="line"><span class="code">        return ds.getConnection();</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    /**</span></span><br><span class="line"><span class="code">     * 释放资源</span></span><br><span class="line"><span class="code">     */</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    public static void close(Statement stmt, Connection conn) &#123;</span></span><br><span class="line"><span class="code">       /* if(stme != null)&#123;</span></span><br><span class="line"><span class="code">            try &#123;</span></span><br><span class="line"><span class="code">                stme.close();</span></span><br><span class="line"><span class="code">            &#125; catch (SQLException throwables) &#123;</span></span><br><span class="line"><span class="code">                throwables.printStackTrace();</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">        if(conn != null)&#123;</span></span><br><span class="line"><span class="code">            try &#123;</span></span><br><span class="line"><span class="code">                conn.close();</span></span><br><span class="line"><span class="code">            &#125; catch (SQLException throwables) &#123;</span></span><br><span class="line"><span class="code">                throwables.printStackTrace();</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">        */</span></span><br><span class="line"><span class="code">        close(null, stmt, conn);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    public static void close(ResultSet rs, Statement stmt, Connection conn) &#123;</span></span><br><span class="line"><span class="code">        if (rs != null) &#123;</span></span><br><span class="line"><span class="code">            try &#123;</span></span><br><span class="line"><span class="code">                rs.close();</span></span><br><span class="line"><span class="code">            &#125; catch (SQLException throwables) &#123;</span></span><br><span class="line"><span class="code">                throwables.printStackTrace();</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">        if (stmt != null) &#123;</span></span><br><span class="line"><span class="code">            try &#123;</span></span><br><span class="line"><span class="code">                stmt.close();</span></span><br><span class="line"><span class="code">            &#125; catch (SQLException throwables) &#123;</span></span><br><span class="line"><span class="code">                throwables.printStackTrace();</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">        if (conn != null) &#123;</span></span><br><span class="line"><span class="code">            try &#123;</span></span><br><span class="line"><span class="code">                conn.close(); //归还连接</span></span><br><span class="line"><span class="code">            &#125; catch (SQLException throwables) &#123;</span></span><br><span class="line"><span class="code">                throwables.printStackTrace();</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    /**</span></span><br><span class="line"><span class="code">     * 获取连接池方法</span></span><br><span class="line"><span class="code">     */</span></span><br><span class="line"><span class="code">    public static DataSource getDataSource() &#123;</span></span><br><span class="line"><span class="code">        return ds;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">代码：</span></span><br><span class="line"><span class="code">/**</span></span><br><span class="line"><span class="code">     * 完成添加操作,给account表添加一条记录</span></span><br><span class="line"><span class="code">     */</span></span><br><span class="line"><span class="code">    Connection conn = null;</span></span><br><span class="line"><span class="code">    PreparedStatement pstmt = null;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    try &#123;</span></span><br><span class="line"><span class="code">        //1.获取连接</span></span><br><span class="line"><span class="code">        conn = JDBCUtils.getConnection();</span></span><br><span class="line"><span class="code">        //2.定义sql</span></span><br><span class="line"><span class="code">        String sql = &quot;insert into account value(null,?,?)&quot;;</span></span><br><span class="line"><span class="code">        //3.获取pstmt对象</span></span><br><span class="line"><span class="code">        pstmt = conn.prepareStatement(sql);</span></span><br><span class="line"><span class="code">        //4.给?赋值</span></span><br><span class="line"><span class="code">        pstmt.setString(1, &quot;王五&quot;);</span></span><br><span class="line"><span class="code">        pstmt.setDouble(2, 3000);</span></span><br><span class="line"><span class="code">        //5.执行sql</span></span><br><span class="line"><span class="code">        int count = pstmt.executeUpdate();</span></span><br><span class="line"><span class="code">        System.out.println(count);</span></span><br><span class="line"><span class="code">    &#125; catch (SQLException throwables) &#123;</span></span><br><span class="line"><span class="code">        throwables.printStackTrace();</span></span><br><span class="line"><span class="code">    &#125; finally &#123;</span></span><br><span class="line"><span class="code">        //6.释放资源</span></span><br><span class="line"><span class="code">        JDBCUtils.close(pstmt, conn);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> Spring框架对JDBC的简单封装。提供了一个JDBCTemplate对象简化JDBC的开发</span><br><span class="line"><span class="bullet">*</span> 步骤：</span><br><span class="line"><span class="bullet">1.</span> 导入jar包</span><br><span class="line"><span class="bullet">2.</span> 创建JdbcTemplate对象。依赖于数据源Datasource</span><br><span class="line"><span class="bullet">*</span> JdbcTemplate template = new JdbcTemPlate(ds);</span><br><span class="line"><span class="bullet">3.</span> 调用JdbcTemplate的方法来完成CRUD的操作</span><br><span class="line"><span class="bullet">*</span> update():执行DML语句。增、删、改语句</span><br><span class="line"><span class="bullet">*</span> queryForMap():查询结果将结果集封装为map集合，将列名作为key，将值作为value 将这条记录封装为一个map集合</span><br><span class="line"><span class="bullet">*</span> 注意：这个方法查询的结果集长度只能是1</span><br><span class="line"><span class="bullet">*</span> queryForList():查询结果将结果集封装为list集合</span><br><span class="line"><span class="bullet">*</span> 注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中</span><br><span class="line"><span class="bullet">*</span> query():查询结果，将结果封装为JavaBean对象</span><br><span class="line"><span class="bullet">*</span> query的参数：RpwMapper</span><br><span class="line"><span class="bullet">*</span> 一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装</span><br><span class="line"><span class="bullet">*</span> new BeanPropertyRowMapper&lt;类型&gt;(类型.class)</span><br><span class="line"><span class="bullet">*</span> queryForObject():查询结果，将结果封装为对象</span><br><span class="line"><span class="bullet">*</span> 一般用于聚合函数的查询</span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">代码：</span><br><span class="line">//1.获取JDBCTemplate对象</span><br><span class="line">  private JdbcTemplate template = new JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">   /<span class="strong">**</span></span><br><span class="line"><span class="strong">    <span class="emphasis">* 修改 张三数据的balance为2000</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">    *</span>/</span></span><br><span class="line"><span class="strong">   @Test</span></span><br><span class="line"><span class="strong">   public void test1()&#123;</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">       //2.定义sql</span></span><br><span class="line"><span class="strong">       String sql = &quot;update account set balance = 2000 where id = 1&quot;;</span></span><br><span class="line"><span class="strong">       //3.执行sql</span></span><br><span class="line"><span class="strong">       int count = template.update(sql);</span></span><br><span class="line"><span class="strong">       System.out.println(count);</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">   &#125;</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">   /**</span></span><br><span class="line"><span class="bullet">    *</span> 2.添加一条记录</span><br><span class="line"><span class="code">    */</span></span><br><span class="line"><span class="code">   @Test</span></span><br><span class="line"><span class="code">   public void test2()&#123;</span></span><br><span class="line"><span class="code">       String sql = &quot;insert into account(id,name,balance) values(?,?,?)&quot;;</span></span><br><span class="line"><span class="code">       int count = template.update(sql,3,&quot;亚索&quot;,7000);</span></span><br><span class="line"><span class="code">       System.out.println(count);</span></span><br><span class="line"><span class="code">   &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">   /<span class="strong">**</span></span><br><span class="line"><span class="strong">    <span class="emphasis">* 3.删除刚才添加的数据</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">    *</span>/</span></span><br><span class="line"><span class="strong">   @Test</span></span><br><span class="line"><span class="strong">   public void test3()&#123;</span></span><br><span class="line"><span class="strong">       String sql = &quot;delete from account where id = ?&quot;;</span></span><br><span class="line"><span class="strong">       int count = template.update(sql,4);</span></span><br><span class="line"><span class="strong">       System.out.println(count);</span></span><br><span class="line"><span class="strong">   &#125;</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">   /**</span></span><br><span class="line"><span class="bullet">    *</span> 4.查询id为3的记录，将其封装为Map集合</span><br><span class="line"><span class="bullet">    *</span> 注意：这个方法查询的结果集长度只能是1</span><br><span class="line"><span class="code">    */</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">   @Test</span></span><br><span class="line"><span class="code">   public void test4()&#123;</span></span><br><span class="line"><span class="code">       String sql = &quot;select * from account where id = ?&quot;;</span></span><br><span class="line"><span class="code">       Map&lt;String,Object&gt; map = template.queryForMap(sql,3);</span></span><br><span class="line"><span class="code">       System.out.println(map);</span></span><br><span class="line"><span class="code">   &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">   /<span class="strong">**</span></span><br><span class="line"><span class="strong">    <span class="emphasis">* 5.查询所有的记录，将其封装为List</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">    *</span>/</span></span><br><span class="line"><span class="strong">   @Test</span></span><br><span class="line"><span class="strong">   public void test5()&#123;</span></span><br><span class="line"><span class="strong">       String sql = &quot;select <span class="emphasis">* from account&quot;;</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">       List<span class="xml">&lt;Map&lt;String,Object&gt;</span>&gt; list = template.queryForList(sql);</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">       for(Map<span class="xml">&lt;String,Object&gt;</span> stringObjectMap : list)&#123;</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">           System.out.println(stringObjectMap);</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">       &#125;</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">   &#125;</span></span></span><br></pre></td></tr></table></figure><p>​    </p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;MySQL&quot;&gt;&lt;a href=&quot;#MySQL&quot; class=&quot;headerlink&quot; title=&quot;MySQL&quot;&gt;&lt;/a&gt;MySQL&lt;/h3&gt;</summary>
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>JQuery</title>
    <link href="http://example.com/2021/08/13/jquery/"/>
    <id>http://example.com/2021/08/13/jquery/</id>
    <published>2021-08-13T03:20:55.000Z</published>
    <updated>2021-08-13T07:33:53.463Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一个优秀的JavaScript代码库-或JavaScript框架"><a href="#一个优秀的JavaScript代码库-或JavaScript框架" class="headerlink" title="一个优秀的JavaScript代码库(或JavaScript框架)"></a>一个优秀的JavaScript代码库(或JavaScript框架)</h3><span id="more"></span><h3 id="JQuery-基础"><a href="#JQuery-基础" class="headerlink" title="JQuery 基础"></a>JQuery 基础</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 概念：一个JavaScript框架。简化JS开发</span><br><span class="line"><span class="bullet">*</span> JavaScript框架：本质上就是一些js文件，封装了js的原生代码而已</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">2. 快速入门</span></span><br><span class="line"><span class="code">1. 步骤：</span></span><br><span class="line"><span class="code">1. 下载jQuery</span></span><br><span class="line"><span class="code">* jquery-xxx.js 与 jquery-xxx.min.js区别：</span></span><br><span class="line"><span class="code">1. jquery-xxx.js：开发版本。给程序员看的，有良好的缩进和注释。体积大一些</span></span><br><span class="line"><span class="code">2. jquery-xxx.min.js：生产版本。程序中使用，没有缩进。体积小一些。程序加载更快。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3.</span> JQuery对象和JS对象区别与转换</span><br><span class="line"><span class="bullet">1.</span> JQuery对象在操作时，更加方便。</span><br><span class="line"><span class="bullet">2.</span> JQuery对象和JS对象方法不通用的</span><br><span class="line"><span class="bullet">3.</span> 两者相互转换</span><br><span class="line"><span class="bullet">*</span> jq -- &gt; js : jq对象[索引] 或者 jq对象.get(索引)</span><br><span class="line"><span class="bullet">*</span> js -- &gt; jq :$(js对象)</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">4.</span> 选择器：筛选具有相似特征的元素(标签)</span><br><span class="line"><span class="bullet">1.</span> 基本操作学习：</span><br><span class="line"><span class="bullet">1.</span> 事件绑定</span><br><span class="line"><span class="code">//1. 获取b1按钮</span></span><br><span class="line"><span class="code">$(&quot;#b1&quot;).click(function)&#123;</span></span><br><span class="line"><span class="code">alter(&quot;abc&quot;);</span></span><br><span class="line"><span class="code">&#125;);</span></span><br><span class="line"><span class="code">2. 入口函数</span></span><br><span class="line"><span class="code">$(function() &#123;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">&#125;);</span></span><br><span class="line"><span class="code">window.onload 和 $(function)区别：</span></span><br><span class="line"><span class="code">* window.onload 只能定义一次，如果多次定义，后边的会将前面的覆盖掉</span></span><br><span class="line"><span class="code">* $(function)可以定义多次</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3.</span> 样式控制：css方法</span><br><span class="line"><span class="code">// $(&quot;#div1&quot;).css(&quot;background.color&quot;,&quot;red&quot;);</span></span><br><span class="line"><span class="code">$(&quot;#div1&quot;).css(&quot;backgroundColor&quot;,&quot;pink&quot;);</span></span><br><span class="line"><span class="code">2. 基本选择器</span></span><br><span class="line"><span class="code">3. 层级选择器</span></span><br><span class="line"><span class="code">4. 属性选择器</span></span><br><span class="line"><span class="code">5. 过滤选择器</span></span><br><span class="line"><span class="code">6. 表单选择器</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">5.</span> DOM操作</span><br><span class="line"><span class="bullet">1.</span> 内容操作</span><br><span class="line"><span class="bullet">2.</span> 属性操作</span><br><span class="line"><span class="bullet">1.</span> 通用属性操作</span><br><span class="line"><span class="bullet">*</span> attr(): 获取/设置元素的属性</span><br><span class="line"><span class="bullet">*</span> removeAttr():删除属性</span><br><span class="line"><span class="bullet">*</span> prop():获取/设置元素的属性</span><br><span class="line"><span class="bullet">*</span> removeProp():删除属性</span><br><span class="line"></span><br><span class="line"><span class="code">attr和prop区别？</span></span><br><span class="line"><span class="code">* 如果操作的是元素的固有属性，则建议使用prop</span></span><br><span class="line"><span class="code">* 如果操作的是元素自定义的属性，则建议使用attr</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> 对class属性操作</span><br><span class="line"><span class="bullet">*</span> addClass():添加class属性值</span><br><span class="line"><span class="bullet">*</span> removeClass():删除class属性值</span><br><span class="line"><span class="bullet">*</span> toggleClass():切换class属性</span><br><span class="line"><span class="bullet">3.</span> CRUD操作</span><br><span class="line"><span class="bullet"> *</span> append():父元素将子元素追加到末尾</span><br><span class="line"><span class="code">对象1.append(对象2): 将对象2添加到对象1元素内部，并且在末尾</span></span><br><span class="line"><span class="code"> * prepend():父元素将子元素追加到开头</span></span><br><span class="line"><span class="code">对象1.prepend(对象2):将对象2添加到对象1元素内部，并且在开头</span></span><br><span class="line"><span class="code">* appendTo():</span></span><br><span class="line"><span class="code">对象1.appendTo(对象2):将对象1添加到对象2内部，并且在末尾</span></span><br><span class="line"><span class="code">* prependTo()：</span></span><br><span class="line"><span class="code">对象1.prependTo(对象2):将对象1添加到对象2内部，并且在开头</span></span><br><span class="line"><span class="code">* after():添加元素到元素后边</span></span><br><span class="line"><span class="code">对象1.after(对象2)： 将对象2添加到对象1后边。对象1和对象2是兄弟关系</span></span><br><span class="line"><span class="code">* before():添加元素到元素前边</span></span><br><span class="line"><span class="code">对象1.before(对象2)： 将对象2添加到对象1前边。对象1和对象2是兄弟关系</span></span><br><span class="line"><span class="code">* insertAfter()</span></span><br><span class="line"><span class="code">对象1.insertAfter(对象2)：将对象2添加到对象1后边。对象1和对象2是兄弟关系</span></span><br><span class="line"><span class="code">* insertBefore()</span></span><br><span class="line"><span class="code">对象1.insertBefore(对象2)： 将对象2添加到对象1前边。对象1和对象2是兄弟关系</span></span><br><span class="line"><span class="code">* remove():移除元素</span></span><br><span class="line"><span class="code">对象.remove():将对象删除掉</span></span><br><span class="line"><span class="code">* empty():清空元素的所有后代元素。</span></span><br><span class="line"><span class="code">对象.empty():将对象的后代元素全部清空，但是保留当前对象以及其属性节点</span></span><br></pre></td></tr></table></figure><h3 id="JQuery-高级"><a href="#JQuery-高级" class="headerlink" title="JQuery 高级"></a>JQuery 高级</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 动画</span><br><span class="line"><span class="bullet">1.</span> 三种方式显示和隐藏元素</span><br><span class="line"><span class="bullet">1.</span> 默认显示和隐藏方式</span><br><span class="line"><span class="bullet">2.</span> 滑动显示和隐藏方式</span><br><span class="line"><span class="bullet">3.</span> 淡入淡出显示和隐藏方式</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 遍历</span><br><span class="line"><span class="bullet">1.</span> js的遍历方式</span><br><span class="line"><span class="bullet">*</span> for(初始化值;循环结束条件;步长)</span><br><span class="line"><span class="bullet">2.</span> jq的遍历方式</span><br><span class="line"><span class="bullet">1.</span> jq.对象.each(callback)</span><br><span class="line"><span class="bullet">1.</span> 语法：</span><br><span class="line"><span class="code">jquery对象.each(function(index,element)&#123;&#125;);</span></span><br><span class="line"><span class="code">* index：就是元素在集合中的索引</span></span><br><span class="line"><span class="code">* element：就是集合中的每一个元素对象</span></span><br><span class="line"><span class="code">* this：集合中的每一个元素对象</span></span><br><span class="line"><span class="code">2. 回调函数返回值：</span></span><br><span class="line"><span class="code">* true：如果当前function返回为true，则结束循环(break)</span></span><br><span class="line"><span class="code">* false：如果当前function返回为true，则结束本次循环，继续下次循环(continue)</span></span><br><span class="line"><span class="code">2. $.each(object,[callback]) object不一定是jq对象，可以是js数组</span></span><br><span class="line"><span class="code">3. for..of:jquery 3.0 版本之后提供的方式</span></span><br><span class="line"><span class="code">* for(元素对象 or 容器对象)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">3. 事件绑定</span></span><br><span class="line"><span class="code">1. jquery标准的绑定方式</span></span><br><span class="line"><span class="code">* jq对象.事件方法(回调函数);</span></span><br><span class="line"><span class="code">* 注：如果调用事件方法，不传递回调函数，则会触发浏览器默认行为。例如：focus获得焦点，submit提交表单</span></span><br><span class="line"><span class="code">* 表单对象.submit();//让表单提交</span></span><br><span class="line"><span class="code">2. on绑定事件/off解除绑定</span></span><br><span class="line"><span class="code">* jq对象.on(&quot;事件名称&quot;,回调函数)</span></span><br><span class="line"><span class="code">* jq对象.off(&quot;事件名称&quot;)</span></span><br><span class="line"><span class="code">* 如果off方法不传递任何参数，则将组建上的所有的事件全部解绑</span></span><br><span class="line"><span class="code">3. 事件切换：toggle</span></span><br><span class="line"><span class="code">* jq对象.toggle(fn1,fn2...)</span></span><br><span class="line"><span class="code">* 当单击jq对象对应的组件后，会执行fn1，第二次点击会执行fn2....</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">* 注意：1.9版本 .taggle()方法删除，jQuery Migrate（迁移）插件可以恢复此功能。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">4.</span> 插件：增强JQuery的功能</span><br><span class="line"><span class="bullet">1.</span> 实现方式：</span><br><span class="line"><span class="bullet">1.</span> $.fn.extend(object)</span><br><span class="line"><span class="bullet">*</span> 增强通过Jquery获取的对象的功能 $(&quot;#id&quot;)</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> $.extend(object)</span><br><span class="line"><span class="bullet">*</span> 增强JQuery对象自身的功能 $/jQuery</span><br></pre></td></tr></table></figure><p>​                        </p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;一个优秀的JavaScript代码库-或JavaScript框架&quot;&gt;&lt;a href=&quot;#一个优秀的JavaScript代码库-或JavaScript框架&quot; class=&quot;headerlink&quot; title=&quot;一个优秀的JavaScript代码库(或JavaScript框架)&quot;&gt;&lt;/a&gt;一个优秀的JavaScript代码库(或JavaScript框架)&lt;/h3&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java 前端" scheme="http://example.com/tags/Java-%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Cookie&amp;Session</title>
    <link href="http://example.com/2021/08/12/Cookie/"/>
    <id>http://example.com/2021/08/12/Cookie/</id>
    <published>2021-08-12T07:06:10.000Z</published>
    <updated>2021-08-12T11:13:35.328Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><span id="more"></span><h3 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h3><pre><code>1. 会话：一次会话中包含多次请求和响应。    * 一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止2. 功能：在一次会话的范围内的多次请求间，共享数据3. 方式：    1. 客户端会话技术：Cookie    2. 服务器端会话技术：Session</code></pre><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">1.概念：客户端会话技术，将数据保存到客户端</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 快速入门：</span><br><span class="line"><span class="bullet">*</span> 使用步骤：</span><br><span class="line"><span class="bullet">1.</span> 创建Cookie对象，绑定数据</span><br><span class="line"><span class="bullet">*</span> new Cookie(String name,String value)</span><br><span class="line"><span class="bullet">2.</span> 发送Cookie对象</span><br><span class="line"><span class="bullet">*</span> response.addCookie(cookie cookie)</span><br><span class="line"><span class="bullet">3.</span> 获取Cookie对象，拿到数据</span><br><span class="line"><span class="bullet">*</span> Cookie[] request.getCookie()</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> 实现原理</span><br><span class="line"><span class="bullet">*</span> 基于响应头set-cookie和请求头cookie实现</span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> cookie的细节</span><br><span class="line"><span class="bullet">1.</span> 一次可不可以发送多个cookie？</span><br><span class="line"><span class="bullet">*</span> 可以</span><br><span class="line"><span class="bullet">*</span> 可以创建多个Cookie对象，使用response调用多次addCookie方法发送cookie即可</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> cookie在浏览器中保存多长时间？</span><br><span class="line"><span class="bullet">1.</span> 默认情况下，当浏览器关闭后，Cookie数据被销毁</span><br><span class="line"><span class="bullet">2.</span> 持久化存储：</span><br><span class="line"><span class="bullet">*</span> setMaxAge(int seconds)</span><br><span class="line"><span class="bullet">1.</span> 正数：将cookie数据写到硬盘的文件中。持久化存储。并指定cookie存活时间，时间到后，cookie文件自动失效</span><br><span class="line"><span class="bullet">2.</span> 负数：默认值</span><br><span class="line"><span class="bullet">3.</span> 零：删除cookie信息</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> cookie能不能存中文？</span><br><span class="line"><span class="bullet">*</span> 在tomcat 8 之前 cookie不能直接存储中文数据</span><br><span class="line"><span class="bullet">*</span> 需要将中文数据转码---一般采用URL编码(%E3)</span><br><span class="line"><span class="bullet">*</span> 在tomcat 8 之后，cookie支持中文数据。特殊字符还是不支持，建议使用URL编码存储，URL解码解析</span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> cookie共享问题？</span><br><span class="line"><span class="bullet">1.</span> 假设在一个tomcat服务器中，部署了多个web项目，那么在这些web项目中cookie能不能共享？</span><br><span class="line"><span class="bullet">*</span> 默认情况下cookie不能共享</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> setPath(String path):设置cookie的获取范围。默认情况下，设置当前的虚拟目录</span><br><span class="line"><span class="bullet">*</span> 如果要共享，则可以将path设置为&quot;/&quot;</span><br></pre></td></tr></table></figure><p>​            </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">2.</span> 不同的tomcat服务器间cookie共享问题？</span><br><span class="line"><span class="bullet">*</span> setDomain(String path)如果设置一级域名相同，那么多个服务器之间cookie可以共享</span><br><span class="line"><span class="bullet">*</span> setDomain(&quot;.baidu.com&quot;),那么tieba.baidu.com和news.baidu.com中cookie可以共享</span><br><span class="line"></span><br><span class="line"><span class="bullet">5.</span> Cookie的特点和作用</span><br><span class="line"><span class="bullet">1.</span> cookie存储数据在客户端浏览器</span><br><span class="line"><span class="bullet">2.</span> 浏览器对于单个cookie的大小有限制(4kb) 以及 对同一个域名下的总cookie数量也有限制(20)</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 作用：</span><br><span class="line"><span class="bullet">1.</span> cookie一般用于存储少量的不太敏感的数据</span><br><span class="line"><span class="bullet">2.</span> 在不登录的情况下，完成服务器对客户端的身份识别</span><br><span class="line"></span><br><span class="line"><span class="bullet">6.</span> 案例：记住上一次访问时间</span><br><span class="line"><span class="bullet">1.</span> 需求：</span><br><span class="line"><span class="bullet">1.</span> 访问一个Servlet，如果是第一次访问你，则提示：您好，欢迎您首次访问</span><br><span class="line"><span class="bullet">2.</span> 如果不是第一次访问，则提示：欢迎回来，您上次访问的时间为：显示时间字符串</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 分析：</span><br><span class="line"><span class="bullet">1.</span> 可以采用cookie来完成</span><br><span class="line"><span class="bullet">2.</span> 在服务器中的Servlet判断是否有一个名为lastTime的cookie</span><br><span class="line"><span class="bullet">1.</span> 有：不是第一次访问</span><br><span class="line"><span class="bullet">1.</span> 响应数据：欢迎回来，您上次访问的时间为：2021年4月7日11:29:42</span><br><span class="line"><span class="bullet">2.</span> 写回Cookie：lastTime=2021年4月7日11:30:18</span><br><span class="line"><span class="bullet">2.</span> 没有：第一次访问</span><br><span class="line"><span class="bullet">1.</span> 响应数据：您好，欢迎您首次访问</span><br><span class="line"><span class="bullet">2.</span> 写回Cookie：lastTime=2021年4月7日11:31:37</span><br><span class="line"></span><br><span class="line"><span class="code">代码：</span></span><br><span class="line"><span class="code">protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span></span><br><span class="line"><span class="code">        //设置响应的消息体的数据格式及编码</span></span><br><span class="line"><span class="code">        response.setContentType(&quot;text/html;charset=utf-8&quot;);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        //1.获取所有Cookie</span></span><br><span class="line"><span class="code">        Cookie[] cookies = request.getCookies();</span></span><br><span class="line"><span class="code">        boolean flag = false;//没有cookie为lastTime</span></span><br><span class="line"><span class="code">        //2.遍历cookie数组</span></span><br><span class="line"><span class="code">        if (cookies != null &amp;&amp; cookies.length &gt; 0) &#123;</span></span><br><span class="line"><span class="code">            for (Cookie cookie : cookies) &#123;</span></span><br><span class="line"><span class="code">                //3.获取cookie的名称</span></span><br><span class="line"><span class="code">                String name = cookie.getName();</span></span><br><span class="line"><span class="code">                //4.判断名称是否是lastTime</span></span><br><span class="line"><span class="code">                if (&quot;lastTime&quot;.equals(name)) &#123;</span></span><br><span class="line"><span class="code">                    //有该cookie，不是第一次访问</span></span><br><span class="line"><span class="code">                    flag = true;//有lastTime的cookie</span></span><br><span class="line"><span class="code">                    //设置Cookie的value</span></span><br><span class="line"><span class="code">                    //获取当前时间的字符串，重新设置cookie的值，重新发送cookie</span></span><br><span class="line"><span class="code">                    Date date = new Date();</span></span><br><span class="line"><span class="code">                    SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy年MM月dd日 HH:mm:ss&quot;);</span></span><br><span class="line"><span class="code">                    String str_date = sdf.format(date);</span></span><br><span class="line"><span class="code">                    System.out.println(&quot;编码前：&quot; + str_date);</span></span><br><span class="line"><span class="code">                    //URL编码</span></span><br><span class="line"><span class="code">                    str_date = URLEncoder.encode(str_date, &quot;utf-8&quot;);</span></span><br><span class="line"><span class="code">                    System.out.println(&quot;编码后 &quot; + str_date);</span></span><br><span class="line"><span class="code">                    cookie.setValue(str_date);</span></span><br><span class="line"><span class="code">                    //设置cookie的存活时间</span></span><br><span class="line"><span class="code">                    cookie.setMaxAge(60 * 60 * 24 * 30);//一个月</span></span><br><span class="line"><span class="code">                    response.addCookie(cookie);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">                    //响应数据</span></span><br><span class="line"><span class="code">                    //获取Cookie的value 时间</span></span><br><span class="line"><span class="code">                    String value = cookie.getValue();</span></span><br><span class="line"><span class="code">                    System.out.println(&quot;解码前 &quot; + value);</span></span><br><span class="line"><span class="code">                    //URL解码</span></span><br><span class="line"><span class="code">                    value = URLDecoder.decode(value, &quot;utf-8&quot;);</span></span><br><span class="line"><span class="code">                    System.out.println(&quot;解码后 &quot; + value);</span></span><br><span class="line"><span class="code">                    response.getWriter().write(&quot;&lt;h1&gt;欢迎回来，您上次的访问时间为:&quot; + value + &quot;&lt;/h1&gt;&quot;);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">                    break;</span></span><br><span class="line"><span class="code">                &#125;</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        if (cookies == null || cookies.length == 0 || flag == false) &#123;</span></span><br><span class="line"><span class="code">            //没有，第一次访问</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">            //设置Cookie的value</span></span><br><span class="line"><span class="code">            //获取当前时间的字符串，重新设置cookie的值，重新发送cookie</span></span><br><span class="line"><span class="code">            Date date = new Date();</span></span><br><span class="line"><span class="code">            SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy年MM月dd日 HH:mm:ss&quot;);</span></span><br><span class="line"><span class="code">            String str_date = sdf.format(date);</span></span><br><span class="line"><span class="code">            System.out.println(&quot;编码前：&quot; + str_date);</span></span><br><span class="line"><span class="code">            //URL编码</span></span><br><span class="line"><span class="code">            str_date = URLEncoder.encode(str_date, &quot;utf-8&quot;);</span></span><br><span class="line"><span class="code">            System.out.println(&quot;编码后 &quot; + str_date);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">            Cookie cookie = new Cookie(&quot;lastTime&quot;, str_date);</span></span><br><span class="line"><span class="code">            //设置cookie的存活时间</span></span><br><span class="line"><span class="code">            cookie.setMaxAge(60 * 60 * 24 * 30);//一个月</span></span><br><span class="line"><span class="code">            response.addCookie(cookie);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">            response.getWriter().write(&quot;&lt;h1&gt;您好，欢迎您首次访问&lt;/h1&gt;&quot;);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span></span><br><span class="line"><span class="code">        this.doPost(request, response);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br></pre></td></tr></table></figure><h3 id="JSP-入门学习"><a href="#JSP-入门学习" class="headerlink" title="JSP:入门学习"></a>JSP:入门学习</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 概念：</span><br><span class="line"><span class="bullet">*</span> Java Server Pages:java服务器端页面</span><br><span class="line"><span class="bullet">*</span> 可以理解为：一个特殊的页面，其中既可以指定定义html标签，又可以定义java代码</span><br><span class="line"><span class="bullet">*</span> 用于简化书写！！！</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 原理</span><br><span class="line"><span class="bullet">*</span> JSP本质上就是一个Servlet</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> JSP的脚本：JSP定义Java代码的方式</span><br><span class="line"><span class="bullet">1.</span> &lt;% %&gt;:定义的java代码，在servlet方法中。service方法中可以定义什么，该脚本中就可以定义什么</span><br><span class="line"><span class="bullet">2.</span> &lt;%! %&gt;：定义的java代码，在jsp转换后的java类的成员变量</span><br><span class="line"><span class="bullet">3.</span> &lt;%= %&gt;：定义的java代码，会输出到页面上。输出语句中可以定义什么，该脚本中就可以定义什么。</span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> JSP的内置对象：</span><br><span class="line"><span class="bullet">*</span> 在jsp页面中不需要获取和创建，可以直接使用的对象</span><br><span class="line"><span class="bullet">*</span> jsp一共有9个内置对象</span><br><span class="line"><span class="bullet">*</span> request</span><br><span class="line"><span class="bullet">*</span> response</span><br><span class="line"><span class="bullet">*</span> out：字符输出流对象。可以将数据输出到页面上，和response.getWrite()类似</span><br><span class="line"><span class="bullet">*</span> response.getWrite()和out.write()的区别：</span><br><span class="line"><span class="bullet">*</span> 在tomcat服务器真正给客户端做出响应之前，会先找response缓冲区数据，在找out缓冲区数据。</span><br><span class="line"><span class="bullet">*</span> respone.getWrite()数据输出永远在out.write()之前</span><br></pre></td></tr></table></figure><h3 id="Session："><a href="#Session：" class="headerlink" title="Session："></a>Session：</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 概念：服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。HttpSession</span><br><span class="line"><span class="bullet">2.</span> 快速入门：</span><br><span class="line"><span class="bullet">1.</span> 获取HttpSession对象：</span><br><span class="line"><span class="code">HttpSession session = request.getSession()</span></span><br><span class="line"><span class="code">2. 使用HttpSession对象：</span></span><br><span class="line"><span class="code">Object getAttribute(String name)</span></span><br><span class="line"><span class="code">void setAttribute(String name,Object value)</span></span><br><span class="line"><span class="code">void removeAttribute(String name)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3.</span> 原理：</span><br><span class="line"><span class="bullet">*</span> Session的实现是依赖于Cookie的。</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">4.</span> 细节：</span><br><span class="line"><span class="bullet">1.</span> 当客户端关闭后，服务器不关闭，两次获取session是否为同一个？</span><br><span class="line"><span class="bullet">*</span> 默认情况下。不是</span><br><span class="line"><span class="bullet">*</span> 如果需要相同，则可以创建Cookie，键为JSESSIONID，设置最大存活时间，让cookie持久化保存。</span><br><span class="line"><span class="code">Cookie c = new Cookie(&quot;JSESSIONID&quot;, session.getId());</span></span><br><span class="line"><span class="code">        c.setMaxAge(60*60);</span></span><br><span class="line"><span class="code">        response.addCookie(c);</span></span><br><span class="line"><span class="code">2. 客户端不关闭，服务器端关闭后，两次获取的session是同一个么？</span></span><br><span class="line"><span class="code">* 不是同一个，但是要确保数据不丢失。tomcat自动完成以下工作</span></span><br><span class="line"><span class="code">* session的钝化：</span></span><br><span class="line"><span class="code">* 在服务器正常关闭之前，将session对象序列化到硬盘上</span></span><br><span class="line"><span class="code">* session的活化：</span></span><br><span class="line"><span class="code">* 在服务器启动后，将session文件转化为内存中的session对象即可。</span></span><br><span class="line"><span class="code">3. session什么时候被销毁？</span></span><br><span class="line"><span class="code">1. 服务器关闭</span></span><br><span class="line"><span class="code">2. session对象调用invalidate()</span></span><br><span class="line"><span class="code">3. session默认失效时间 30分钟</span></span><br><span class="line"><span class="code">选择性配置修改</span></span><br><span class="line"><span class="code">&lt;session-config&gt;</span></span><br><span class="line"><span class="code">&lt;session-timeout&gt;30&lt;/session-timeout&gt;</span></span><br><span class="line"><span class="code">&lt;/session-config&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">5.session的特点</span><br><span class="line"><span class="bullet">1.</span> session存储数据在服务器端，Cookie在客户端</span><br><span class="line"><span class="bullet">2.</span> session没有数据大小限制，Cookie有</span><br><span class="line"><span class="bullet">3.</span> session数据安全，Cookie相对不安全</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h3&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java 前端" scheme="http://example.com/tags/Java-%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Response</title>
    <link href="http://example.com/2021/08/12/response/"/>
    <id>http://example.com/2021/08/12/response/</id>
    <published>2021-08-12T06:59:33.000Z</published>
    <updated>2021-08-13T01:25:22.625Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><span id="more"></span><h3 id="HTTP协议："><a href="#HTTP协议：" class="headerlink" title="HTTP协议："></a>HTTP协议：</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 请求消息：客户端发送给服务器端的数据</span><br><span class="line"><span class="bullet">*</span> 数据格式：</span><br><span class="line"><span class="bullet">1.</span> 请求行</span><br><span class="line"><span class="bullet">2.</span> 请求头</span><br><span class="line"><span class="bullet">3.</span> 请求空行</span><br><span class="line"><span class="bullet">4.</span> 请求体</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 响应消息：服务器端发送给客户端的数据</span><br><span class="line"><span class="bullet">*</span> 数据格式：</span><br><span class="line"><span class="bullet">1.</span> 响应行</span><br><span class="line"><span class="bullet">1.</span> 组成：协议/版本 响应状态码 状态码描述</span><br><span class="line"><span class="bullet">2.</span> 响应状态码：服务器告诉客户端浏览器本次请求和响应的一个状态。</span><br><span class="line"><span class="bullet">1.</span> 状态码都是3位数字</span><br><span class="line"><span class="bullet">2.</span> 分类：</span><br><span class="line"><span class="bullet">1.</span> 1xx:服务器端接收客户端消息，但没有接收完成，等待一段时间后，发送1xx的状态码</span><br><span class="line"><span class="bullet">2.</span> 2xx：成功。代表：200</span><br><span class="line"><span class="bullet">3.</span> 3xx：重定向。代表：302(重定向)，304(访问缓存)</span><br><span class="line"><span class="bullet">4.</span> 4xx：客户端错误</span><br><span class="line"><span class="bullet">*</span> 代表：</span><br><span class="line"><span class="bullet">*</span> 404：(请求路径没有对应的资源)</span><br><span class="line"><span class="bullet">*</span> 405：请求方式没有对应的doXxx方法</span><br><span class="line"><span class="bullet">5.</span> 5xx：服务器端错误。代表：500(服务器内部出现异常)</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 响应头：</span><br><span class="line"><span class="bullet">1.</span> 格式：头名称：值</span><br><span class="line"><span class="bullet">2.</span> 常见的响应头：</span><br><span class="line"><span class="bullet">1.</span> Content-Type：服务器告诉客户端本次响应体数据格式以及编码格式</span><br><span class="line"><span class="bullet">2.</span> Content-disposition:服务器告诉客户端以什么格式打开响应体数据</span><br><span class="line"><span class="bullet">*</span> 值：</span><br><span class="line"><span class="bullet">*</span> in-line：默认值，在当前页面打开</span><br><span class="line"><span class="bullet">*</span> attachment;filename=xxx:以附件形式打开响应体。文件下载</span><br></pre></td></tr></table></figure><h3 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 功能：设置响应消息</span><br><span class="line"><span class="bullet">1.</span> 设置响应行</span><br><span class="line"><span class="bullet">1.</span> 格式：HTTP/1.1 200 OK</span><br><span class="line"><span class="bullet">2.</span> 设置状态码：setStatus(int sc)</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 设置响应体：</span><br><span class="line"><span class="bullet">*</span> 使用步骤：</span><br><span class="line"><span class="bullet">1.</span> 获取输出流</span><br><span class="line"><span class="bullet">*</span> 字符输出流：PrintWriter getWriter()</span><br><span class="line"><span class="bullet">*</span> 字节输出流：ServletOutputStream getOutputStream()</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 使用输出流，将数据输出到客户端浏览器</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 案例：</span><br><span class="line"><span class="bullet">1.</span> 完成重定向</span><br><span class="line"><span class="bullet">*</span> 重定向：资源跳转的方式</span><br><span class="line"><span class="bullet">*</span> 代码实现：</span><br><span class="line"><span class="code">/*//1. 设置状态码为302</span></span><br><span class="line"><span class="code">        response.setStatus(302);</span></span><br><span class="line"><span class="code">        //2. 设置响应头location</span></span><br><span class="line"><span class="code">        response.setHeader(&quot;location&quot;,&quot;/day15/responseDemo2&quot;);*/</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        //简单的重定向方法</span></span><br><span class="line"><span class="code">        response.sendRedirect(&quot;/day15/responseDemo2&quot;);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> 重定向的特点：redirect</span><br><span class="line"><span class="bullet">1.</span> 地址栏发生变化</span><br><span class="line"><span class="bullet">2.</span> 重定向可以访问其他站点(服务器)的资源</span><br><span class="line"><span class="bullet">3.</span> 重定向是两次请求。不能使用request对象来共享数据</span><br><span class="line"><span class="bullet">*</span> 转发的特点：forward</span><br><span class="line"><span class="bullet">1.</span> 转发地址栏路径不变</span><br><span class="line"><span class="bullet">2.</span> 转发只能访问当前服务器下的资源</span><br><span class="line"><span class="bullet">3.</span> 转发是一次请求。可以使用request对象来共享数据</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> forward 和 redirect 区别</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 路径写法：</span><br><span class="line"><span class="bullet">1.</span> 路径分类</span><br><span class="line"><span class="bullet">1.</span> 相对路径：通常相对路径不可以确定唯一资源</span><br><span class="line"><span class="bullet">*</span> 如：./index.html</span><br><span class="line"><span class="bullet">*</span> 不以/开头，以.开头路径</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 规则：找到当前资源和目标资源之间的相对位置关系</span><br><span class="line"><span class="bullet">*</span> ./:当前目录</span><br><span class="line"><span class="bullet">*</span> ../:后退一级目录</span><br><span class="line"><span class="bullet">2.</span> 绝对路径：通常绝对路径可以确定唯一资源</span><br><span class="line"><span class="bullet">*</span> 如：http://localhost/day15/response/responseDemo2   /day15/responseDemo2</span><br><span class="line"><span class="bullet">*</span> 以/开头的路径</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">* 规则：判断定义的路径是给谁用的？判断请求将来从哪发出</span></span><br><span class="line"><span class="code">* 给客户端浏览器使用：需要加虚拟目录(项目的访问路径)</span></span><br><span class="line"><span class="code">* 建议虚拟目录动态获取：request.getContextPath()</span></span><br><span class="line"><span class="code">* &lt;a&gt; &lt;form&gt; 重定向...</span></span><br><span class="line"><span class="code">* 给服务器使用：不需要加虚拟目录</span></span><br><span class="line"><span class="code">* 转发路径</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">2. 服务器输出字符数据到浏览器</span></span><br><span class="line"><span class="code">* 步骤：</span></span><br><span class="line"><span class="code">1. 获取字符输出流</span></span><br><span class="line"><span class="code">2. 输处数据</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> 注意：</span><br><span class="line"><span class="bullet">*</span> 乱码问题：</span><br><span class="line"><span class="bullet">1.</span> PrintWriter pw = response.getWriter();获取的流的默认编码是ISO-8859-1</span><br><span class="line"><span class="bullet">2.</span> 设置流的默认编码</span><br><span class="line"><span class="bullet">3.</span> 告诉浏览器响应体使用的编码</span><br><span class="line"><span class="bullet">3.</span> 服务器输出字节数据到浏览器</span><br><span class="line"><span class="bullet">*</span> 步骤：</span><br><span class="line"><span class="bullet">1.</span> 获取字节输出流</span><br><span class="line"><span class="bullet">2.</span> 输出数据</span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> 验证码</span><br><span class="line"><span class="bullet">1.</span> 本质：图片</span><br><span class="line"><span class="bullet">2.</span> 目的：防止恶意表单注册</span><br></pre></td></tr></table></figure><h3 id="ServletContext对象"><a href="#ServletContext对象" class="headerlink" title="ServletContext对象"></a>ServletContext对象</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 概念：代表整个web应用，可以和程序的容器(服务器)来通信</span><br><span class="line"><span class="bullet">2.</span> 获取：</span><br><span class="line"><span class="bullet">1.</span> 通过request对象获取</span><br><span class="line"><span class="code">requset.getServletContext();</span></span><br><span class="line"><span class="code">2. 通过HttpServlet获取</span></span><br><span class="line"><span class="code">this.getServletContext();</span></span><br><span class="line"><span class="code">3. 功能：</span></span><br><span class="line"><span class="code">1. 获取MIME类型</span></span><br><span class="line"><span class="code">* MIME类型：在互联网通信过程中定义的一种文件数据类型</span></span><br><span class="line"><span class="code">* 格式：大类型/小类型  text/html  imag/jpeg</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> 获取：String getMimeType(String file）</span><br><span class="line"><span class="bullet">2.</span> 域对象：共享数据</span><br><span class="line"><span class="bullet">1.</span> setAttribute(String name,Object value)</span><br><span class="line"><span class="bullet">2.</span> getAttribute(String name)</span><br><span class="line"><span class="bullet">3.</span> removeAttribute(String name)</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> ServletContext对象范围：所有用户所有请求的数据</span><br><span class="line"><span class="bullet">3.</span> 获取文件的真实(服务器)路径</span><br></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 文件下载要求：</span><br><span class="line"><span class="bullet">1.</span> 页面显示超链接</span><br><span class="line"><span class="bullet">2.</span> 点击超链接后会弹出下载提示框</span><br><span class="line"><span class="bullet">3.</span> 完成图片文件下载</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 分析：</span><br><span class="line"><span class="bullet">1.</span> 超链接指向的资源如果能够被浏览器解析，则在浏览器中展示，如果不能解析，则弹出下载提示框。不满足需求</span><br><span class="line"><span class="bullet">2.</span> 任何资源都必须弹出下载提示框</span><br><span class="line"><span class="bullet">3.</span> 使用响应头设置资源的打开方式;</span><br><span class="line"><span class="bullet">*</span> content-disposition:attachment;filename-xxx</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 步骤：</span><br><span class="line"><span class="bullet">1.</span> 定义页面，编辑超链接属性，指向Servlet，传递资源名称filename</span><br><span class="line"><span class="bullet">2.</span> 定义Servlet</span><br><span class="line"><span class="bullet">1.</span> 获取文件名称</span><br><span class="line"><span class="bullet">2.</span> 使用字节输入流加载文件进内存</span><br><span class="line"><span class="bullet">3.</span> 指定response的响应头：disposition:attachment;filename-xxx</span><br><span class="line"><span class="bullet">4.</span> 将数据写出到response输出流</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 问题：</span><br><span class="line"><span class="bullet">*</span> 中文文件问题：</span><br><span class="line"><span class="bullet">*</span> 解决思路</span><br><span class="line"><span class="bullet">1.</span> 获取客户端使用的浏览器版本信息</span><br><span class="line"><span class="bullet">2.</span> 根据不同的版本信息，设置filename的编码方式不同</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h3&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java 前端" scheme="http://example.com/tags/Java-%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript基础笔记</title>
    <link href="http://example.com/2021/08/12/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/08/12/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</id>
    <published>2021-08-12T06:36:00.000Z</published>
    <updated>2021-08-12T11:14:37.927Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><span id="more"></span><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 概念：一门客户端脚本语言</span><br><span class="line"><span class="bullet">*</span> 运行在客户端浏览器中。每一个浏览器都有JavaScript的解析引擎</span><br><span class="line"><span class="bullet">*</span> 脚本语言：不需要编译，直接就可以被浏览器解析执行了</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 功能：</span><br><span class="line"><span class="bullet">*</span> 可以来增强用户和html页面的交互过程，可以来控制html元素，让页面有一些动态的效果，增强用户的体验。</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> JavaScript发展史：</span><br><span class="line"><span class="bullet">1.</span> 1992年，Nombase公司，开发了第一门客户端脚本语言，专门用于表单的校验。命名为：C--，后来更名为ScriptEase</span><br><span class="line"><span class="bullet">2.</span> 1995年，Netscape(网景)公司，开发了一门客户端脚本语言：LiveScript。后来，请来了SUN公司的专家，修改ListScript，命名为JavaScript</span><br><span class="line"><span class="bullet">3.</span> 1996年，微软抄袭JavaScript开发出JScript语言</span><br><span class="line"><span class="bullet">4.</span> 1997年，ECMA(欧洲计算机制造商协会)，ECMAScript，就是所有客户端脚本语言的标准。</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> JavaScript = ECMAScript + JavaScript自己特有的东西(BOM+DOM)</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> ECMAScript:客户端脚本语言标准</span><br><span class="line"><span class="bullet">1.</span> 基本语法;</span><br><span class="line"><span class="bullet">1.</span> 与html结合方式</span><br><span class="line"><span class="bullet">1.</span> 内部JS</span><br><span class="line"><span class="bullet">*</span> 定义<span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span>,标签体内容就是js代码</span><br><span class="line"><span class="bullet">2.</span> 外部JS</span><br><span class="line"><span class="bullet">*</span> 定义<span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span></span>,通过src属性引入外部的js文件</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 注意：</span><br><span class="line"><span class="bullet">1.</span> <span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span></span>可以定义在html页面的任何地方。但是定义的位置会影响执行顺序。</span><br><span class="line"><span class="bullet">2.</span> <span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span></span>可以定义多个。</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">2. 注释</span></span><br><span class="line"><span class="code">1. 单行注释：//注释内容</span></span><br><span class="line"><span class="code">2. 多行注释:/*注释内容*/</span></span><br><span class="line"><span class="code">3. 数据类型:</span></span><br><span class="line"><span class="code">1. 原始数据类型（基本数据类型）：</span></span><br><span class="line"><span class="code">1. number:数字。整数/小数/NaN(not a number 一个不是数字的数字类型)</span></span><br><span class="line"><span class="code">2. string:字符串。 &quot;abc&quot; &#x27;a&#x27; &quot;ab&quot;</span></span><br><span class="line"><span class="code">3. boolean:true和false</span></span><br><span class="line"><span class="code">4. null:一个对象为空的占位符</span></span><br><span class="line"><span class="code">5. undefined:未定义。如果一个变量如果没有给初始化值，则会被默认赋值为undefined</span></span><br><span class="line"><span class="code">2. 引用数据类型：对象</span></span><br><span class="line"><span class="code">4. 变量</span></span><br><span class="line"><span class="code">* 变量：一小块存储数据的内存空间</span></span><br><span class="line"><span class="code">* Java语言是强类型语言，而JavaScript是弱类型语言。</span></span><br><span class="line"><span class="code">* 强类型：在开辟变量存储空间时，定义了空间将来存储的数据的数据类型。只能存储固定类型的数据</span></span><br><span class="line"><span class="code">* 弱类型：在开辟变量存储空间时，不定义空间将来的存储数据类型，可以存放任意类型的数据。</span></span><br><span class="line"><span class="code">* 语法:</span></span><br><span class="line"><span class="code">* var 变量名 = 初始化值;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">* typeof运算符：获取变量的类型</span></span><br><span class="line"><span class="code">* 注：null运算后得到的是object</span></span><br><span class="line"><span class="code">5. 运算符</span></span><br><span class="line"><span class="code">1. 一元运算符：只有一个运算数的运算符</span></span><br><span class="line"><span class="code">2. 赋值运算符</span></span><br><span class="line"><span class="code">* +(-):正负号</span></span><br><span class="line"><span class="code">* 注意：在JS中，如果运算数不是运算符所要求的的类型，那么js引擎会自动的将运算数进行类型转换</span></span><br><span class="line"><span class="code">* 其他类型转number：</span></span><br><span class="line"><span class="code">* string转number：按照字面值转换。如果字面值不是数字，则转换为NaN（不是数字的数字）</span></span><br><span class="line"><span class="code">* boolean转number：true转为1，false转为0</span></span><br><span class="line"><span class="code">3. 比较运算符:</span></span><br><span class="line"><span class="code">* 比较方式</span></span><br><span class="line"><span class="code">1. 类型相同：直接比较</span></span><br><span class="line"><span class="code">* 字符串：按照字典顺序比较，按位逐一比较，直到得出大小为止。</span></span><br><span class="line"><span class="code">2. 类型不同：先进行类型转换，再比较</span></span><br><span class="line"><span class="code">* ===：全等于。在比较之前，先判断类型，如果类型不一样，则直接返回false</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">4.</span> 字符串运算符</span><br><span class="line"><span class="bullet">5.</span> 逻辑运算符：</span><br><span class="line"><span class="bullet">*</span> &amp;&amp;：与（短路）</span><br><span class="line"><span class="bullet">*</span> ||：或（短路）</span><br><span class="line"><span class="bullet">*</span> |：非</span><br><span class="line"><span class="bullet">*</span> 其他类型转boolean：</span><br><span class="line"><span class="bullet">1.</span> number：0或NaN为假，其他为真</span><br><span class="line"><span class="bullet">2.</span> string：除了空字符串(&quot;&quot;),其他都是true</span><br><span class="line"><span class="bullet">3.</span> 对象：所有对象都为true</span><br><span class="line"></span><br><span class="line"><span class="bullet">6.</span> 三元运算符</span><br><span class="line"><span class="code"> ? : 表达式</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">语法：</span></span><br><span class="line"><span class="code">* 表达式? 值1:值2;</span></span><br><span class="line"><span class="code">* 判断表达式的值，如果是true则取值1，如果是false则取值2;</span></span><br><span class="line"><span class="code">6. 流程控制语句:</span></span><br><span class="line"><span class="code">1. if...while...</span></span><br><span class="line"><span class="code">2. switch:</span></span><br><span class="line"><span class="code">* 在java中，switch语句可以接收的数据类型：byte int short char，枚举(1.5后),string(1.7后)</span></span><br><span class="line"><span class="code">* switch(变量)</span></span><br><span class="line"><span class="code">case 值:</span></span><br><span class="line"><span class="code">* 在JS中，switch语句可以接收任意的原始数据类型</span></span><br><span class="line"><span class="code">3. while</span></span><br><span class="line"><span class="code">4. do...while</span></span><br><span class="line"><span class="code">5. for</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">7.</span> JS特殊语法：</span><br><span class="line"><span class="bullet">1.</span> 语句以;结尾，如果一行只有一条语句则;可以省略（不建议）</span><br><span class="line"><span class="bullet">2.</span> 变量的定义使用var关键字，也可以不使用</span><br><span class="line"><span class="bullet">*</span> 用：定义的变量是局部变量</span><br><span class="line"><span class="bullet">*</span> 不用：定义的变量是全局变量（不建议）</span><br><span class="line"></span><br><span class="line"><span class="bullet">8.</span> 练习：99乘法表</span><br><span class="line"><span class="code"> 代码：</span></span><br><span class="line"><span class="code">&lt;style&gt;</span></span><br><span class="line"><span class="code">    td &#123;</span></span><br><span class="line"><span class="code">        border: 1px solid;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&lt;/style&gt;</span></span><br><span class="line"><span class="code">&lt;script&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    document.write(&quot;&lt;table  align=&#x27;center&#x27;&gt;&quot;);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    //1.完成基本的for循环嵌套，展示乘法表</span></span><br><span class="line"><span class="code">    for (var i = 1; i &lt;= 9; i++) &#123;</span></span><br><span class="line"><span class="code">        document.write(&quot;&lt;tr&gt;&quot;);</span></span><br><span class="line"><span class="code">        for (var j = 1; j &lt;= i; j++) &#123;</span></span><br><span class="line"><span class="code">            document.write(&quot;&lt;td&gt;&quot;);</span></span><br><span class="line"><span class="code">            //输出 1 * 1 = 1</span></span><br><span class="line"><span class="code">            document.write(i + &quot; * &quot; + j + &quot; = &quot; + (i * j) + &quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;);</span></span><br><span class="line"><span class="code">            document.write(&quot;&lt;/td&gt;&quot;);</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">        /*//输出换行</span></span><br><span class="line"><span class="code">        document.write(&quot;&lt;br&gt;&quot;);*/</span></span><br><span class="line"><span class="code">        document.write(&quot;&lt;/tr&gt;&quot;);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    //2.完成表格嵌套</span></span><br><span class="line"><span class="code">    document.write(&quot;&lt;/table&gt;&quot;);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> 基本对象：</span><br><span class="line"><span class="bullet">1.</span> Function:函数(方法)对象</span><br><span class="line"><span class="bullet">        1.</span> 创建：</span><br><span class="line"><span class="bullet">            1.</span> var fun = new Function(形式参数列表,方法体);  //忘记吧！！！</span><br><span class="line"><span class="code">            2.function 方法名称(形式参数列表)&#123;</span></span><br><span class="line"><span class="code">                    方法体</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">            3. var 方法名 = function(形式参数列表)&#123;</span></span><br><span class="line"><span class="code">                    方法体</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">        2. 方法：</span></span><br><span class="line"><span class="code">        3. 属性：</span></span><br><span class="line"><span class="code">        4. 特点：</span></span><br><span class="line"><span class="code">            1. 方法定义时，形参的类型不用写，返回值类型也不写</span></span><br><span class="line"><span class="code">            2. 方法是一个对象，如果定义名称相同的方法，会覆盖</span></span><br><span class="line"><span class="code">            3. 在JS中，方法的调用只与方法的名称有关，和参数列表无关</span></span><br><span class="line"><span class="code">            4. 在方法声明中有一个隐藏的内置对象（数组），arguments，封装所有的实际参数</span></span><br><span class="line"><span class="code">        5. 调用：</span></span><br><span class="line"><span class="code">            方法名称(实际参数列表);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">2. Array:数组对象</span></span><br><span class="line"><span class="code">            1. 创建：</span></span><br><span class="line"><span class="code">                1. var arr = new Array(元素列表);</span></span><br><span class="line"><span class="code">                2. var arr = new Array(默认长度);</span></span><br><span class="line"><span class="code">                3. var arr = [元素列表];</span></span><br><span class="line"><span class="code">            2. 方法：</span></span><br><span class="line"><span class="code">                join(参数) 把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。</span></span><br><span class="line"><span class="code">                push() 向数组的末尾添加一个或更多元素，并返回新的长度。</span></span><br><span class="line"><span class="code">            3. 属性：</span></span><br><span class="line"><span class="code">                length:数据的长度</span></span><br><span class="line"><span class="code">            4. 特点：</span></span><br><span class="line"><span class="code">                1. JS中，数组元素的类型可变的</span></span><br><span class="line"><span class="code">                2. JS中，数组长度可变的</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3.</span> Date:日期对象</span><br><span class="line"><span class="bullet">1.</span> 创建：</span><br><span class="line"><span class="code">var date = new Date();</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">2. 方法：</span></span><br><span class="line"><span class="code">toLocaleString():返回当前对象对应的时间本地字符串格式</span></span><br><span class="line"><span class="code">getTime():获取毫秒值。返回当前日期对象描述的时间到1970年1月1日零点的毫秒值差</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">4.</span> Math:数学对象</span><br><span class="line"><span class="bullet">            1.</span> 创建：</span><br><span class="line"><span class="bullet">                *</span> 特点：Math对象不用创建，直接使用。 Math.方法名();</span><br><span class="line"></span><br><span class="line"><span class="bullet">            2.</span> 方法：</span><br><span class="line"><span class="code">                random():赋值 0~1之间的随机数。含0不含1</span></span><br><span class="line"><span class="code">                ceil(x):对数进行上舍入</span></span><br><span class="line"><span class="code">                floor(x):对数进行下舍入</span></span><br><span class="line"><span class="code">                round(x):把数四舍五入为最接近的整数</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">5.</span> RegExp：正则表达式对象</span><br><span class="line"><span class="bullet">1.</span> 正则表达式：定义字符串的组成规则。</span><br><span class="line"><span class="bullet">1.</span> 单个字符：[]</span><br><span class="line"><span class="bullet">*</span> 特殊符号代表特殊含义的单个字符：</span><br><span class="line"><span class="code">\d:单个数字字符 [0-9]</span></span><br><span class="line"><span class="code">\w:单个单词字符 [a-zA-Z0-9_]</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> 量词符号：</span><br><span class="line"><span class="code">?:表示出现0次货1次</span></span><br><span class="line"><span class="code">*：表示出现0次或多次</span></span><br><span class="line"><span class="code">+：出现一次或多次</span></span><br><span class="line"><span class="code">&#123;m,n&#125;:表示m &lt;= 数量 &lt;= n</span></span><br><span class="line"><span class="code">*m如果缺省：&#123;,n&#125;:最多n次</span></span><br><span class="line"><span class="code">*n如果缺省：&#123;m,&#125;:最少m次</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3.</span> 开始结束符号</span><br><span class="line"><span class="bullet">*</span> ^:开始</span><br><span class="line"><span class="bullet">*</span> $:结束</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 正则对象：</span><br><span class="line"><span class="bullet">       1.</span> 创建</span><br><span class="line"><span class="bullet">               1.</span> var reg = new RegExp(&quot;正则表达式&quot;);</span><br><span class="line"><span class="bullet">               2.</span> var reg = /正则表达式/;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h3&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java 前端" scheme="http://example.com/tags/Java-%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级笔记</title>
    <link href="http://example.com/2021/08/12/JavaScript%E9%AB%98%E7%BA%A7%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/08/12/JavaScript%E9%AB%98%E7%BA%A7%E7%AC%94%E8%AE%B0/</id>
    <published>2021-08-12T06:25:45.000Z</published>
    <updated>2021-08-12T11:15:09.191Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><span id="more"></span><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.DOM简单学习：为了满足案例需求</span><br><span class="line"><span class="bullet">*</span> 功能：控制html文档的内容</span><br><span class="line"><span class="bullet">*</span> 代码：获取页面标签(元素)对象 Element</span><br><span class="line"><span class="bullet">*</span> document.getElementById(&quot;id值&quot;):通过元素的id获取元素对象</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 操作Element对象：</span><br><span class="line"><span class="bullet">1.</span> 修改属性值：</span><br><span class="line"><span class="bullet">1.</span> 明确获取的对象是哪一个？</span><br><span class="line"><span class="bullet">2.</span> 查看API文档，找其中有哪些属性可以设置</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 修改标签体内容：</span><br><span class="line"><span class="bullet">*</span> 属性:innerHTML</span><br><span class="line"><span class="bullet">1.</span> 获取元素对象</span><br><span class="line"><span class="bullet">2.</span> 使用innerHTML属性修改标签体内容</span><br><span class="line"></span><br><span class="line"><span class="code">代码：</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">&lt;/head&gt;</span></span><br><span class="line"><span class="code">&lt;body&gt;</span></span><br><span class="line"><span class="code">&lt;img id=&quot;light&quot; src=&quot;img/on.png&quot;&gt;</span></span><br><span class="line"><span class="code">&lt;h1 id=&quot;title&quot;&gt;憨憨&lt;/h1&gt;</span></span><br><span class="line"><span class="code">&lt;script&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    //通过id获取元素对象</span></span><br><span class="line"><span class="code">    /*var light = document.getElementById(&quot;light&quot;);</span></span><br><span class="line"><span class="code">    alert(&quot;我要换图片了！&quot;);</span></span><br><span class="line"><span class="code">    light.src = &quot;img/on.png&quot;;*/</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    //1.获取h1标签对象</span></span><br><span class="line"><span class="code">    var title = document.getElementById(&quot;title&quot;);</span></span><br><span class="line"><span class="code">    alert(&quot;我要换图片了！&quot;);</span></span><br><span class="line"><span class="code">    //2. 修改内容</span></span><br><span class="line"><span class="code">    title.innerHTML = &quot;呆呆！&quot;;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">&lt;/script&gt;</span></span><br><span class="line"><span class="code">&lt;/body&gt;</span></span><br><span class="line"><span class="code">&lt;/html&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">2.事件简单学习</span><br><span class="line"><span class="bullet">*</span> 功能：某些组件被执行了某些操作后，出发某些代码的执行。</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">* 如何绑定事件</span></span><br><span class="line"><span class="code">1. 直接在html标签上，指定事件的属性(操作)，属性值就是js代码</span></span><br><span class="line"><span class="code">1. 事件：onclick --- 单击事件</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> 通过js获取元素对象，指定事件属性，设置一个函数</span><br><span class="line"></span><br><span class="line"><span class="code">代码：</span></span><br><span class="line"><span class="code">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="code">&lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="code">&lt;head&gt;</span></span><br><span class="line"><span class="code">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="code">    &lt;title&gt;事件绑定&lt;/title&gt;</span></span><br><span class="line"><span class="code">&lt;/head&gt;</span></span><br><span class="line"><span class="code">&lt;body&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">&lt;img id=&quot;light&quot; src=&quot;img/off.png&quot;  onclick=&quot;fun();&quot;&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">&lt;img id=&quot;light2&quot; src=&quot;img/off.png&quot;&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">&lt;script&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    function fun()&#123;</span></span><br><span class="line"><span class="code">        alert(&#x27;我被点了&#x27;);</span></span><br><span class="line"><span class="code">        alert(&#x27;我又被点了&#x27;)</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    function fun2()&#123;</span></span><br><span class="line"><span class="code">        alert(&#x27;咋老是点我？&#x27;);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    //1.获取light2对象</span></span><br><span class="line"><span class="code">    var light2 = document.getElementById(&quot;light2&quot;);</span></span><br><span class="line"><span class="code">    //2.绑定事件</span></span><br><span class="line"><span class="code">    light2.onclick = fun2();</span></span><br><span class="line"><span class="code">&lt;/script&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">&lt;/body&gt;</span></span><br><span class="line"><span class="code">&lt;/html&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> 案例：</span><br><span class="line"><span class="code">代码：</span></span><br><span class="line"><span class="code">   &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="code">&lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="code">&lt;head&gt;</span></span><br><span class="line"><span class="code">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="code">    &lt;title&gt;电灯开关&lt;/title&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    &lt;img id=&quot;light&quot; src=&quot;img/off.png&quot;&gt;</span></span><br><span class="line"><span class="code">&lt;script&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    /*</span></span><br><span class="line"><span class="code">        分析：</span></span><br><span class="line"><span class="code">            1. 获取图片对象</span></span><br><span class="line"><span class="code">            2. 绑定单击事件</span></span><br><span class="line"><span class="code">            3. 每次点击切换图片</span></span><br><span class="line"><span class="code">                * 规则：</span></span><br><span class="line"><span class="code">                    * 如果灯是开的 on，切换图片为 off</span></span><br><span class="line"><span class="code">                    * 如果灯是关的 off，切换图片为 on</span></span><br><span class="line"><span class="code">                * 使用标记flag来完成</span></span><br><span class="line"><span class="code">     */</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    //1. 获取图片对象</span></span><br><span class="line"><span class="code">    var light = document.getElementById(&quot;light&quot;);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    var flag = false; //代表灯是灭的。 off图片</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    //2. 绑定单击事件</span></span><br><span class="line"><span class="code">    light.onclick = function ()&#123;</span></span><br><span class="line"><span class="code">        if(flag)&#123;//判断如果灯是开的，则灭掉</span></span><br><span class="line"><span class="code">           light.src = &quot;img/off.png&quot;;</span></span><br><span class="line"><span class="code">           flag = false;</span></span><br><span class="line"><span class="code">        &#125;else &#123;</span></span><br><span class="line"><span class="code">            //如果灯是灭的，则灯开</span></span><br><span class="line"><span class="code">            light.src = &quot;img/on.png&quot;;</span></span><br><span class="line"><span class="code">            flag = true;</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&lt;/script&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">&lt;/head&gt;</span></span><br><span class="line"><span class="code">&lt;body&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">&lt;/body&gt;</span></span><br><span class="line"><span class="code">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">3.BOM</span><br><span class="line"><span class="bullet">1.</span> 概念：Browser Object Model 浏览器对象模型</span><br><span class="line"><span class="bullet">*</span> 将浏览器的各个组成部分封装成对象。</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 组成：</span><br><span class="line"><span class="bullet">*</span> Window：窗口对象</span><br><span class="line"><span class="bullet">1.</span> 创建：</span><br><span class="line"><span class="bullet">            2.</span> 方法:</span><br><span class="line"><span class="bullet">                1.</span> 与弹出框有关的方法：</span><br><span class="line"><span class="code">                    alert()显示带有一段消息和一个确认按钮的警告框。</span></span><br><span class="line"><span class="code">                    confirm()显示带有一段消息以及确认按钮和取消按钮的对话框。</span></span><br><span class="line"><span class="code">                    prompt()显示可提示用户输入的对话框。</span></span><br><span class="line"><span class="code">                         * 返回值：获取用户输入的值</span></span><br><span class="line"><span class="code">                2. 与打开关闭有关的方法：</span></span><br><span class="line"><span class="code">                    close()关闭浏览器窗口。</span></span><br><span class="line"><span class="code">                        * 谁调用我，我关谁</span></span><br><span class="line"><span class="code">                    open()打开一个新的浏览器窗口。</span></span><br><span class="line"><span class="code">                        * 返回新的Window对象</span></span><br><span class="line"><span class="code">                3. 与定时器有关的方法：</span></span><br><span class="line"><span class="code">                    setTimeout() 在指定的毫秒数后调用函数或计算表达式。</span></span><br><span class="line"><span class="code">                    clearTimeout() 取消由 setTimeout() 方法设置的 timeout。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">                    setInterval() 按照指定的周期（以毫秒计）来调用函数或计算表达式。</span></span><br><span class="line"><span class="code">                    clearInterval()取消由 setInterval() 设置的 timeout。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">            3.</span> 属性:</span><br><span class="line"><span class="bullet">                1.</span> 获取其他BOM对象</span><br><span class="line"><span class="code">                    history</span></span><br><span class="line"><span class="code">                    location</span></span><br><span class="line"><span class="code">                    Navigator</span></span><br><span class="line"><span class="code">                    Screen</span></span><br><span class="line"><span class="code">                2. 获取DOM对象</span></span><br><span class="line"><span class="code">                    document</span></span><br><span class="line"><span class="code">            4. 特点：</span></span><br><span class="line"><span class="code">                * window对象不需要创建可以直接使用  window.方法名();</span></span><br><span class="line"><span class="code">                * window引用可以省略。 方法名();</span></span><br><span class="line"><span class="code">* Navigator：浏览器对象</span></span><br><span class="line"><span class="code">* Screen：显示器屏幕对象</span></span><br><span class="line"><span class="code">* History：历史记录对象</span></span><br><span class="line"><span class="code">1. 创建(获取)：</span></span><br><span class="line"><span class="code">1. window.history</span></span><br><span class="line"><span class="code">2. history</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">2. 方法：</span></span><br><span class="line"><span class="code">* back()加载 history 列表中的前一个 URL。</span></span><br><span class="line"><span class="code">* forward()加载 history 列表中的下一个 URL。</span></span><br><span class="line"><span class="code">* go()加载 history 列表中的某个具体页面。</span></span><br><span class="line"><span class="code">* 参数:</span></span><br><span class="line"><span class="code">* 正数：前进几个历史记录</span></span><br><span class="line"><span class="code">* 负数：后退几个历史记录</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">3. 属性：</span></span><br><span class="line"><span class="code">1. length 返回当前窗口历史列表中的URL 数量</span></span><br><span class="line"><span class="code">* Location：地址栏对象</span></span><br><span class="line"><span class="code">1. 创建(获取):</span></span><br><span class="line"><span class="code">1. window.location</span></span><br><span class="line"><span class="code">2. location</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> 方法：</span><br><span class="line"><span class="bullet">*</span> reload() 重新加载当前文档。刷新</span><br><span class="line"><span class="bullet">3.</span> 属性</span><br><span class="line"><span class="bullet">*</span> href 设置或返回完整的URL。</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">4.DOM</span><br><span class="line"><span class="bullet">*</span> 概念：Document Object Model 文档对象模型</span><br><span class="line"><span class="bullet">*</span> 将标记语言文档的各个组成部分，封装为对象，可以使用这些对象，对标记语音文档进行CRUD的动态操作</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> W3C DOM 标准被分为 3个不同的部分：</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 核心 DOM - 所有文档类型的标准模型</span><br><span class="line"><span class="bullet">*</span> Document:文档对象</span><br><span class="line"><span class="bullet">*</span> Element：元素对象</span><br><span class="line"><span class="bullet">*</span> Attribute：属性对象</span><br><span class="line"><span class="bullet">*</span> Text：文本对象</span><br><span class="line"><span class="bullet">*</span> Comment：注释对象</span><br><span class="line"><span class="bullet">*</span> XML DOM - 针对 XML 文档的标准模型</span><br><span class="line"><span class="bullet">*</span> HTML DOM - 针对 HTML 文档的标准模型</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 核心DOM模型：</span><br><span class="line"><span class="bullet">*</span> Document：文档对象</span><br><span class="line"><span class="bullet">1.</span> 创建(获取)：在html dom模型中可以使用window对象来获取</span><br><span class="line"><span class="bullet">1.</span> window.document</span><br><span class="line"><span class="bullet">2.</span> document</span><br><span class="line"><span class="bullet">2.</span> 方法：</span><br><span class="line"><span class="bullet">1.</span> 获取Element对象：</span><br><span class="line"><span class="bullet">1.</span> getElementById():根据id属性值获取元素对象，id属性值一般唯一</span><br><span class="line"><span class="bullet">2.</span> getElementsByTagName()：根据元素名称获取元素对象们，返回值是一个数组</span><br><span class="line"><span class="bullet">3.</span> getElementsByClassName():根据Class属性值获取元素对象们。返回值是一个数组</span><br><span class="line"><span class="bullet">4.</span> getElementsByName()：根据name属性值获取元素对象们。返回值是一个数组</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 创建其他DOM对象</span><br><span class="line"><span class="bullet">*</span> Element：元素对象</span><br><span class="line"><span class="bullet">1.</span> 获取/创建：通过document来获取和创建</span><br><span class="line"><span class="bullet">2.</span> 方法：</span><br><span class="line"><span class="bullet">1.</span> removeAttribute9():删除属性</span><br><span class="line"><span class="bullet">2.</span> setAttribute():设置属性</span><br><span class="line"><span class="bullet">*</span> Node：节点对象，其他5个的父对象</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> HTML DOM</span><br><span class="line"><span class="bullet">1.</span> 标签体的设置和获取：innerHTML</span><br><span class="line"><span class="bullet">2.</span> 使用html元素对象的属性</span><br><span class="line"><span class="bullet">3.</span> 控制元素样式</span><br><span class="line"><span class="bullet">1.</span> 使用元素的style属性来设置</span><br><span class="line"><span class="bullet">2.</span> 提前定义好类选择器的样式，通过元素的classname属性来设置其class属性值。</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">5.事件监听机制：</span><br><span class="line"><span class="bullet">*</span> 概念：某些组件被执行了某些操作后，丑法某些代码的执行。</span><br><span class="line"><span class="bullet">*</span> 事件：某些操作。 如：单击、双击</span><br><span class="line"><span class="bullet">*</span> 事件源：组件。如：按钮 文本输入框.....</span><br><span class="line"><span class="bullet">*</span> 监听器：代码</span><br><span class="line"><span class="bullet">*</span> 注册监听：将事件，事件源，监听器结合在一起。当事件源上发生了某个事件，则触发执行某个监听器代码。</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 常见的事件：</span><br><span class="line"><span class="bullet">1.</span> 点击事件：</span><br><span class="line"><span class="bullet">1.</span> onlick：单击事件</span><br><span class="line"><span class="bullet">2.</span> ondbclick：双击事件</span><br><span class="line"><span class="bullet">2.</span> 焦点事件：</span><br><span class="line"><span class="bullet">1.</span> onblur:失去焦点</span><br><span class="line"><span class="bullet">2.</span> onfocus：元素获得焦点</span><br><span class="line"><span class="bullet">3.</span> 加载事件：</span><br><span class="line"><span class="bullet">1.</span> onload：一张页面或一幅图像完成加载。</span><br><span class="line"><span class="bullet">4.</span> 鼠标事件：</span><br><span class="line"><span class="bullet">1.</span> onmousedown鼠标按钮被按下。</span><br><span class="line"><span class="bullet">*</span> 定义方法时，定义一个形参，接受event对象</span><br><span class="line"><span class="bullet">            *</span> event对象的button属性可以获取鼠标按钮键被点击了</span><br><span class="line"><span class="bullet">2.</span> onmousemove鼠标被移动。</span><br><span class="line"><span class="bullet">3.</span> onmouseout鼠标从某元素移开。</span><br><span class="line"><span class="bullet">4.</span> onmouseover鼠标移到某元素之上。</span><br><span class="line"><span class="bullet">5.</span> onmouseup鼠标按键被松开。</span><br><span class="line"><span class="bullet">5.</span> 键盘事件：</span><br><span class="line"><span class="bullet">1.</span> onkeydown某个键盘按键被按下。</span><br><span class="line"><span class="bullet">2.</span> onkeypress某个键盘按键被按下并松开。</span><br><span class="line"><span class="bullet">3.</span> onkeyup某个键盘按键被松开。</span><br><span class="line"><span class="bullet">6.</span> 选中和改变：</span><br><span class="line"><span class="bullet">1.</span> onselect文本被选中。</span><br><span class="line"><span class="bullet">2.</span> onchange域的内容被改变。</span><br><span class="line"><span class="bullet">7.</span> 表单事件：</span><br><span class="line"><span class="bullet">1.</span> onsubmit确认按钮被点击。</span><br><span class="line"><span class="bullet">*</span> 可以阻止表单的提交</span><br><span class="line"><span class="bullet">                *</span> 方法返回false则表单被阻止提交</span><br><span class="line"><span class="bullet">2.</span> onreset重置按钮被点击。</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h3&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java 前端" scheme="http://example.com/tags/Java-%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Ajax&amp;Json随笔</title>
    <link href="http://example.com/2021/08/12/ajax/"/>
    <id>http://example.com/2021/08/12/ajax/</id>
    <published>2021-08-12T06:21:50.000Z</published>
    <updated>2021-08-12T11:15:58.136Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><span id="more"></span><h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 概念：同步的JavaScript 和 XML</span><br><span class="line"><span class="bullet">1.</span> 同步和异步：客户端和服务端相互通信的基础上</span><br><span class="line"><span class="bullet">*</span> 同步：客户端必须等待服务器端的响应。在等待的期间客户端不能做其他操作。</span><br><span class="line"><span class="bullet">*</span> 异步：客户端不需要等待服务器端的响应。在服务器处理请求的过程中，客户端可以进行其他的操作。</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">2.</span> JQuery实现方式</span><br><span class="line"><span class="bullet">1.</span> $.ajax()</span><br><span class="line"><span class="bullet">*</span> 语法：$.ajax(&#123;键值对&#125;);</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> $.get():发送get请求</span><br><span class="line"><span class="bullet">*</span> 语法：$.get(url,[data],[callback],[type])</span><br><span class="line"><span class="bullet">*</span> 参数：</span><br><span class="line"><span class="bullet">*</span> url：请求路径</span><br><span class="line"><span class="bullet">*</span> data：请求参数</span><br><span class="line"><span class="bullet">*</span> callback：回调函数</span><br><span class="line"><span class="bullet">*</span> type：响应结果的类型</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> $.post():发送post请求</span><br></pre></td></tr></table></figure><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 概念： JavaScript Object Notation JavaScript对象表示法</span><br><span class="line"><span class="code">var p = &#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:23,&quot;gender&quot;:&quot;男&quot;&#125;;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> json现在多用于存储和交换文本信息的语法</span><br><span class="line"><span class="bullet">*</span> 进行数据的传输</span><br><span class="line"><span class="bullet">*</span> JSON 比 XML 更小、更快、更易解析。</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">2.</span> 语法：</span><br><span class="line"><span class="bullet">1.</span> 基本规则</span><br><span class="line"><span class="bullet">*</span> 数据在名称/值对中：json数据是由键值对构成的</span><br><span class="line"><span class="bullet">*</span> 键用引号(单双都可以)引起来，也可以不用引号</span><br><span class="line"><span class="bullet">*</span> 值的取值类型：</span><br><span class="line"><span class="bullet">1.</span> 数字（整数或浮点数）</span><br><span class="line"><span class="bullet">2.</span> 字符串（在双引号中）</span><br><span class="line"><span class="bullet">3.</span> 逻辑值（true 或 false）</span><br><span class="line"><span class="bullet">4.</span> 数组（在放括号中）&#123;&quot;person&quot;:[&#123;&#125;,&#123;&#125;]</span><br><span class="line"><span class="bullet">5.</span> 对象（在花括号中）&#123;&quot;address&quot;:&#123;&quot;province&quot;:&quot;安徽&quot;...&#125;&#125;</span><br><span class="line"><span class="bullet">6.</span> null</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 数据由逗号分隔：多个键值由逗号分隔</span><br><span class="line"><span class="bullet">*</span> 花括号保存对象：使用&#123;&#125;定义json 格式</span><br><span class="line"><span class="bullet">*</span> 方括号保存数组：[]</span><br><span class="line"></span><br><span class="line"><span class="code">获取数据代码：</span></span><br><span class="line"><span class="code">//1. 定义基本格式</span></span><br><span class="line"><span class="code">        var person = &#123;&quot;name&quot;: &quot;张三&quot;, &quot;age&quot;: 23, &quot;gender&quot;: true&#125;;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        //获取name的值</span></span><br><span class="line"><span class="code">        // var name = person.name;</span></span><br><span class="line"><span class="code">        // var name = person[&quot;name&quot;];</span></span><br><span class="line"><span class="code">        // alert(name);</span></span><br><span class="line"><span class="code">        // alert(person);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        //嵌套格式  [] --&gt; &#123;&#125;</span></span><br><span class="line"><span class="code">        var persons = &#123;</span></span><br><span class="line"><span class="code">            &quot;persons&quot;: [</span></span><br><span class="line"><span class="code">                &#123;&quot;name&quot;: &quot;张三&quot;, &quot;age&quot;: 23, &quot;gender&quot;: true&#125;,</span></span><br><span class="line"><span class="code">                &#123;&quot;name&quot;: &quot;李四&quot;, &quot;age&quot;: 22, &quot;gender&quot;: true&#125;,</span></span><br><span class="line"><span class="code">                &#123;&quot;name&quot;: &quot;王五&quot;, &quot;age&quot;: 21, &quot;gender&quot;: false&#125;</span></span><br><span class="line"><span class="code">            ]</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &#125;;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        //获取王五值</span></span><br><span class="line"><span class="code">        // var name1 = persons.persons[2].name;</span></span><br><span class="line"><span class="code">        // alert(name1)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        //嵌套格式  [] --&gt; &#123;&#125;</span></span><br><span class="line"><span class="code">        var ps = [&#123;&quot;name&quot;: &quot;张三&quot;, &quot;age&quot;: 23, &quot;gender&quot;: true&#125;,</span></span><br><span class="line"><span class="code">            &#123;&quot;name&quot;: &quot;李四&quot;, &quot;age&quot;: 22, &quot;gender&quot;: true&#125;,</span></span><br><span class="line"><span class="code">            &#123;&quot;name&quot;: &quot;王五&quot;, &quot;age&quot;: 21, &quot;gender&quot;: false&#125;];</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        //获取李四值</span></span><br><span class="line"><span class="code">        alert(ps[1].name);</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">遍历代码：</span><br><span class="line"><span class="code">//1. 定义基本格式</span></span><br><span class="line"><span class="code">       var person = &#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:23,&quot;gender&quot;:true&#125;;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">       var ps = [&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:23,&quot;gender&quot;:true&#125;,</span></span><br><span class="line"><span class="code">        &#123;&quot;name&quot;:&quot;李四&quot;,&quot;age&quot;:22,&quot;gender&quot;:true&#125;,</span></span><br><span class="line"><span class="code">       &#123;&quot;name&quot;:&quot;王五&quot;,&quot;age&quot;:21,&quot;gender&quot;:false&#125;];</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">       //获取person对象中所有的键和值</span></span><br><span class="line"><span class="code">       //for in 循环</span></span><br><span class="line"><span class="code">       /*for(var key in person)&#123;</span></span><br><span class="line"><span class="code">           //这样的方式获取不行。因为相当于 person.&quot;name&quot;</span></span><br><span class="line"><span class="code">           // alert(key + &quot;:&quot; + person.key);</span></span><br><span class="line"><span class="code">           alert(key+&quot;:&quot;+person[key]);</span></span><br><span class="line"><span class="code">       &#125;*/</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">       //获取ps中的所有值</span></span><br><span class="line"><span class="code">       for (var i = 0; i &lt; ps.length; i++)&#123;</span></span><br><span class="line"><span class="code">           var p = ps[i];</span></span><br><span class="line"><span class="code">           for(var key in p)&#123;</span></span><br><span class="line"><span class="code">               alert(key+&quot;:&quot;+p[key]);</span></span><br><span class="line"><span class="code">           &#125;</span></span><br><span class="line"><span class="code">       &#125;</span></span><br></pre></td></tr></table></figure><pre><code>3. JSON数据和Java对象的相互转换    * JSON解析器：        * 常见的解析器：Jsonlib，Gson，fastjson，jackson    1. JSON转为Java对象            1. 导入jackson的相关jar包            2. 创建jackson核心对象 ObjectMapper            3. 调用ObjectMapper的相关方法进行转换                1. readValue(json字符串数据,Class)    2. Java对象转换为JSON（对相应的对象进行序列化）        1. 使用步骤：            1. 导入jackson的相关jar包            2. 创建jackson核心对象 ObjectMapper            3. 调用ObjectMapper的相关方法进行转换                1. 转换方法：                    writeValue(参数1,obj):                        参数1：                            File：将obj对象转换为JSON字符串，并保存到指定的文件中                            Writer：将obj对象转换为JSON字符串，并将json数据填充到字符输出流中                            OutputStream：将obj对象转换为JSON字符串，并将json数据填充到字节输出流中                         writeValueAsString(obj):将对象转换为json字符串                2. 注解：                    1. @JsonIgnore:排除属性                    2. @JsonFormat:属性值的格式化                        * @JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)                3. 复杂java对象转换                    1. List:数组                    2. Map：对象格式一致</code></pre><h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h3><pre><code>* 校验用户名是否存在    1. 服务器响应的数据，在客户端使用时，要想当做json数据格式使用        1. $.get(type):将最后一个参数type指定为&quot;json&quot;        2. 在服务器端设置MIME类型            1. response.setContentType(&quot;application/json;charset=utf-8&quot;);                </code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h3&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java 前端" scheme="http://example.com/tags/Java-%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>EL&amp;JSTL随笔</title>
    <link href="http://example.com/2021/08/12/EL/"/>
    <id>http://example.com/2021/08/12/EL/</id>
    <published>2021-08-12T03:43:20.000Z</published>
    <updated>2021-08-13T07:44:10.177Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a><strong>Java</strong></h3><span id="more"></span><h3 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 指令</span><br><span class="line"><span class="bullet">*</span> 作用：用于配置JSP页面，导入资源文件</span><br><span class="line"><span class="bullet">*</span> 格式：</span><br><span class="line"><span class="bullet">*</span> &lt;%@ 指令名称 属性名1=属性值1 属性名2=属性值2 ... %&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 分类：</span><br><span class="line"><span class="bullet">1.</span> page：配置JSP页面的</span><br><span class="line"><span class="bullet">*</span> contentType：等同于response.setContentType()</span><br><span class="line"><span class="bullet">1.</span> 设置响应体的mime类型以及字符集</span><br><span class="line"><span class="bullet">2.</span> 设置当前JSP页面的编码（只能是高级的工具如IDE才能生效，如果使用低级工具，则需要设置pageEncoding属性值当前页面的字符集）</span><br><span class="line"><span class="bullet">*</span> import：导包</span><br><span class="line"><span class="bullet">*</span> errorPage：当前页面发生异常后，会自动跳转到指定的错误页面</span><br><span class="line"><span class="bullet">*</span> isErrorPage：标识当前页面是否是错误页面。</span><br><span class="line"><span class="bullet">*</span> true：是，可以使用内置对象exception</span><br><span class="line"><span class="bullet">*</span> false：否，默认值。不可以使用内置对象exception</span><br><span class="line"><span class="bullet">2.</span> incuude：页面包含的。导入页面的资源文件</span><br><span class="line"><span class="bullet">*</span> &lt;%@include file=&quot;top.jsp&quot;%&gt;</span><br><span class="line"><span class="bullet">3.</span> taglib：导入资源</span><br><span class="line"><span class="bullet">*</span> &lt;%@ taglib prefix=&quot;c&quot; url=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line"><span class="bullet">*</span> prefix:前缀，自定义的</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 注释：</span><br><span class="line"><span class="bullet">1.</span> html注释：</span><br><span class="line"><span class="code">&lt;!-- --&gt;:只能注释htmldiamante片段</span></span><br><span class="line"><span class="code">2. jsp注释：推荐使用</span></span><br><span class="line"><span class="code">&lt;%-- --%&gt;:可以注释所有</span></span><br><span class="line"><span class="code">3. 内置对象</span></span><br><span class="line"><span class="code">* 在jsp页面中不需要创建，直接使用的对象</span></span><br><span class="line"><span class="code">* 一共有9个：</span></span><br><span class="line"><span class="code"> 变量名真实类型作用</span></span><br><span class="line"><span class="code">* pageContextPageContext当前页面共享数据，可以获取其他八个内置对象</span></span><br><span class="line"><span class="code">* requestHttpServleetRequest一次请求访问的多个资源(转发)</span></span><br><span class="line"><span class="code">* sessionHttpSession一次会话的多个请求</span></span><br><span class="line"><span class="code">* applicationServletContext所有用户间共享数据</span></span><br><span class="line"><span class="code">* responseHttpServletResponse响应对象</span></span><br><span class="line"><span class="code">* pageObject当前页面(Servlet)的对象 this</span></span><br><span class="line"><span class="code">* outJspWriter输出对象，数据输出到页面上</span></span><br><span class="line"><span class="code">* configServletConfigServlet的配置对象</span></span><br><span class="line"><span class="code">* exceptionThrowable异常对象</span></span><br></pre></td></tr></table></figure><h3 id="MVC：开发模式"><a href="#MVC：开发模式" class="headerlink" title="MVC：开发模式"></a>MVC：开发模式</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> jsp演变历史</span><br><span class="line"><span class="bullet">1.</span> 早期只有servlet，只能使用response输出标签数据，非常麻烦</span><br><span class="line"><span class="bullet">2.</span> 后来有jsp，简化了Servlet的开发，如果过度使用jsp，在jsp中既写大量的java代码，又写html表，造成难于维护，难于分工协作</span><br><span class="line"><span class="bullet">3.</span> 再后来，java的web开发，借鉴mvc开发模式，使得程序的设计更加合理性</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">2.</span> MVC:</span><br><span class="line"><span class="bullet">1.</span> M: Model 模型 JavaBean</span><br><span class="line"><span class="bullet">*</span> 完成具体的业务操作，如：查询数据库，封装对象</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> V: View 视图 JSP</span><br><span class="line"><span class="bullet">*</span> 展示数据</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> C：Controller 控制器 Servlet</span><br><span class="line"><span class="bullet">*</span> 获取用户的输入</span><br><span class="line"><span class="bullet">*</span> 调用模型</span><br><span class="line"><span class="bullet">*</span> 将数据交给视图进行展示</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 优缺点：</span><br><span class="line"><span class="bullet">1.</span> 优点：</span><br><span class="line"><span class="bullet">1.</span> 耦合性低，方便维护，可以利于分工协作</span><br><span class="line"><span class="bullet">2.</span> 重用性高</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 缺点：</span><br><span class="line"><span class="bullet">1.</span> 使得项目架构变得复杂，对开发人员要求高</span><br></pre></td></tr></table></figure><h3 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 概念：Expression Language 表达式语言</span><br><span class="line"><span class="bullet">2.</span> 作用：替换和简化jsp页面中java代码的编写</span><br><span class="line"><span class="bullet">3.</span> 语法：$&#123;表达式&#125;</span><br><span class="line"><span class="bullet">4.</span> 注意：</span><br><span class="line"><span class="bullet">*</span> jsp默认支持el表达式的。如果要忽略el表达式</span><br><span class="line"><span class="bullet">1.</span> 设置jsp中page指令中：isELIgnored=&quot;true&quot; 忽略当前jsp页面中所有的el表达式</span><br><span class="line"><span class="bullet">2.</span> \$&#123;表达式&#125;：忽略当前这个el表达式</span><br><span class="line"></span><br><span class="line"><span class="bullet">5.</span> 使用：</span><br><span class="line"><span class="bullet">1.</span> 运算：</span><br><span class="line"><span class="bullet">*</span> 运算符：</span><br><span class="line"><span class="bullet">1.</span> 算数运算符：+ - <span class="emphasis">* /(div) %(mod)</span></span><br><span class="line"><span class="emphasis">2. 比较运算符:&gt; &lt; &gt;= &lt;= == !=</span></span><br><span class="line"><span class="emphasis">3. 逻辑运算符:&amp;&amp;(and) ||(or) |(not)</span></span><br><span class="line"><span class="emphasis">4. 空运算符：empty</span></span><br><span class="line"><span class="emphasis">*</span> 功能:用于判断字符串、集合、数组对象是否为null或者长度是否为0</span><br><span class="line"><span class="bullet">*</span> $&#123;empty list&#125;：判断字符串、集合、数组对象是否为null或者长度为0</span><br><span class="line"><span class="bullet">*</span> $&#123;not empty str&#125;:表示判断字符串、集合、数组对象是否不为null或者长度&gt;0</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 获取值</span><br><span class="line"><span class="bullet">1.</span> el表达式只能从域对象中获取值</span><br><span class="line"><span class="bullet">2.</span> 语法：</span><br><span class="line"><span class="bullet">1.</span> $&#123;域名城.键名&#125;：从指定域中获取指定的值</span><br><span class="line"><span class="bullet">*</span> 域名称：</span><br><span class="line"><span class="bullet">1.</span> PageScope        --&gt; PageContext</span><br><span class="line"><span class="bullet">2.</span> requestScope--&gt; requeset</span><br><span class="line"><span class="bullet">3.</span> sessionScope--&gt; session</span><br><span class="line"><span class="bullet">4.</span> applicationScope--&gt; application(ServletContext)</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> $&#123;键名&#125;：表示依次从最小的域中查找是否有该键对应的值，直到找到为止。</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> 获取对象、List集合、Map集合的值</span><br><span class="line"><span class="bullet">1.</span> 对象：$&#123;域名城.键名.属性名&#125;</span><br><span class="line"><span class="bullet">*</span> 本质上会去调用对象的getter方法</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> List集合：$&#123;域名称.键名[索引]&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> Map集合：</span><br><span class="line"><span class="bullet">*</span> $&#123;域名称.键名.key名称&#125;</span><br><span class="line"><span class="bullet">*</span> $&#123;域名称.键名[key名称]&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> 隐式对象：</span><br><span class="line"><span class="bullet">*</span> el表达式中有11个隐式对象</span><br><span class="line"><span class="bullet">*</span> pageContext:</span><br><span class="line"><span class="bullet">*</span> 获取jsp其他八个内置对象</span><br><span class="line"><span class="bullet">*</span> $&#123;pageContext.request.contextPath&#125;:动态获取虚拟目录</span><br></pre></td></tr></table></figure><h3 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 概念：JavaServer Page Tag Library JSP标准标签库</span><br><span class="line"><span class="bullet">*</span> 是由Apache组织提供的开源的免费的jsp标签  &lt;标签&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 作用：用于简化和替换jsp页面上的java代码</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> 使用步骤：</span><br><span class="line"><span class="bullet">1.</span> 导入jstl相关jar包</span><br><span class="line"><span class="bullet">2.</span> 引入标签库：taglib指令：&lt;%@ taglib %&gt;</span><br><span class="line"><span class="bullet">3.</span> 使用标签</span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> 常用的JSTL标签</span><br><span class="line"><span class="bullet">1.</span> if：相当于java代码的if语句</span><br><span class="line"><span class="bullet">1.</span> 属性：</span><br><span class="line"><span class="bullet">        *</span> test 必须属性，接受boolean表达式</span><br><span class="line"><span class="bullet">            *</span> 如果表达式为true，则显示if标签体内容，如果为false，则不显示标签体内容</span><br><span class="line"><span class="bullet">        *</span> 一般情况下，test属性值会结合el表达式一起使用</span><br><span class="line"></span><br><span class="line"><span class="bullet">    2.</span> 注意：c:if标签中没有else情况，想要else情况，则可以再定义一个c:if标签</span><br><span class="line"><span class="bullet">2.</span> choose：相当于java代码的switch语句</span><br><span class="line"><span class="code"> 使用choose标签取出数字   相当于switch声明</span></span><br><span class="line"><span class="code">             使用when标签做数字判断   相当于case</span></span><br><span class="line"><span class="code">             otherwise标签做其他情况的声明 相当于defaule</span></span><br><span class="line"><span class="code">3. foreach：相当于java代码的for语句</span></span><br><span class="line"><span class="code"> 1. 完成重复的操作</span></span><br><span class="line"><span class="code">        for(int i = 0; i &lt; 10; i++)&#123;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">        * 属性：</span></span><br><span class="line"><span class="code">            begin:开始值</span></span><br><span class="line"><span class="code">            end：结束值</span></span><br><span class="line"><span class="code">            var：临时变量</span></span><br><span class="line"><span class="code">            step：步长</span></span><br><span class="line"><span class="code">            varStatus:循环状态对象</span></span><br><span class="line"><span class="code">                index:容器中元素的索引从0开始</span></span><br><span class="line"><span class="code">                count：循环次数从1开始</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet"> 2.</span> 遍历容器</span><br><span class="line"><span class="code">            List&lt;User&gt; list</span></span><br><span class="line"><span class="code">            for(User user : list)&#123;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">            * 属性：</span></span><br><span class="line"><span class="code">                items：容器对象</span></span><br><span class="line"><span class="code">                var:容器中元素的临时变量</span></span><br><span class="line"><span class="code">                varStatus：循环状态对象</span></span><br><span class="line"><span class="code">                    index：容器中元素的索引，从0开始</span></span><br><span class="line"><span class="code">                    count：循环次数，从1开始</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;/h3&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java 前端" scheme="http://example.com/tags/Java-%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot</title>
    <link href="http://example.com/2021/08/02/SpringBoot/"/>
    <id>http://example.com/2021/08/02/SpringBoot/</id>
    <published>2021-08-02T12:37:54.000Z</published>
    <updated>2021-08-13T01:31:42.542Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><span id="more"></span><h2 id="SSM环境搭建"><a href="#SSM环境搭建" class="headerlink" title="SSM环境搭建"></a>SSM环境搭建</h2><ul><li>spring </li><li>springmvc</li><li>mybatis</li><li>spring springmvc mybatis  简单功能   员工添加 查询  所有</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 项目</span></span><br><span class="line"><span class="bullet">-</span>  需求分析  概要设计(库表设计)   详细设计(验证库表正确性)  编码(环境搭建+业务代码)  测试  部署上线</span><br><span class="line"></span><br><span class="line"><span class="section"># 员工添加 查询所有功能  SSM</span></span><br><span class="line"><span class="bullet">-</span> 库表   库: ssm   数据库:mysql  表: id name birthday salary</span><br><span class="line"></span><br><span class="line"><span class="section"># 编码 环境搭建 ssm  spring  springmvc   一个团队开发 无缝整合</span></span><br><span class="line"><span class="bullet">-</span> springmvc  spring  mybatis</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span></span><br><span class="line"><span class="code">        &lt;!--junit--&gt;</span></span><br><span class="line"><span class="code">        &lt;dependency&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;junit&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">            &lt;version&gt;4.11&lt;/version&gt;</span></span><br><span class="line"><span class="code">            &lt;scope&gt;test&lt;/scope&gt;</span></span><br><span class="line"><span class="code">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &lt;!--spring--&gt;</span></span><br><span class="line"><span class="code">        &lt;dependency&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">            &lt;version&gt;5.3.6&lt;/version&gt;</span></span><br><span class="line"><span class="code">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &lt;dependency&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">            &lt;version&gt;5.3.6&lt;/version&gt;</span></span><br><span class="line"><span class="code">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &lt;dependency&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">            &lt;version&gt;5.3.6&lt;/version&gt;</span></span><br><span class="line"><span class="code">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &lt;dependency&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">            &lt;version&gt;5.3.6&lt;/version&gt;</span></span><br><span class="line"><span class="code">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &lt;dependency&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">            &lt;version&gt;5.3.6&lt;/version&gt;</span></span><br><span class="line"><span class="code">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &lt;dependency&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">            &lt;version&gt;5.3.6&lt;/version&gt;</span></span><br><span class="line"><span class="code">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &lt;dependency&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">            &lt;version&gt;5.3.6&lt;/version&gt;</span></span><br><span class="line"><span class="code">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &lt;!--spring web mvc--&gt;</span></span><br><span class="line"><span class="code">        &lt;dependency&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">            &lt;version&gt;5.3.6&lt;/version&gt;</span></span><br><span class="line"><span class="code">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"></span><br><span class="line"><span class="code">        &lt;!--druid--&gt;</span></span><br><span class="line"><span class="code">        &lt;dependency&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;druid&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">            &lt;version&gt;1.2.4&lt;/version&gt;</span></span><br><span class="line"><span class="code">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &lt;!--mysql--&gt;</span></span><br><span class="line"><span class="code">        &lt;dependency&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">            &lt;version&gt;5.1.38&lt;/version&gt;</span></span><br><span class="line"><span class="code">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &lt;!--mybatis--&gt;</span></span><br><span class="line"><span class="code">        &lt;dependency&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">            &lt;version&gt;3.5.6&lt;/version&gt;</span></span><br><span class="line"><span class="code">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &lt;dependency&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">            &lt;version&gt;2.0.6&lt;/version&gt;</span></span><br><span class="line"><span class="code">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"></span><br><span class="line"><span class="code">        &lt;!--  jackson--&gt;</span></span><br><span class="line"><span class="code">        &lt;dependency&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">            &lt;version&gt;2.9.3&lt;/version&gt;</span></span><br><span class="line"><span class="code">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"></span><br><span class="line"><span class="code">        &lt;!-- aspectj --&gt;</span></span><br><span class="line"><span class="code">        &lt;dependency&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">            &lt;version&gt;1.9.5&lt;/version&gt;</span></span><br><span class="line"><span class="code">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        &lt;!--aspectj--&gt;</span></span><br><span class="line"><span class="code">        &lt;dependency&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;aspectjrt&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">            &lt;version&gt;1.9.5&lt;/version&gt;</span></span><br><span class="line"><span class="code">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    &lt;/dependencies&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建spring配置"><a href="#创建spring配置" class="headerlink" title="创建spring配置"></a>创建spring配置</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--开启注解扫描--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.baizhi.service&quot;</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;aspectj&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;com.baizhi.controller..*&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--  创建DataSource--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ssm?characterEncoding=UTF-8&quot;</span>/&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--  创建 SQLSessionFactoryBean --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/baizhi/mapper/*.xml&quot;</span>/&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.baizhi.entity&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--  创建dao --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.baizhi.dao&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--  创建事务管理器--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 开启注解事务生效--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="创建springmvc配置"><a href="#创建springmvc配置" class="headerlink" title="创建springmvc配置"></a>创建springmvc配置</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    注解扫描--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.baizhi.controller&quot;</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 开启注册驱动--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 配置视图解析器--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>/&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置工厂配置--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span></span>contextConfigLocation<span class="xml"><span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span>classpath:spring.xml<span class="xml"><span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span>org.springframework.web.context.ContextLoaderListener<span class="xml"><span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--配置springmvc--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span></span>springmvc<span class="xml"><span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="xml"><span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span></span><br><span class="line"><span class="code">    &lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;</span></span><br><span class="line"><span class="code">  &lt;/init-param&gt;</span></span><br><span class="line"><span class="code">&lt;/servlet&gt;</span></span><br><span class="line"><span class="code">&lt;servlet-mapping&gt;</span></span><br><span class="line"><span class="code">  &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span></span><br><span class="line"><span class="code">  &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="code">&lt;/servlet-mapping&gt;</span></span><br></pre></td></tr></table></figure><h2 id="现有SSM开发存在问题"><a href="#现有SSM开发存在问题" class="headerlink" title="现有SSM开发存在问题"></a>现有SSM开发存在问题</h2><ul><li>大量maven冗余配置</li><li>每次构建项目都要书写大量相同配置极大浪费了项目开发时间</li><li>每次整合第三方技术都需要编写相关配置文件</li><li>项目测试每次都需要部署到tomcat</li></ul><blockquote><p><strong>注意:这就是早期的SSM或者SSH开发存在问题,是不是很麻烦☹️☹️☹️</strong></p></blockquote><h2 id="SpringBoot的引言"><a href="#SpringBoot的引言" class="headerlink" title="SpringBoot的引言"></a>SpringBoot的引言</h2><p>Spring Boot是由<code>Pivotal团队提供的全新框架</code>，其设计目的是用来<code>简化Spring应用的 初始搭建以及开发过程</code>。该框架使用了<code>特定的方式来进行配置</code>，从而使开发人员不 再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应 用开发领域(rapid application development)成为领导者。</p><p>Spring Boot 全新框架  作用: 简化spring应用初始搭建和开发过程</p><p>如何简化:  开发人员使用springboot只要基于特定方式进行配置  简化spring使用</p><p>SpringBoot 微框架:   5分钟 完成之前ssm中环境</p><p><code>springboot(微框架) = springmvc(控制器) + spring core(项目管理)</code></p><h2 id="SpringBoot的优势"><a href="#SpringBoot的优势" class="headerlink" title="SpringBoot的优势"></a>SpringBoot的优势</h2><ol><li><code>创建完整的独立的Spring应用程序  </code>  spring springmvc  只有一个容器</li><li><code>嵌入的Tomcat，无需部署WAR文件</code>  springboot 内嵌tomcat  应用跑在内嵌服务器</li><li><code>简化Maven配置,自动配置Spring Springmvc,没有XML配置</code>  几个依赖  <ol><li>用来springboot spring应用在无xml</li></ol></li></ol><h2 id="SpringBoot的约定"><a href="#SpringBoot的约定" class="headerlink" title="SpringBoot的约定"></a>SpringBoot的约定</h2><p>![image-20200321091519423](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20200321091519423.png)</p><ul><li><p><code>springboot 项目中必须在src/main/resources中放入application.yml(.properties)核心配置文件  名字必须为:application</code></p></li><li><p>springboot 项目中必须在src/main/java中所有子包之外构建全局入口类型,xxApplication,入口类一个springboot项目只能有一个`</p></li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h5 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.System Requirements</span></span><br><span class="line"><span class="code">JDK1.8+</span></span><br><span class="line"><span class="code">MAVEN3.2+  </span></span><br><span class="line"><span class="code">Spring Framework 5.x+ </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># 2.ServletContainers: </span></span><br><span class="line"><span class="code">Tomcat 9.0+</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># 3.开发工具</span></span><br><span class="line"><span class="code">IDEA    2021版本 </span></span><br></pre></td></tr></table></figure><h5 id="新建项目中引入依赖"><a href="#新建项目中引入依赖" class="headerlink" title="新建项目中引入依赖"></a>新建项目中引入依赖</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--继承springboot的父项目--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">    &lt;version&gt;2.5.0&lt;/version&gt;</span></span><br><span class="line"><span class="code">&lt;/parent&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span></span><br><span class="line">  &lt;!--引入springboot的web支持--&gt;</span><br><span class="line"><span class="code">    &lt;dependency&gt;</span></span><br><span class="line"><span class="code">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="code">&lt;/dependencies&gt;</span></span><br></pre></td></tr></table></figure><h5 id="引入配置文件"><a href="#引入配置文件" class="headerlink" title="引入配置文件"></a>引入配置文件</h5><p>​        <code>项目中 src/main/resources/application.yml</code></p><h5 id="编写入口类"><a href="#编写入口类" class="headerlink" title="编写入口类"></a>编写入口类</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//在项目中如下的包结构中创建入口类 Application</span><br><span class="line">/<span class="emphasis">*</span></span><br><span class="line"><span class="emphasis">com</span></span><br><span class="line"><span class="emphasis">+| baizhi</span></span><br><span class="line"><span class="emphasis">*</span>/</span><br><span class="line"><span class="code">    @SpringBootApplication</span></span><br><span class="line"><span class="code">    public class Application &#123;</span></span><br><span class="line"><span class="code">      public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="code">        SpringApplication.run(Application.class,args);</span></span><br><span class="line"><span class="code">      &#125;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br></pre></td></tr></table></figure><h5 id="运行main启动项目"><a href="#运行main启动项目" class="headerlink" title="运行main启动项目"></a>运行main启动项目</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup</span><br><span class="line">s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080 (http)</span><br><span class="line">com.baizhi.Application : Started Application in 2.152 seconds (JVM running for 2.611)</span><br><span class="line">//说明:  出现以上日志说明启动成功</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意:到这里项目环境已经搭建成功了,看看仅仅需要5分钟😄😁😁</strong></p></blockquote><h5 id="建包并创建控制器"><a href="#建包并创建控制器" class="headerlink" title="建包并创建控制器"></a>建包并创建控制器</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//在项目中创建指定的包结构</span><br><span class="line">/<span class="emphasis">*</span></span><br><span class="line"><span class="emphasis"> com</span></span><br><span class="line"><span class="emphasis">    +| baizhi</span></span><br><span class="line"><span class="emphasis">    +| controller *</span>/ </span><br><span class="line"><span class="code">                @Controller</span></span><br><span class="line"><span class="code">                  @RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="code">                  public class HelloController &#123;</span></span><br><span class="line"><span class="code">                    @RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="code">                    @ResponseBody</span></span><br><span class="line"><span class="code">                    public String hello()&#123;</span></span><br><span class="line"><span class="code">                      System.out.println(&quot;======hello world=======&quot;);</span></span><br><span class="line"><span class="code">                      return &quot;hello&quot;;</span></span><br><span class="line"><span class="code">                    &#125;</span></span><br><span class="line"><span class="code">                  &#125;</span></span><br><span class="line"><span class="code">                     </span></span><br></pre></td></tr></table></figure><h5 id="访问项目"><a href="#访问项目" class="headerlink" title="访问项目"></a>访问项目</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 注意: springboot的项目启动默认项目名</span></span><br><span class="line"><span class="bullet">-</span> 访问路径:  http://localhost:8080/hello/hello</span><br></pre></td></tr></table></figure><h5 id="修改内嵌服务器端口"><a href="#修改内嵌服务器端口" class="headerlink" title="修改内嵌服务器端口"></a>修改内嵌服务器端口</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8989</span><br></pre></td></tr></table></figure><h5 id="修改应用名称"><a href="#修改应用名称" class="headerlink" title="修改应用名称"></a>修改应用名称</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  servlet:</span><br><span class="line"><span class="code">    context-path: /springboot_day1</span></span><br></pre></td></tr></table></figure><h2 id="相关注解说明"><a href="#相关注解说明" class="headerlink" title="相关注解说明"></a>相关注解说明</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 入口类 SpringApplication</span></span><br><span class="line"><span class="bullet">-</span> SpringBootApplication: 全局入口类 有且只能有一个</span><br><span class="line"><span class="bullet">-</span> mian 函数参数可以在启动时指定jvm参数覆盖默认配置</span><br><span class="line"></span><br><span class="line"><span class="section"># @SpringBootApplication 注解等价于: </span></span><br><span class="line"><span class="bullet">-</span> @SpringBootConfiguration           标识这是一个springboot的配置类,默认自定配置Spring环境</span><br><span class="line"><span class="bullet">-</span> @EnableAutoConfiguration  自动与项目中集成的第三方技术进行集成</span><br><span class="line"><span class="bullet">-</span> @ComponentScan  扫描入口类所在子包以及子包后代包中注解</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h5 id="配置文件的拆分"><a href="#配置文件的拆分" class="headerlink" title="配置文件的拆分"></a>配置文件的拆分</h5><p>说明: 在实际开发过程中生产环境和测试环境有可能是不一样的 因此将生产中的配置和测试中的配置拆分开,是非常必要的在springboot中也提供了配置文件拆分的方式. 这里以生产中项名名称不一致为例:</p><ul><li><p><strong>生产中项目名为: <code>springboot</code></strong></p></li><li><p><strong>测试中项目名为: <code>springboot_day1</code></strong></p></li><li><p><strong>端口同时为:   8080</strong></p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 主配置文件:</span></span><br><span class="line"><span class="bullet">-</span> application.yml#用来书写相同的的配置</span><br><span class="line"><span class="code">server:</span></span><br><span class="line"><span class="code">port: 8080 #生产和测试端口一致</span></span><br><span class="line"><span class="code">                   </span></span><br><span class="line"><span class="code"># 生产配置文件:</span></span><br><span class="line"><span class="code">- application-pord.yml #prod为配置文件简名</span></span><br><span class="line"><span class="code">    server:</span></span><br><span class="line"><span class="code">    context-path: /cmfz</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">#测试配置文件:</span></span><br><span class="line"><span class="code">-application-dev.yml  #dev为配置文件简名</span></span><br><span class="line"><span class="code">    server:</span></span><br><span class="line"><span class="code">    context-path: /springboot</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section">#在主配置中指定那个环境生效配置</span></span><br><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line"><span class="code">    active: dev #指定那个环境配置生效 dev为环境配置文件的简名</span></span><br></pre></td></tr></table></figure><p>![image-20210609152026228](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20210609152026228.png)</p><h5 id="启动指定配置文件"><a href="#启动指定配置文件" class="headerlink" title="启动指定配置文件"></a>启动指定配置文件</h5><p>说明: 往往在企业级开发过程中为SpringBoot应用启动时指定一个完整外部配置也是经常用到的,在SpringBoot中也提供这个方式来启动项目如:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.创建一个完整的配置文件</span></span><br></pre></td></tr></table></figure><p>![image-20210609152117401](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20210609152117401.png)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 2.启动时指定配置文件位置</span></span><br></pre></td></tr></table></figure><p>![image-20210609152324204](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20210609152324204.png)</p><hr><h2 id="工厂创建对象"><a href="#工厂创建对象" class="headerlink" title="工厂创建对象"></a>工厂创建对象</h2><h3 id="创建单个对象"><a href="#创建单个对象" class="headerlink" title="创建单个对象"></a>创建单个对象</h3><p>​    在springboot中可以管理单个对象可以直接使用spring框架中注解形式创建。</p><ul><li><strong><code>@Component</code></strong> 通用的对象创建注解<ul><li><code>@Controller</code>  用来创建控制器对象</li><li><code>@Service</code>      用来创建业务层对象</li><li><code>@Repository</code> 用来创建DAO层对象<ul><li>以上注解都有value属性，value属性用来指定工厂中对象名称</li></ul></li></ul></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class DemoServiceImpl implements UserService&#123;</span><br><span class="line">  //doing....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 2.通过工厂创建之后可以在使用处注入该对象</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;hello&quot;)</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"><span class="code">    @Autowired</span></span><br><span class="line"><span class="code">    private DemoService demoService;</span></span><br><span class="line"><span class="code">    //doing...</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="创建多个对象"><a href="#创建多个对象" class="headerlink" title="创建多个对象"></a>创建多个对象</h3><p>​    如何在springboot中像spring框架一样通过xml创建多个对象,在SpringBoot中也提供了相同注解如**<code>@Configuration + @Bean</code>**注解进行创建</p><ul><li><strong><code>@Configuration</code></strong>   代表这是一个spring的配置类相当于Spring.xml配置文件</li><li><strong><code>@Bean</code></strong>   用来在工厂中创建这个@Bean注解标识的对象  <ul><li>默认使用@Bean创建对象在工厂中唯一标识为<strong>方法名称</strong></li><li>修改在工厂中对象标识可以在使用**@Bean(“工厂中名字”)指定一个名字**</li></ul></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.管理复杂对象的创建</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class Beans &#123;</span><br><span class="line"><span class="code">    @Bean</span></span><br><span class="line"><span class="code">    public Calendar calendar()&#123;</span></span><br><span class="line"><span class="code">        return Calendar.getInstance();</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 2.使用复杂对象</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;hello&quot;)</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"><span class="code">    @Autowired</span></span><br><span class="line"><span class="code">    private Calendar calendar;</span></span><br><span class="line"><span class="code">    ......</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 注意: </span></span><br><span class="line"><span class="code">1.@Configuration 用来在工厂中一次性创建多个对象</span></span><br><span class="line"><span class="code">  2.@Component     用来创建单个对象                     </span></span><br></pre></td></tr></table></figure><hr><h2 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h2><h5 id="基本属性注入"><a href="#基本属性注入" class="headerlink" title="基本属性注入"></a>基本属性注入</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.@Value 属性注入               [重点]</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"><span class="code">    //基本类型+String类型+日期类型</span></span><br><span class="line"><span class="code">  @Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="code">    private String name;</span></span><br><span class="line"><span class="code">    @Value(&quot;$&#123;age&#125;&quot;)</span></span><br><span class="line"><span class="code">    private Integer age;</span></span><br><span class="line"><span class="code">    @Value(&quot;$&#123;sex&#125;&quot;)</span></span><br><span class="line"><span class="code">    private Boolean sex;</span></span><br><span class="line"><span class="code">    @Value(&quot;$&#123;price&#125;&quot;)</span></span><br><span class="line"><span class="code">    private Double price;</span></span><br><span class="line"><span class="code">    @Value(&quot;$&#123;bir&#125;&quot;)</span></span><br><span class="line"><span class="code">    private Date bir;</span></span><br><span class="line"><span class="code">//注入数组</span></span><br><span class="line"><span class="code">    @Value(&quot;$&#123;qqs&#125;&quot;)</span></span><br><span class="line"><span class="code">    private String[] qqs;</span></span><br><span class="line"><span class="code">  //注入list</span></span><br><span class="line"><span class="code">    @Value(&quot;$&#123;lists&#125;&quot;)</span></span><br><span class="line"><span class="code">    private List&lt;String&gt; lists;</span></span><br><span class="line"><span class="code">  //注入maps</span></span><br><span class="line"><span class="code">    @Value(&quot;#&#123;$&#123;maps&#125;&#125;&quot;)</span></span><br><span class="line"><span class="code">    private Map&lt;String,String&gt; maps;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 2.在配置文件中定义注入值</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">name: 小陈</span><br><span class="line">age: 23</span><br><span class="line">price: 23.23</span><br><span class="line">sex: true</span><br><span class="line">bir: 2012/12/12</span><br><span class="line"></span><br><span class="line">qqs: 123,3434,3434</span><br><span class="line">lists: xiaochen,xiaoming,xiaosan</span><br><span class="line"></span><br><span class="line">maps: &quot;&#123;&#x27;aa&#x27;:&#x27;1234&#x27;,&#x27;bb&#x27;:&#x27;2344&#x27;&#125;&quot;</span><br></pre></td></tr></table></figure><ul><li><strong><code>注意: 这里面map集合注入比较特殊</code></strong></li></ul><h5 id="对象方式注入"><a href="#对象方式注入" class="headerlink" title="对象方式注入"></a>对象方式注入</h5><p><strong><code>注意: 这种方式必须提供SET方法</code></strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1. @ConfigurationProperties(prefix=&quot;前缀&quot;)</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = &quot;user&quot;)</span><br><span class="line">public class User &#123;</span><br><span class="line"><span class="code">    private String id;</span></span><br><span class="line"><span class="code">    private String name;</span></span><br><span class="line"><span class="code">    private Integer age;</span></span><br><span class="line"><span class="code">    private String  bir;</span></span><br><span class="line"><span class="code">    //set 方法一定要提供</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 2. 编写配置文件</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user:</span><br><span class="line">  id: 24</span><br><span class="line">  name: xiaohei</span><br><span class="line">  age: 23</span><br><span class="line">  bir: 2012/12/12</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 3. 引入依赖构建自定义注入元数据</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span></span>org.springframework.boot<span class="xml"><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span></span>spring-boot-configuration-processor<span class="xml"><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">optional</span>&gt;</span></span>true<span class="xml"><span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h2 id="JSP模板集成"><a href="#JSP模板集成" class="headerlink" title="JSP模板集成"></a>JSP模板集成</h2><p>在SpringBoot框架中默认模板推荐使用Thymeleaf模板,这里我们优先讲与JSP模板集成</p><h5 id="引入jsp的集成jar包"><a href="#引入jsp的集成jar包" class="headerlink" title="引入jsp的集成jar包"></a>引入jsp的集成jar包</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--c标签库--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;groupId&gt;jstl&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">    &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">    &lt;version&gt;1.2&lt;/version&gt;</span></span><br><span class="line"><span class="code">&lt;/dependency&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">&lt;!--让内嵌tomcat具有解析jsp功能--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">    &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><h5 id="引入jsp运行插件"><a href="#引入jsp运行插件" class="headerlink" title="引入jsp运行插件"></a>引入jsp运行插件</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;finalName&gt;springboot_day1&lt;/finalName&gt;</span></span><br><span class="line"><span class="code">    &lt;!--引入springboot插件 可以正确打包  显示jsp--&gt;</span></span><br><span class="line"><span class="code">    &lt;plugins&gt;</span></span><br><span class="line"><span class="code">        &lt;plugin&gt;</span></span><br><span class="line"><span class="code">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">        &lt;/plugin&gt;</span></span><br><span class="line"><span class="code">    &lt;/plugins&gt;</span></span><br><span class="line"><span class="code">&lt;/build&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置视图解析器"><a href="#配置视图解析器" class="headerlink" title="配置视图解析器"></a>配置视图解析器</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#在配置文件中引入视图解析器</span></span><br><span class="line">spring:</span><br><span class="line">  mvc:</span><br><span class="line"><span class="code">    view:</span></span><br><span class="line"><span class="code">      prefix: /     # /代表访问项目中webapp中页面</span></span><br><span class="line"><span class="code">      suffix: .jsp </span></span><br></pre></td></tr></table></figure><h5 id="第一种方式使用插件启动访问JSP页面"><a href="#第一种方式使用插件启动访问JSP页面" class="headerlink" title="第一种方式使用插件启动访问JSP页面"></a>第一种方式使用插件启动访问JSP页面</h5><p>![image-20191129124602959](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20191129124602959.png)</p><h5 id="第二种方式使用idea中指定工作目录启动-访问JSP"><a href="#第二种方式使用idea中指定工作目录启动-访问JSP" class="headerlink" title="第二种方式使用idea中指定工作目录启动 访问JSP"></a>第二种方式使用idea中指定工作目录启动 访问JSP</h5><p> ![image-20191129124727562](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20191129124727562.png)</p><h5 id="启动项目测试"><a href="#启动项目测试" class="headerlink" title="启动项目测试"></a>启动项目测试</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8989/index.jsp</span><br></pre></td></tr></table></figure><h5 id="修改jsp无须重启应用"><a href="#修改jsp无须重启应用" class="headerlink" title="修改jsp无须重启应用"></a>修改jsp无须重启应用</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  servlet:</span><br><span class="line"><span class="code">    jsp:</span></span><br><span class="line"><span class="code">      init-parameters:</span></span><br><span class="line"><span class="code">        development: true</span></span><br></pre></td></tr></table></figure><hr><h2 id="整合Mybatis框架"><a href="#整合Mybatis框架" class="headerlink" title="整合Mybatis框架"></a>整合Mybatis框架</h2><h5 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span></span>com.alibaba<span class="xml"><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span></span>druid<span class="xml"><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span></span>1.2.4<span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span></span>mysql<span class="xml"><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span></span>mysql-connector-java<span class="xml"><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span></span>5.1.38<span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--整合mybatis--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span></span>org.mybatis.spring.boot<span class="xml"><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span></span>mybatis-spring-boot-starter<span class="xml"><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span></span>2.1.4<span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">  说明:由于springboot整合mybatis版本中默认依赖mybatis 因此不需要额外引入mybati版本,否则会出现冲突`--&gt;</span><br></pre></td></tr></table></figure><h5 id="配置配置文件"><a href="#配置配置文件" class="headerlink" title="配置配置文件"></a>配置配置文件</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  mvc:</span><br><span class="line"><span class="code">    view:</span></span><br><span class="line"><span class="code">      prefix: /</span></span><br><span class="line"><span class="code">      suffix: .jsp</span></span><br><span class="line"><span class="code">  datasource:</span></span><br><span class="line"><span class="code">    type: org.apache.commons.dbcp.BasicDataSource   #指定连接池类型</span></span><br><span class="line"><span class="code">    driver-class-name: com.mysql.jdbc.Driver        #指定驱动</span></span><br><span class="line"><span class="code">    url: jdbc:mysql://localhost:3306/ssm?characterEncoding=UTF-8           #指定url</span></span><br><span class="line"><span class="code">    username: root#指定用户名</span></span><br><span class="line"><span class="code">    password: root #指定密码</span></span><br></pre></td></tr></table></figure><h5 id="加入mybatis配置"><a href="#加入mybatis配置" class="headerlink" title="加入mybatis配置"></a>加入mybatis配置</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#配置文件中加入如下配置:</span></span><br><span class="line"></span><br><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath:com/baizhi/mapper/<span class="emphasis">*.xml  #指定mapper配置文件位置</span></span><br><span class="line"><span class="emphasis">  type-aliases-package: com.baizhi.entity              #指定起别名所在包</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//入口类中加入如下配置:</span><br><span class="line">@SpringBootApplication</span><br><span class="line">@MapperScan(&quot;com.baizhi.dao&quot;)   //必须在入口类中加入这个配置</span><br><span class="line">public class Application &#123;</span><br><span class="line"><span class="code">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="code">        SpringApplication.run(Application.class,args);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE <span class="code">`t_clazz`</span> (</span><br><span class="line">  <span class="code">`id`</span> varchar(40) NOT NULL,</span><br><span class="line">  <span class="code">`name`</span> varchar(80) DEFAULT NULL,</span><br><span class="line">  <span class="code">`no`</span> varchar(90) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (<span class="code">`id`</span>)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><h5 id="开发实体类"><a href="#开发实体类" class="headerlink" title="开发实体类"></a>开发实体类</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Clazz &#123;</span><br><span class="line"><span class="code">    private String id;</span></span><br><span class="line"><span class="code">    private String name;</span></span><br><span class="line"><span class="code">    private String no;</span></span><br><span class="line"><span class="code">    //get set 方法省略....</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="开发DAO接口以及Mapper"><a href="#开发DAO接口以及Mapper" class="headerlink" title="开发DAO接口以及Mapper"></a>开发DAO接口以及Mapper</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface ClazzDAO &#123;</span><br><span class="line"><span class="code">    List&lt;Clazz&gt; findAll();</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.baizhi.dao.ClazzDAO&quot;</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;select id=&quot;findAll&quot; resultType=&quot;Clazz&quot;&gt;</span></span><br><span class="line"><span class="code">        select * from t_clazz </span></span><br><span class="line"><span class="code">    &lt;/select&gt;</span></span><br><span class="line"><span class="code">&lt;/mapper&gt;</span></span><br></pre></td></tr></table></figure><h5 id="开发Service以及实现"><a href="#开发Service以及实现" class="headerlink" title="开发Service以及实现"></a>开发Service以及实现</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//接口</span><br><span class="line">public interface ClazzService &#123;</span><br><span class="line"><span class="code">    List&lt;Clazz&gt; findAll();</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">//实现</span></span><br><span class="line"><span class="code">@Service</span></span><br><span class="line"><span class="code">@Transactional</span></span><br><span class="line"><span class="code">public class ClazzServiceImpl implements  ClazzService &#123;</span></span><br><span class="line"><span class="code">    @Autowired</span></span><br><span class="line"><span class="code">    private ClazzDAO clazzDAO;</span></span><br><span class="line"><span class="code">   </span></span><br><span class="line"><span class="code">    @Transactional(propagation = Propagation.SUPPORTS)</span></span><br><span class="line"><span class="code">    @Override</span></span><br><span class="line"><span class="code">    public List&lt;Clazz&gt; findAll() &#123;</span></span><br><span class="line"><span class="code">        return clazzDAO.findAll();</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="开发Controller"><a href="#开发Controller" class="headerlink" title="开发Controller"></a>开发Controller</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class ClazzController &#123;</span><br><span class="line"><span class="code">    @Autowired</span></span><br><span class="line"><span class="code">    private ClazzService clazzService;</span></span><br><span class="line"><span class="code">  </span></span><br><span class="line"><span class="code">    //查询所有</span></span><br><span class="line"><span class="code">    @RequestMapping(&quot;findAll&quot;)</span></span><br><span class="line"><span class="code">    public List&lt;Clazz&gt; findAll()&#123;</span></span><br><span class="line"><span class="code">        return clazzService.findAll();</span></span><br><span class="line"><span class="code">    &#125;   </span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="启动项目访问测试"><a href="#启动项目访问测试" class="headerlink" title="启动项目访问测试"></a>启动项目访问测试</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8989/项目名/findAll</span><br></pre></td></tr></table></figure><h2 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h2><blockquote><p>往往在开发过程中业务代码课程非常复杂频繁启动服务器测试,非常麻烦!这个时候使用本地测试就是一个很好的解决方案,springboot也提供了本地测试解决方案!</p></blockquote><h5 id="引入测试依赖"><a href="#引入测试依赖" class="headerlink" title="引入测试依赖"></a>引入测试依赖</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">     &lt;scope&gt;test&lt;/scope&gt;</span></span><br><span class="line"><span class="code">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><h5 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h5><ul><li><strong><code>@SpringBootTest</code></strong> <ul><li>修饰范围: 用在类上</li><li>作用: 用来启动本地Spring环境</li></ul></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest</span><br><span class="line">public class TestEmpService &#123;</span><br><span class="line"></span><br><span class="line"><span class="code">    @Autowired</span></span><br><span class="line"><span class="code">    private EmpService empService;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    @Test</span></span><br><span class="line"><span class="code">    public void test()&#123;</span></span><br><span class="line"><span class="code">        empService.findAll().forEach(emp-&gt; System.out.println(emp));</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="热部署工具"><a href="#热部署工具" class="headerlink" title="热部署工具"></a>热部署工具</h2><p><strong><code>为了进一步提高开发效率,springboot为我们提供了全局项目热部署,日后在开发过程中修改了部分代码以及相关配置文件后,不需要每次重启使修改生效,在项目中开启了springboot全局热部署之后只需要在修改之后等待几秒即可使修改生效。</code></strong></p><h5 id="开启热部署"><a href="#开启热部署" class="headerlink" title="开启热部署"></a>开启热部署</h5><h6 id="项目中引入依赖-每次搭建项目都需要引入"><a href="#项目中引入依赖-每次搭建项目都需要引入" class="headerlink" title="项目中引入依赖 (每次搭建项目都需要引入)"></a>项目中引入依赖 (每次搭建项目都需要引入)</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span></span>org.springframework.boot<span class="xml"><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span></span>spring-boot-devtools<span class="xml"><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">optional</span>&gt;</span></span>true<span class="xml"><span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h6 id="设置idea中支持自动编译-只需要设置一次"><a href="#设置idea中支持自动编译-只需要设置一次" class="headerlink" title="设置idea中支持自动编译(只需要设置一次)"></a>设置idea中支持自动编译(只需要设置一次)</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.开启自动编译</span></span><br><span class="line"></span><br><span class="line"><span class="code">Preferences | Build, Execution, Deployment | Compiler -&gt; 勾选上 Build project automatically 这个选项</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># 2.开启允许在运行过程中修改文件</span></span><br><span class="line"><span class="code">ctrl + alt + shift + / ----&gt;选择1.Registry ---&gt; 勾选 compiler.automake.allow.when.app.running 这个选项</span></span><br></pre></td></tr></table></figure><h6 id="启动项目检测热部署是否生效"><a href="#启动项目检测热部署是否生效" class="headerlink" title="启动项目检测热部署是否生效"></a>启动项目检测热部署是否生效</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.启动出现如下日志代表生效</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2019-07-17 21:23:17.566  INFO 4496 --- [  restartedMain] com.baizhi.InitApplication               : Starting InitApplication on chenyannandeMacBook-Pro.local with PID 4496 (/Users/chenyannan/IdeaProjects/ideacode/springboot<span class="emphasis">_day1/target/classes started by chenyannan in /Users/chenyannan/IdeaProjects/ideacode/springboot_</span>day1)</span><br><span class="line">2019-07-17 21:23:17.567  INFO 4496 --- [  restartedMain] com.baizhi.InitApplication               : The following profiles are active: dev</span><br><span class="line">2019-07-17 21:23:17.612  INFO 4496 --- [  restartedMain] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@66d799c5: startup date [Wed Jul 17 21:23:17 CST 2019]; root of context hierarchy</span><br><span class="line">2019-07-17 21:23:18.782  INFO 4496 --- [  restartedMain] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat initialized with port(s): 8989 (http)</span><br><span class="line">2019-07-17 21:23:18.796  INFO 4496 --- [  restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</span><br><span class="line">2019-07-17 21:23:18.797  INFO 4496 --- [  restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/8.5.20</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong><code>注意:日志出现restartedMain代表已经生效,在使用热部署时如果遇到修改之后不能生效,请重试重启项目在试</code></strong></p><hr><h2 id="日志处理"><a href="#日志处理" class="headerlink" title="日志处理"></a>日志处理</h2><h5 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h5><p>​    springboot框架 集成日志  logback 日志  </p><p>​    Logback是由<a href="https://baike.baidu.com/item/log4j/480673">log4j</a>创始人设计的又一个开源日志组件。目前，logback分为三个模块：logback-core，logback-classic和logback-access。是对log4j日志展示进一步改进!</p><p>​    总结: logback 也是一个开源日志组件  和  log4j作用一致 都是用来生成日志 logback更加轻量</p><h5 id="日志的级别"><a href="#日志的级别" class="headerlink" title="日志的级别"></a>日志的级别</h5><p>![image-20210610110653288](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20210610110653288.png)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; All &lt; Trace &lt; `DEBUG &lt; INFO &lt; WARN &lt; ERROR` &lt; Fatal &lt; OFF</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> OFF   | 关闭：最高级别，不打印日志。 </span><br><span class="line"><span class="bullet">-</span> FATAL | 致命：指明非常严重的可能会导致应用终止执行错误事件。</span><br><span class="line"><span class="bullet">-</span> ERROR | 错误：指明错误事件，但应用可能还能继续运行。 </span><br><span class="line"><span class="bullet">-</span> WARN | 警告：指明可能潜在的危险状况。 </span><br><span class="line"><span class="bullet">-</span> INFO | 信息：指明描述信息，从粗粒度上描述了应用运行过程。 </span><br><span class="line"><span class="bullet">-</span> DEBUG | 调试：指明细致的事件信息，对调试应用最有用。</span><br><span class="line"><span class="bullet">-</span> TRACE | 跟踪：指明程序运行轨迹，比DEBUG级别的粒度更细。 </span><br><span class="line"><span class="bullet">-</span> ALL | 所有：所有日志级别，包括定制级别。</span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 日志级别由低到高:  `日志级别越高输出的日志信息越多`</span></span><br></pre></td></tr></table></figure><h5 id="项目中日志分类"><a href="#项目中日志分类" class="headerlink" title="项目中日志分类"></a>项目中日志分类</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 日志分类:</span></span><br><span class="line"><span class="bullet">-</span> 一种是rootLogger(根全局日志) :     用来监听项目中所有的运行日志 包括引入依赖jar中的日志 </span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 一种是logger(指定包级别日志) :         用来监听项目中指定包中的日志信息</span><br></pre></td></tr></table></figure><h5 id="配置日志"><a href="#配置日志" class="headerlink" title="配置日志"></a>配置日志</h5><p><strong><code>注意:SpringBoot框架中默认根日志为INFO</code></strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line"><span class="code">    root: debug #指定根日志级别(一般不推荐修改根日志,输出信息太多,推荐使用子日志)</span></span><br><span class="line"><span class="code">    com.baizhi.dao: debug #指定某个包中日志</span></span><br><span class="line"><span class="code">  file:</span></span><br><span class="line"><span class="code">    name: aaa.log #指定日志名称</span></span><br><span class="line"><span class="code">    path: ./  #指定日志文件目录</span></span><br></pre></td></tr></table></figure><h5 id="项目中使用日志"><a href="#项目中使用日志" class="headerlink" title="项目中使用日志"></a>项目中使用日志</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"><span class="code">    //声明日志成员</span></span><br><span class="line"><span class="code">    private static final Logger log = LoggerFactory.getLogger(HelloController.class);</span></span><br><span class="line"><span class="code">    @RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="code">    @ResponseBody</span></span><br><span class="line"><span class="code">    public String hello()&#123;</span></span><br><span class="line"><span class="code">        System.out.println(&quot;======hello world=======&quot;);</span></span><br><span class="line"><span class="code">        logger.debug(&quot;DEBUG,&#123;&#125;&quot;,&quot;信息&quot;);</span></span><br><span class="line"><span class="code">        logger.info(&quot;INFO,&#123;&#125;&quot;,&quot;信息&quot;);</span></span><br><span class="line"><span class="code">        logger.warn(&quot;WARN,&#123;&#125;&quot;,&quot;信息&quot;);</span></span><br><span class="line"><span class="code">        logger.error(&quot;ERROR,&#123;&#125;&quot;,&quot;信息&quot;);</span></span><br><span class="line"><span class="code">        return &quot;hello&quot;;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="切面编程"><a href="#切面编程" class="headerlink" title="切面编程"></a>切面编程</h2><h5 id="引言-1"><a href="#引言-1" class="headerlink" title="引言"></a>引言</h5><blockquote><p>springboot是对原有项目中spring框架和springmvc的进一步封装,因此在springboot中同样支持spring框架中AOP切面编程,不过在springboot中为了快速开发仅仅提供了注解方式的切面编程.</p></blockquote><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><h6 id="引入依赖-2"><a href="#引入依赖-2" class="headerlink" title="引入依赖"></a>引入依赖</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">    &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><h6 id="相关注解"><a href="#相关注解" class="headerlink" title="相关注解"></a>相关注解</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 切面注解</span></span><br><span class="line"><span class="bullet">-</span> @Aspect 用来类上,代表这个类是一个切面</span><br><span class="line"><span class="bullet">-</span> @Before 用在方法上代表这个方法是一个前置通知方法 </span><br><span class="line"><span class="bullet">-</span> @After 用在方法上代表这个方法是一个后置通知方法 @Around 用在方法上代表这个方法是一个环绕的方法</span><br><span class="line"><span class="bullet">-</span> @Around 用在方法上代表这个方法是一个环绕的方法</span><br></pre></td></tr></table></figure><h6 id="前置切面"><a href="#前置切面" class="headerlink" title="前置切面"></a>前置切面</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Aspect</span><br><span class="line">@Configuration</span><br><span class="line">public class MyAspect &#123;</span><br><span class="line"><span class="code">    @Before(&quot;execution(* com.baizhi.service.*.*(..))&quot;)</span></span><br><span class="line"><span class="code">    public void before(JoinPoint joinPoint)&#123;</span></span><br><span class="line"><span class="code">        System.out.println(&quot;前置通知&quot;);</span></span><br><span class="line"><span class="code">        joinPoint.getTarget();//目标对象</span></span><br><span class="line"><span class="code">        joinPoint.getSignature();//方法签名</span></span><br><span class="line"><span class="code">        joinPoint.getArgs();//方法参数</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><h6 id="后置切面"><a href="#后置切面" class="headerlink" title="后置切面"></a>后置切面</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Aspect</span><br><span class="line">@Configuration</span><br><span class="line">public class MyAspect &#123;</span><br><span class="line"><span class="code">    @After(&quot;execution(* com.baizhi.service.*.*(..))&quot;)</span></span><br><span class="line"><span class="code">    public void before(JoinPoint joinPoint)&#123;</span></span><br><span class="line"><span class="code">        System.out.println(&quot;后置通知&quot;);</span></span><br><span class="line"><span class="code">        joinPoint.getTarget();//目标对象</span></span><br><span class="line"><span class="code">        joinPoint.getSignature();//方法签名</span></span><br><span class="line"><span class="code">        joinPoint.getArgs();//方法参数</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><p><strong><code>注意: 前置通知和后置通知都没有返回值,方法参数都为joinpoint</code></strong></p><h6 id="环绕切面"><a href="#环绕切面" class="headerlink" title="环绕切面"></a>环绕切面</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Aspect</span><br><span class="line">@Configuration</span><br><span class="line">public class MyAspect &#123;</span><br><span class="line"><span class="code">    @Around(&quot;execution(* com.baizhi.service.*.*(..))&quot;)</span></span><br><span class="line"><span class="code">    public Object before(ProceedingJoinPoint proceedingJoinPoint) throws Throwable &#123;</span></span><br><span class="line"><span class="code">        System.out.println(&quot;进入环绕通知&quot;);</span></span><br><span class="line"><span class="code">        proceedingJoinPoint.getTarget();//目标对象</span></span><br><span class="line"><span class="code">        proceedingJoinPoint.getSignature();//方法签名</span></span><br><span class="line"><span class="code">        proceedingJoinPoint.getArgs();//方法参数</span></span><br><span class="line"><span class="code">        Object proceed = proceedingJoinPoint.proceed();//放行执行目标方法</span></span><br><span class="line"><span class="code">        System.out.println(&quot;目标方法执行之后回到环绕通知&quot;);</span></span><br><span class="line"><span class="code">        return proceed;//返回目标方法返回值</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong><code>注意: 环绕通知存在返回值,参数为ProceedingJoinPoint,如果执行放行,不会执行目标方法,一旦放行必须将目标方法的返回值返回,否则调用者无法接受返回数据</code></strong></p></blockquote><h2 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="文件上传下载"></a>文件上传下载</h2><h5 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h5><p><code>用户访问当前系统,将自己本地计算机中文件通过浏览器上传到当前系统所在的服务器过程中称之为文件的上传</code></p><p>文件上传: 用户将自己计算机中文件 上传到 项目所在服务器过程、文件服务器、OSS 称之为文件上传</p><h6 id="准备上传页面"><a href="#准备上传页面" class="headerlink" title="准备上传页面"></a>准备上传页面</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;路径....&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span></span><br><span class="line"><span class="code">        &lt;input type=&quot;file&quot; name=&quot;aa&quot;&gt;</span></span><br><span class="line"><span class="code">        &lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;</span></span><br><span class="line"><span class="code">&lt;/form&gt;</span></span><br><span class="line"><span class="code">&lt;!--</span></span><br><span class="line"><span class="code">1. 表单提交方式必须是post</span></span><br><span class="line"><span class="code">2. 表单的enctype属性必须为multipart/form-data</span></span><br><span class="line"><span class="code">3. 后台接受变量名字要与文件选择name属性一致</span></span><br><span class="line"><span class="code">--&gt;</span></span><br></pre></td></tr></table></figure><h6 id="编写控制器"><a href="#编写控制器" class="headerlink" title="编写控制器"></a>编写控制器</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/file&quot;)</span><br><span class="line">public class FileController &#123;</span><br><span class="line">  @RequestMapping(&quot;/upload&quot;)</span><br><span class="line">  public String upload(MultipartFile aa, HttpServletRequest request) throws IOException &#123;</span><br><span class="line"><span class="code">        String realPath = request.getRealPath(&quot;/upload&quot;);</span></span><br><span class="line"><span class="code">        aa.transferTo(new File(realPath,aa.getOriginalFilename()));//文件上传</span></span><br><span class="line"><span class="code">        return &quot;index&quot;;</span></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><h6 id="修改文件上传大小"><a href="#修改文件上传大小" class="headerlink" title="修改文件上传大小"></a>修改文件上传大小</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#上传时出现如下异常:  上传文件的大小超出默认配置  默认10M</span></span><br><span class="line">nested exception is java.lang.IllegalStateException: org.apache.tomcat.util.http.fileupload.FileUploadBase$SizeLimitExceededException: the request was rejected because its size (38443713) exceeds the configured maximum (10485760)</span><br><span class="line"><span class="section">#修改上传文件大小:</span></span><br><span class="line">spring:</span><br><span class="line">  http:</span><br><span class="line"><span class="code">    multipart:</span></span><br><span class="line"><span class="code">       max-request-size: 209715200  #用来控制文件上传大小的限制</span></span><br><span class="line"><span class="code">       max-file-size: 209715200 #用来指定服务端最大文件大小   </span></span><br><span class="line"><span class="code"></span></span><br><span class="line">spring.servlet.multipart.max-file-size=500MB</span><br><span class="line">spring.servlet.multipart.max-request-size=500MB</span><br></pre></td></tr></table></figure><h5 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h5><p><code>文件下载:  将服务器某个资源文件下载到用户本地计算机过程称之为文件下载</code></p><h6 id="提供下载文件链接"><a href="#提供下载文件链接" class="headerlink" title="提供下载文件链接"></a>提供下载文件链接</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;../file/download?fileName=corejava.txt&quot;</span>&gt;</span></span>corejava.txt<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h6 id="开发控制器"><a href="#开发控制器" class="headerlink" title="开发控制器"></a>开发控制器</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/download&quot;)</span><br><span class="line">public void download(String fileName, HttpServletRequest request, HttpServletResponse response) throws Exception &#123;</span><br><span class="line"><span class="code">        String realPath = request.getRealPath(&quot;/upload&quot;);</span></span><br><span class="line"><span class="code">        FileInputStream is = new FileInputStream(new File(realPath, fileName));</span></span><br><span class="line"><span class="code">        ServletOutputStream os = response.getOutputStream();</span></span><br><span class="line"><span class="code">        response.setHeader(&quot;content-disposition&quot;,&quot;attachment;fileName=&quot;+ URLEncoder.encode(fileName,&quot;UTF-8&quot;));</span></span><br><span class="line"><span class="code">        IOUtils.copy(is,os);</span></span><br><span class="line"><span class="code">        IOUtils.closeQuietly(is);</span></span><br><span class="line"><span class="code">        IOUtils.closeQuietly(os);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><h5 id="开发拦截器"><a href="#开发拦截器" class="headerlink" title="开发拦截器"></a>开发拦截器</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class MyInterceptor implements HandlerInterceptor &#123;</span><br><span class="line"><span class="code">    @Override</span></span><br><span class="line"><span class="code">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object o) throws Exception &#123;</span></span><br><span class="line"><span class="code">        System.out.println(&quot;======1=====&quot;);</span></span><br><span class="line"><span class="code">        return true;//返回true 放行  返回false阻止</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    @Override</span></span><br><span class="line"><span class="code">    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object o, ModelAndView modelAndView) throws Exception &#123;</span></span><br><span class="line"><span class="code">        System.out.println(&quot;=====2=====&quot;);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    @Override</span></span><br><span class="line"><span class="code">    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object o, Exception e) throws Exception &#123;</span></span><br><span class="line"><span class="code">        System.out.println(&quot;=====3=====&quot;);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class WebMvcConfig  implements WebMvcConfigurer &#123;</span><br><span class="line"><span class="code">    @Override</span></span><br><span class="line"><span class="code">    public void addInterceptors(InterceptorRegistry registry) &#123;</span></span><br><span class="line"><span class="code">      registry.addInterceptor(&quot;拦截器&quot;)</span></span><br><span class="line"><span class="code">                .addPathPatterns(&quot;拦截路径&quot;)</span></span><br><span class="line"><span class="code">                .excludePathPatterns(&quot;排除路径&quot;)</span></span><br><span class="line"><span class="code">          .order(&quot;指定执行顺序&quot;)</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><p><strong><code>注意:order用来执行多个拦截器的执行顺序,order书写是自然数,按照自然数顺序执行</code></strong></p><hr><h2 id="war包部署"><a href="#war包部署" class="headerlink" title="war包部署"></a>war包部署</h2><h5 id="设置打包方式为war"><a href="#设置打包方式为war" class="headerlink" title="设置打包方式为war"></a>设置打包方式为war</h5><blockquote><p>​    <strong><packaging>war</packaging></strong></p></blockquote><h5 id="在插件中指定入口类"><a href="#在插件中指定入口类" class="headerlink" title="在插件中指定入口类"></a>在插件中指定入口类</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span></span><br><span class="line"><span class="code">&lt;plugins&gt;</span></span><br><span class="line"><span class="code">      &lt;plugin&gt;</span></span><br><span class="line"><span class="code">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">        &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">        &lt;!--使用热部署出现中文乱码解决方案--&gt;</span></span><br><span class="line"><span class="code">        &lt;configuration&gt;</span></span><br><span class="line"><span class="code">          &lt;fork&gt;true&lt;/fork&gt;</span></span><br><span class="line"><span class="code">          &lt;!--增加jvm参数--&gt;</span></span><br><span class="line"><span class="code">          &lt;jvmArguments&gt;-Dfile.encoding=UTF-8&lt;/jvmArguments&gt;</span></span><br><span class="line"><span class="code">          &lt;!--指定入口类--&gt;</span></span><br><span class="line"><span class="code">          &lt;mainClass&gt;com.baizhi.Application&lt;/mainClass&gt;</span></span><br><span class="line"><span class="code">        &lt;/configuration&gt;</span></span><br><span class="line"><span class="code">      &lt;/plugin&gt;</span></span><br><span class="line"><span class="code">    &lt;/plugins&gt;</span></span><br><span class="line"><span class="code">&lt;/build&gt;  </span></span><br></pre></td></tr></table></figure><h5 id="排除内嵌的tomcat"><a href="#排除内嵌的tomcat" class="headerlink" title="排除内嵌的tomcat"></a>排除内嵌的tomcat</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span></span>org.springframework.boot<span class="xml"><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span></span>spring-boot-starter-tomcat<span class="xml"><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">scope</span>&gt;</span></span>provided<span class="xml"><span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span>   &lt;!--去掉内嵌tomcat--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span></span>org.apache.tomcat.embed<span class="xml"><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span></span>tomcat-embed-jasper<span class="xml"><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">scope</span>&gt;</span></span>provided<span class="xml"><span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span>  &lt;!--去掉使用内嵌tomcat解析jsp--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="配置入口类"><a href="#配置入口类" class="headerlink" title="配置入口类"></a>配置入口类</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//1.继承SpringBootServletInitializer</span><br><span class="line">//2.覆盖configure方法</span><br><span class="line">public class Application extends SpringBootServletInitializer&#123;</span><br><span class="line"><span class="code">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="code">        SpringApplication.run(Application.class,args);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">    @Override</span></span><br><span class="line"><span class="code">    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) &#123;</span></span><br><span class="line"><span class="code">        return builder.sources(Application.class);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="打包测试"><a href="#打包测试" class="headerlink" title="打包测试"></a>打包测试</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一旦使用war包部署注意:</span></span><br><span class="line"><span class="bullet">-</span>1. application.yml 中配置port context-path 失效</span><br><span class="line"><span class="bullet">-</span>2. 访问时使用打成war包的名字和外部tomcat端口号进行访问项目</span><br></pre></td></tr></table></figure><h2 id="Jar包部署"><a href="#Jar包部署" class="headerlink" title="Jar包部署"></a>Jar包部署</h2><h5 id="设置打包方式为jar"><a href="#设置打包方式为jar" class="headerlink" title="设置打包方式为jar"></a>设置打包方式为jar</h5><blockquote><p>​    <strong><packaging>jar</packaging></strong></p></blockquote><p><strong><code>注意:默认方式也是jar</code></strong></p><h5 id="执行打包"><a href="#执行打包" class="headerlink" title="执行打包"></a>执行打包</h5><p>![image-20210616113809792](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20210616113809792.png)</p><h5 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h5><p>![image-20210616113831756](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20210616113831756.png)</p><ul><li><strong><code>注意:springboot部署jsp时,插件版本必须指定为1.4.2版本,并进行jsp打包配置才可以,其他版本均不支持!!!</code></strong></li></ul><h5 id="修改插件版本"><a href="#修改插件版本" class="headerlink" title="修改插件版本"></a>修改插件版本</h5><blockquote><p>在项目的pom.xml配置文件中build标签中修改</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span></span><br><span class="line">  &lt;!--版本必须为1.4.2版本--&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">    &lt;version&gt;1.4.2.RELEASE&lt;/version&gt;</span></span><br><span class="line"><span class="code">  &lt;/plugin&gt;</span></span><br><span class="line"><span class="code">&lt;/plugins&gt;</span></span><br></pre></td></tr></table></figure><h5 id="指定jsp打包配置"><a href="#指定jsp打包配置" class="headerlink" title="指定jsp打包配置"></a>指定jsp打包配置</h5><blockquote><p>在项目的pom.xml配置文件中build标签中加入配置</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span></span><br><span class="line">  &lt;!-- 打包时将jsp文件拷贝到META-INF目录下--&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;!-- 指定resources插件处理哪个目录下的资源文件 --&gt;</span></span><br><span class="line"><span class="code">    &lt;directory&gt;src/main/webapp&lt;/directory&gt;</span></span><br><span class="line"><span class="code">    &lt;!--指定必须要放在此目录下才能被访问到--&gt;</span></span><br><span class="line"><span class="code">    &lt;targetPath&gt;META-INF/resources&lt;/targetPath&gt;</span></span><br><span class="line"><span class="code">    &lt;includes&gt;</span></span><br><span class="line"><span class="code">      &lt;include&gt;**/**&lt;/include&gt;</span></span><br><span class="line"><span class="code">    &lt;/includes&gt;</span></span><br><span class="line"><span class="code">  &lt;/resource&gt;</span></span><br><span class="line"><span class="code">  &lt;resource&gt;</span></span><br><span class="line"><span class="code">    &lt;directory&gt;src/main/resources&lt;/directory&gt;</span></span><br><span class="line"><span class="code">    &lt;includes&gt;</span></span><br><span class="line"><span class="code">      &lt;include&gt;**/**&lt;/include&gt;</span></span><br><span class="line"><span class="code">    &lt;/includes&gt;</span></span><br><span class="line"><span class="code">    &lt;filtering&gt;false&lt;/filtering&gt;</span></span><br><span class="line"><span class="code">  &lt;/resource&gt;</span></span><br><span class="line"><span class="code">&lt;/resources&gt;</span></span><br></pre></td></tr></table></figure><h5 id="重新打包测试即可"><a href="#重新打包测试即可" class="headerlink" title="重新打包测试即可"></a>重新打包测试即可</h5><hr><h2 id="Thymeleaf"><a href="#Thymeleaf" class="headerlink" title="Thymeleaf"></a>Thymeleaf</h2><blockquote><p>Thymeleaf是一个用于web和独立环境的现代服务器端Java模板引擎。</p><p>–摘自官网<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a></p></blockquote><p><code>Thymeleaf</code>是跟Velocity、FreeMarker类似的模板引擎，它可以完全替代JSP，相较与其他的模板引擎相比, Thymeleaf在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。</p><h5 id="集成Thymeleaf模板"><a href="#集成Thymeleaf模板" class="headerlink" title="集成Thymeleaf模板"></a>集成Thymeleaf模板</h5><h6 id="引入依赖-3"><a href="#引入依赖-3" class="headerlink" title="引入依赖"></a>引入依赖</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--使用thymelaf--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span></span>org.springframework.boot<span class="xml"><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span></span>spring-boot-starter-thymeleaf<span class="xml"><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h6 id="编写配置"><a href="#编写配置" class="headerlink" title="编写配置"></a>编写配置</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  thymeleaf:</span><br><span class="line"><span class="code">    cache: false  # 关闭缓存</span></span><br><span class="line"><span class="code">    prefix: classpath:/templates/ #指定模板位置</span></span><br><span class="line"><span class="code">    suffix: .html #指定后缀</span></span><br></pre></td></tr></table></figure><h6 id="编写控制器测试"><a href="#编写控制器测试" class="headerlink" title="编写控制器测试"></a>编写控制器测试</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Controller    //一定要是@Controller 不能再使用@RestController注解</span><br><span class="line">@RequestMapping(&quot;hello&quot;)</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"><span class="code">    @GetMapping(&quot;hello&quot;)</span></span><br><span class="line"><span class="code">    public String hello()&#123;</span></span><br><span class="line"><span class="code">        System.out.println(&quot;测试与 thymeleaf 的集成&quot;);</span></span><br><span class="line"><span class="code">        return &quot;index&quot;;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><h6 id="在templates目录中定义模板"><a href="#在templates目录中定义模板" class="headerlink" title="在templates目录中定义模板"></a>在templates目录中定义模板</h6><p>![image-20200323085834206](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20200323085834206-3815430.png)</p><h6 id="测试访问-1"><a href="#测试访问-1" class="headerlink" title="测试访问"></a>测试访问</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8989/springboot_day3/hello/hello</span><br></pre></td></tr></table></figure><h6 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h6><p>![image-20200323085948499](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20200323085948499-3815430.png)</p><hr><h5 id="模板基本语法"><a href="#模板基本语法" class="headerlink" title="模板基本语法"></a>模板基本语法</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用时必须在页面中加入thymeleaf如下命名空间:</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="展示单个数据"><a href="#展示单个数据" class="headerlink" title="展示单个数据"></a>展示单个数据</h5><h6 id="设置数据"><a href="#设置数据" class="headerlink" title="设置数据"></a>设置数据</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.addAttribute(&quot;name&quot;,&quot;张三&quot;); 或 request.setAttribute(&quot;name&quot;,&quot;小黑&quot;);</span><br></pre></td></tr></table></figure><h6 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;name&#125;&quot;</span>/&gt;</span></span>  ---&gt;获取数据</span><br></pre></td></tr></table></figure><p>![image-20200323100747881](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20200323100747881-3835265.png)</p><h6 id="解析含有html标签数据"><a href="#解析含有html标签数据" class="headerlink" title="解析含有html标签数据"></a>解析含有html标签数据</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model.addAttribute(&quot;name&quot;,&quot;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;&#x27;</span>&gt;</span></span>张三<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&quot;);</span><br><span class="line">model.addAttribute(&quot;username&quot;,&quot;小陈&quot;);</span><br></pre></td></tr></table></figure><ul><li>直接获取原样输出</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;name&#125;&quot;</span>/&gt;</span></span></span><br></pre></td></tr></table></figure><p>![image-20200323100956740](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20200323100956740-3835265.png)</p><ul><li>获取并解析</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:utext</span>=<span class="string">&quot;$&#123;name&#125;&quot;</span>/&gt;</span></span></span><br></pre></td></tr></table></figure><p>![image-20200323101457134](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20200323101457134-3835265.png)</p><ul><li><p>将数据赋值给表单元素</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span></span><br></pre></td></tr></table></figure><p>![image-20200323103452620](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20200323103452620-3835265.png)</p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 总结</span></span><br><span class="line"><span class="bullet">-</span>  1.使用 th:text=&quot;$&#123;属性名&#125;&quot;  获取对应数据,获取数据时会将对应标签中数据清空,因此最好是空标签</span><br><span class="line"><span class="bullet">-</span>  2.使用 th:utext=&quot;$&#123;属性名&#125;&quot; 获取对应的数据,可以将数据中html先解析在渲染到页面</span><br><span class="line"><span class="bullet">-</span>  3.使用 th:value=&quot;$&#123;属性名&#125;&quot; 获取数据直接作为表单元素value属性</span><br></pre></td></tr></table></figure><h5 id="展示对象数据"><a href="#展示对象数据" class="headerlink" title="展示对象数据"></a>展示对象数据</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">model.addAttribute(&quot;user&quot;,new User(&quot;21&quot;,&quot;xiaochen&quot;,23,new Date()));</span><br><span class="line">id:<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">name:<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">age:<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.age&#125;&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">bir: <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.bir&#125;&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>  ====  <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.format(user.bir, &#x27;yyyy-MM-dd HH:mm&#x27;)&#125;&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span> 日期格式化</span><br></pre></td></tr></table></figure><h5 id="条件展示数据"><a href="#条件展示数据" class="headerlink" title="条件展示数据"></a>条件展示数据</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">model.addAttribute(&quot;user&quot;,new User(&quot;21&quot;,&quot;xiaochen&quot;,23,new Date()));</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;user.age&#125; eq 23&quot;</span>&gt;</span></span></span><br><span class="line">  青年</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;user.age == 23&#125;&quot;</span>&gt;</span></span></span><br><span class="line">  青年</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="section"># 运算符</span></span><br><span class="line"><span class="code">    gt：great than（大于）&gt;</span></span><br><span class="line"><span class="code">    ge：great equal（大于等于）&gt;=</span></span><br><span class="line"><span class="code">    eq：equal（等于）==</span></span><br><span class="line"><span class="code">    lt：less than（小于）&lt;</span></span><br><span class="line"><span class="code">    le：less equal（小于等于）&lt;=</span></span><br><span class="line"><span class="code">    ne：not equal（不等于）!=</span></span><br></pre></td></tr></table></figure><h5 id="展示多条数据"><a href="#展示多条数据" class="headerlink" title="展示多条数据"></a>展示多条数据</h5><ul><li>直接遍历集合</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">th:each</span>=<span class="string">&quot;user:$&#123;users&#125;&quot;</span>&gt;</span></span></span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.age&#125;&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.format(user.bir,&#x27;yyyy-MM-dd&#x27;)&#125;&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>遍历时获取遍历状态</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">th:each</span>=<span class="string">&quot;user,userStat:$&#123;users&#125;&quot;</span>&gt;</span></span></span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;userStat.count&#125;&quot;</span>/&gt;</span></span>-<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>/&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>   获取遍历次数  count 从1开始 index 从0开始</span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;userStat.odd&#125;&quot;</span>/&gt;</span></span>-<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.name&#125;&quot;</span>/&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>   获取当前遍历是否是奇数行</span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;userStat.even&#125;&quot;</span>/&gt;</span></span>-<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.age&#125;&quot;</span>/&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>   获取当前遍历是否是偶数行</span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;userStat.size&#125;&quot;</span>/&gt;</span></span>-<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.bir&#125;&quot;</span>/&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>   获取当前集合的总条数</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="引入静态资源"><a href="#引入静态资源" class="headerlink" title="引入静态资源"></a>引入静态资源</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 使用thymeleaf模板项目中静态资源默认放在resources路径小static目录中</span></span><br></pre></td></tr></table></figure><ul><li><p>项目中放入对应静态资源</p><p>![image-20200323142307411](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20200323142307411-3835265.png)</p></li><li><p>页面中引入</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/css/index.css&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/jquery-min.js&#125;&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>注意: @{/}代表通过thymeleaf语法动态获取应用名</strong></p></li></ul><h5 id="在js代码中获取项目名"><a href="#在js代码中获取项目名" class="headerlink" title="在js代码中获取项目名"></a>在js代码中获取项目名</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line">  const ctx = &#x27;[[@&#123;/&#125;]]&#x27;;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>注意:[[书写thymeleaf语法]],这里[[]]是thymeleaf内嵌表达式</strong></p><hr><h2 id="RestFul"><a href="#RestFul" class="headerlink" title="RestFul"></a>RestFul</h2><h5 id="引言-2"><a href="#引言-2" class="headerlink" title="引言"></a>引言</h5><p>![image-20210622104137206](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20210622104137206.png)</p><p>REST全称是<code>Representational State Transfer</code>，中文意思是表述（编者注：通常译为表征）性状态转移。 它首次出现在2000年Roy Fielding的博士论文中，Roy Fielding是HTTP规范的主要编写者之一。 他在论文中提到：”我这篇文章的写作目的，就是想在符合架构原理的前提下，理解和评估以网络为基础的应用软件的架构设计，得到一个功能强、性能好、适宜通信的架构。REST指的是一组架构约束条件和原则。” 如果一个架构符合REST的约束条件和原则，我们就称它为RESTful架构。</p><p>RestFul: 是一种以网络为基础构架一种架构风格  一个架构符合Rest设计原则和约束成这个架构为RestFul。</p><p>Rest 词： 更新技术  组件 服务  让我们web请求能够利用web中标准 和 能力 更好描述架构</p><p>REST本身并没有创造新的技术、组件或服务，而隐藏在RESTful背后的理念就是使用Web的现有特征和能力， 更好地使用现有Web标准中的一些准则和约束。虽然REST本身受Web技术的影响很深， 但是理论上REST架构风格并不是绑定在HTTP上，只不过目前HTTP是唯一与REST相关的实例。 所以我们这里描述的REST也是通过HTTP实现的REST。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><blockquote><p> Restful 一种软件架构风格、设计风格，而<strong>不是</strong>标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p></blockquote><p>web开发: 实现所有功能</p><p>restful: 软件设计风格 标准  简洁   层次  优雅</p><p>rest设计原则 和 约束架构称之为restFul</p><h5 id="URL定义"><a href="#URL定义" class="headerlink" title="URL定义"></a>URL定义</h5><ul><li>资源：互联网所有的事物都可以被抽象为资源 <ul><li>一首歌  一张图片 数据库一条记录  </li></ul></li><li>资源操作：使用POST(添加)、DELETE(删除)、PUT(修改)、GET(查询)，使用不同请求方法对资源进行操作。 <ul><li>删除 delete</li><li>查询 get</li><li>添加 post</li><li>修改 put (修改全部字段)| patch(更新部分字段)</li></ul></li></ul><h6 id="传统方式操作资源"><a href="#传统方式操作资源" class="headerlink" title="传统方式操作资源"></a>传统方式操作资源</h6><ul><li><p><a href="http://127.0.0.1/item/queryUser.action?id=1">http://127.0.0.1/item/queryUser.action?id=1</a>   查询,GET </p></li><li><p><a href="http://127.0.0.1/item/saveUser.action">http://127.0.0.1/item/saveUser.action</a>             新增,POST </p></li><li><p><a href="http://127.0.0.1/item/updateUser.action">http://127.0.0.1/item/updateUser.action</a>          更新,PUT</p></li><li><p><a href="http://127.0.0.1/item/deleteUser.action?id=1">http://127.0.0.1/item/deleteUser.action?id=1</a>  删除,DELETE</p><p>**注意:**传统的操作是没有问题的,大神认为是有问题的,有什么问题呢?你每次请求的接口或者地址,都在做描述,例如查询的时候用了queryUser,新增的时候用了saveUser ，修改的时候用了updateUser,其实完全没有这个必要,我使用了get请求,就是查询.使用post请求,就是新增的请求,PUT就是修改，delete就是删除，我的意图很明显,完全没有必要做描述,这就是为什么有了restful.</p></li></ul><h6 id="使用RESTful操作资源"><a href="#使用RESTful操作资源" class="headerlink" title="使用RESTful操作资源"></a>使用RESTful操作资源</h6><ul><li><p>【GET】 /users # 查询用户信息列表</p></li><li><p>【GET】 /users/1001 # 查看某个用户信息</p></li></ul><ul><li>【POST】 /users # 新建用户信息</li></ul><ul><li>【PUT】 /users/1001 # 更新用户信息(全部字段)</li></ul><ul><li>【PATCH】 /users/1001 # 更新用户信息(部分字段)</li></ul><ul><li>【DELETE】 /users/1001 # 删除用户信息</li></ul><h5 id="Rest-API设计风格原则"><a href="#Rest-API设计风格原则" class="headerlink" title="Rest API设计风格原则"></a>Rest API设计风格原则</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.使用名词而不是动词</span></span><br><span class="line"><span class="bullet">-</span> 不要使用：</span><br><span class="line"><span class="code">如:</span></span><br><span class="line"><span class="code">    /getAllUsers    get   /users  get /users/002</span></span><br><span class="line"><span class="code">    /createNewUser  post  /users</span></span><br><span class="line"><span class="code">    /deleteAllUser  delete /users/001</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># 2.Get方法和查询参数不应该涉及状态改变</span></span><br><span class="line"><span class="bullet">-</span> 使用PUT, POST 和DELETE 方法 而不是 GET 方法来改变状态，不要使用GET 进行状态改变</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section"># 3.使用复数名词</span></span><br><span class="line"><span class="bullet">-</span> 不要混淆名词单数和复数，为了保持简单，只对所有资源使用复数。</span><br><span class="line"><span class="code">如:</span></span><br><span class="line"><span class="code">    /cars 而不是 /car</span></span><br><span class="line"><span class="code">    /users 而不是 /user</span></span><br><span class="line"><span class="code">    /products 而不是 /product</span></span><br><span class="line"><span class="code">    /settings 而不是 /setting</span></span><br><span class="line"><span class="code">    /orders   而不是 /order</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 4. 使用子资源表达关系</span></span><br><span class="line"><span class="code">- 如果一个资源与另外一个资源有关系，使用子资源：</span></span><br><span class="line"><span class="code">如:</span></span><br><span class="line"><span class="code">    GET /cars/711/drivers/ 返回 car 711的所有司机</span></span><br><span class="line"><span class="code">    GET /cars/711/drivers/4 返回 car 711的4号司机</span></span><br><span class="line"><span class="code">    GET /users/11/pets      返回 user 11的所有宠物</span></span><br><span class="line"><span class="code">    GET /users/11/pets/2    返回 user 11的2号宠物</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># 5.使用Http头声明序列化格式</span></span><br><span class="line"><span class="bullet">-</span> 在客户端和服务端，双方都要知道通讯的格式，格式在HTTP-Header中指定</span><br><span class="line"><span class="code">如:</span></span><br><span class="line"><span class="code">Content-Type 定义请求格式</span></span><br><span class="line"><span class="code">Accept 定义系列可接受的响应格式</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># 6.为集合提供过滤 排序 选择和分页等功能</span></span><br><span class="line"><span class="bullet">-</span> Filtering过滤:使用唯一的查询参数进行</span><br><span class="line"><span class="code">GET /cars?color=red 返回红色的cars</span></span><br><span class="line"><span class="code">GET /cars?seats&lt;=2 返回小于两座位的cars集合</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">-</span> Sorting排序:允许针对多个字段排序</span><br><span class="line"><span class="code">GET /cars?sort=-manufactorer,+model</span></span><br><span class="line"><span class="code">这是返回根据生产者降序和模型升序排列的car集合</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">-</span> Field selection</span><br><span class="line"><span class="code">移动端能够显示其中一些字段，它们其实不需要一个资源的所有字段，给API消费者一个选择字段的能力，这会降低网络流量，提高API可用性。</span></span><br><span class="line"><span class="code">GET /cars?fields=manufacturer,model,id,color</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">- Paging分页</span></span><br><span class="line"><span class="code">使用 limit 和offset.实现分页，缺省limit=20 和offset=0；</span></span><br><span class="line"><span class="code">GET /cars?offset=10&amp;limit=5</span></span><br><span class="line"><span class="code">为了将总数发给客户端，使用订制的HTTP头： X-Total-Count.</span></span><br><span class="line"><span class="code">链接到下一页或上一页可以在HTTP头的link规定，遵循Link规定:</span></span><br><span class="line"><span class="code">Link: &lt;https://blog.mwaysolutions.com/sample/api/v1/cars?offset=15&amp;limit=5&gt;; rel=&quot;next&quot;,&lt;https://blog.mwaysolutions.com/sample/api/v1/cars?offset=50&amp;limit=3&gt;; rel=&quot;last&quot;,&lt;https://blog.mwaysolutions.com/sample/api/v1/cars?offset=0&amp;limit=5&gt;; rel=&quot;first&quot;,&lt;https://blog.mwaysolutions.com/sample/api/v1/cars?offset=5&amp;limit=5&gt;; rel=&quot;prev&quot;,</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># 7.版本化你的API  支付宝  v1  v2   v3</span></span><br><span class="line"><span class="bullet">-</span> 使得API版本变得强制性，不要发布无版本的API，使用简单数字，避免小数点如2.5.</span><br><span class="line"><span class="code">一般在Url后面使用?v</span></span><br><span class="line"><span class="code">/blog/api/v1</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># 8. 使用Http状态码处理错误</span></span><br><span class="line"><span class="bullet">-</span> 如果你的API没有错误处理是很难的，只是返回500和出错堆栈不一定有用</span><br><span class="line"><span class="bullet">-</span> Http状态码提供70个出错，我们只要使用10个左右：</span><br><span class="line"> `200 – OK – 一切正常</span><br><span class="line">  `201 – OK – 新的资源已经成功创建</span><br><span class="line">  `204 – OK – 资源已经成功删除</span><br><span class="line">  `304 – Not Modified – 客户端使用缓存数据</span><br><span class="line">  `400 – Bad Request – 请求无效，需要附加细节解释如 &quot;JSON无效&quot;</span><br><span class="line">  `401 – Unauthorized – 请求需要用户验证</span><br><span class="line">  `403 – Forbidden – 服务器已经理解了请求，但是拒绝服务或这种请求的访问是不允许的。</span><br><span class="line">  `404 – Not found – 没有发现该资源</span><br><span class="line">  `422 – Unprocessable Entity – 只有服务器不能处理实体时使用，比如图像不能被格式化，或者重要字段丢失。</span><br><span class="line">  `500 – Internal Server Error – API开发者应该避免这种错误。</span><br><span class="line">使用详细的错误包装错误：  状态码    数据  header头信息</span><br><span class="line">&#123;</span><br><span class="line">  &quot;errors&quot;: [</span><br><span class="line">   &#123;</span><br><span class="line">    &quot;userMessage&quot;: &quot;Sorry, the requested resource does not exist&quot;,</span><br><span class="line">    &quot;internalMessage&quot;: &quot;No car found in the database&quot;,</span><br><span class="line">    &quot;code&quot;: 34,</span><br><span class="line">    &quot;more info&quot;: &quot;http://dev.mwaysolutions.com/blog/api/v1/errors/12345&quot;</span><br><span class="line">   &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Rest-API案例"><a href="#Rest-API案例" class="headerlink" title="Rest API案例"></a>Rest API案例</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;v1/users&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="code">    private UserService userService;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    @Autowired</span></span><br><span class="line"><span class="code">    public UserController(UserService userService) &#123;</span></span><br><span class="line"><span class="code">        this.userService = userService;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    /**</span></span><br><span class="line"><span class="code">     * 保存用户</span></span><br><span class="line"><span class="code">     *</span></span><br><span class="line"><span class="code">     * @param user</span></span><br><span class="line"><span class="code">     * @return</span></span><br><span class="line"><span class="code">     */</span></span><br><span class="line"><span class="code">    @PostMapping</span></span><br><span class="line"><span class="code">    public ResponseEntity&lt;Void&gt; saveUser(@RequestBody User user) &#123;</span></span><br><span class="line"><span class="code">        try &#123;</span></span><br><span class="line"><span class="code">            userService.save(user);</span></span><br><span class="line"><span class="code">        &#125; catch (Exception e) &#123;</span></span><br><span class="line"><span class="code">            e.printStackTrace();</span></span><br><span class="line"><span class="code">            return new ResponseEntity&lt;Void&gt;(HttpStatus.INTERNAL_SERVER_ERROR);</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">        return new ResponseEntity&lt;Void&gt;(HttpStatus.CREATED);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    /**</span></span><br><span class="line"><span class="code">     * 删除用户</span></span><br><span class="line"><span class="code">     *</span></span><br><span class="line"><span class="code">     * @param id</span></span><br><span class="line"><span class="code">     * @return</span></span><br><span class="line"><span class="code">     */</span></span><br><span class="line"><span class="code">    @DeleteMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="code">    public ResponseEntity&lt;Void&gt; deleteUser(@PathVariable(&quot;id&quot;) Integer id) &#123;</span></span><br><span class="line"><span class="code">        try &#123;</span></span><br><span class="line"><span class="code">            userService.delete(id);</span></span><br><span class="line"><span class="code">        &#125; catch (Exception e) &#123;</span></span><br><span class="line"><span class="code">            e.printStackTrace();</span></span><br><span class="line"><span class="code">            return new ResponseEntity&lt;Void&gt;(HttpStatus.INTERNAL_SERVER_ERROR);</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">        return new ResponseEntity&lt;Void&gt;(HttpStatus.NO_CONTENT);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    /**</span></span><br><span class="line"><span class="code">     * 更新用户</span></span><br><span class="line"><span class="code">     *</span></span><br><span class="line"><span class="code">     * @param user</span></span><br><span class="line"><span class="code">     * @return</span></span><br><span class="line"><span class="code">     */</span></span><br><span class="line"><span class="code">    @PutMapping</span></span><br><span class="line"><span class="code">    public ResponseEntity&lt;Void&gt; updateUser(@RequestBody User user) &#123;</span></span><br><span class="line"><span class="code">        userService.update(user);</span></span><br><span class="line"><span class="code">        return new ResponseEntity&lt;Void&gt;(HttpStatus.NO_CONTENT);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    /**</span></span><br><span class="line"><span class="code">     * 用户详情</span></span><br><span class="line"><span class="code">     *</span></span><br><span class="line"><span class="code">     * @param id</span></span><br><span class="line"><span class="code">     * @return</span></span><br><span class="line"><span class="code">     */</span></span><br><span class="line"><span class="code">    @GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="code">    public ResponseEntity&lt;User&gt; findUserById(@PathVariable(&quot;id&quot;) Integer id) &#123;</span></span><br><span class="line"><span class="code">        User user = userService.findById(id);</span></span><br><span class="line"><span class="code">        if (user == null) &#123;</span></span><br><span class="line"><span class="code">            return new ResponseEntity&lt;User&gt;(HttpStatus.INTERNAL_SERVER_ERROR);</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">        return new ResponseEntity&lt;User&gt;(user, HttpStatus.OK);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    /**</span></span><br><span class="line"><span class="code">     * 用户列表</span></span><br><span class="line"><span class="code">     *</span></span><br><span class="line"><span class="code">     * @return</span></span><br><span class="line"><span class="code">     */</span></span><br><span class="line"><span class="code">    @GetMapping</span></span><br><span class="line"><span class="code">    public ResponseEntity&lt;List&lt;User&gt;&gt; users() &#123;</span></span><br><span class="line"><span class="code">        List&lt;User&gt; users = null;</span></span><br><span class="line"><span class="code">        try &#123;</span></span><br><span class="line"><span class="code">            users = userService.findAll();</span></span><br><span class="line"><span class="code">        &#125; catch (Exception e) &#123;</span></span><br><span class="line"><span class="code">            e.printStackTrace();</span></span><br><span class="line"><span class="code">            return new ResponseEntity&lt;List&lt;User&gt;&gt;(HttpStatus.INTERNAL_SERVER_ERROR);</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">        return new ResponseEntity&lt;List&lt;User&gt;&gt;(users, HttpStatus.OK);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h5 id="传统开发的异常处理"><a href="#传统开发的异常处理" class="headerlink" title="传统开发的异常处理"></a>传统开发的异常处理</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/<span class="strong">**</span></span><br><span class="line"><span class="strong"> <span class="emphasis">* 全局异常处理之传统web开发</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"> *</span>/</span></span><br><span class="line"><span class="strong">@Component</span></span><br><span class="line"><span class="strong">public class GlobalExceptionHandler implements HandlerExceptionResolver &#123;</span></span><br><span class="line"><span class="strong">    //参数1: 当前请求对象</span></span><br><span class="line"><span class="strong">    //参数2: 当前请求的响应对象</span></span><br><span class="line"><span class="strong">    //参数3: 当前出现异常的控制器对象</span></span><br><span class="line"><span class="strong">    @Override</span></span><br><span class="line"><span class="strong">    public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) &#123;</span></span><br><span class="line"><span class="strong">        //异常处理...</span></span><br><span class="line"><span class="strong">        return new ModelAndView(&quot;500&quot;);</span></span><br><span class="line"><span class="strong">    &#125;</span></span><br><span class="line"><span class="strong">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="RestFul的异常处理"><a href="#RestFul的异常处理" class="headerlink" title="RestFul的异常处理"></a>RestFul的异常处理</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/<span class="strong">**</span></span><br><span class="line"><span class="strong"> <span class="emphasis">* 全局异常处理之RestFul</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"> *</span>/</span></span><br><span class="line"><span class="strong">@ControllerAdvice</span></span><br><span class="line"><span class="strong">public class GlobalExceptionHandlerRest &#123;</span></span><br><span class="line"><span class="strong">    @ExceptionHandler(value = Exception.class)</span></span><br><span class="line"><span class="strong">    @ResponseBody</span></span><br><span class="line"><span class="strong">    public ResponseEntity<span class="xml"><span class="tag">&lt;<span class="name">String</span>&gt;</span></span> exceptionHandler(Exception e) &#123;</span></span><br><span class="line"><span class="strong">        return new ResponseEntity&lt;&gt;(e.getMessage(), HttpStatus.INTERNAL<span class="emphasis">_SERVER_</span>ERROR);</span></span><br><span class="line"><span class="strong">    &#125;</span></span><br><span class="line"><span class="strong">&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="CORS-跨域"><a href="#CORS-跨域" class="headerlink" title="CORS 跨域"></a>CORS 跨域</h2><h5 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h5><ul><li><p>​    <code>CORS是一个W3C标准，全称是&quot;跨域资源共享&quot;（Cross-origin resource sharing）</code>。</p></li><li><p>​    它允许浏览器向跨源服务器，发出XMLHttpRequest(ajax)请求，从而克服了AJAX只能<code>同源使用的限制</code>。</p></li></ul><h5 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h5><ul><li>​    <strong><code>同源策略</code></strong>[same origin policy]是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。 同源策略是浏览器安全的基石。</li></ul><h5 id="源"><a href="#源" class="headerlink" title="源"></a>源</h5><ul><li>​    <strong><code>源</code></strong>[origin]就是协议、域名和端口号。例如：<a href="http://www.baidu.com:80这个URL。">http://www.baidu.com:80这个URL。</a></li></ul><h5 id="同源"><a href="#同源" class="headerlink" title="同源"></a>同源</h5><ul><li>​    若地址里面的<code>协议、域名和端口号均相同</code>则属于同源。</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 同源举例</span></span><br><span class="line"><span class="bullet">-</span> 例如判断下面的URL是否与 http://www.a.com/test/index.html 同源</span><br><span class="line"><span class="code">http://www.a.com/dir/page.html ---------&gt;同源</span></span><br><span class="line"><span class="code">http://www.child.a.com/test/index.html -&gt;不同源，域名不相同</span></span><br><span class="line"><span class="code">https://www.a.com/test/index.html ------&gt;不同源，协议不相同</span></span><br><span class="line"><span class="code">http://www.a.com:8080/test/index.html --&gt;不同源，端口号不相同</span></span><br></pre></td></tr></table></figure><h5 id="哪些操作不受同源限制"><a href="#哪些操作不受同源限制" class="headerlink" title="哪些操作不受同源限制"></a>哪些操作不受同源限制</h5><ul><li><p>页面中的链接，重定向以及表单提交是不会受到同源策略限制的；</p></li><li><p>跨域资源的引入是可以的。如嵌入到页面中的<code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;</code>，<code>&lt;img&gt;</code>，<code>&lt;link&gt;</code>，<code>&lt;iframe&gt;</code>等。</p></li></ul><h5 id="哪些操作受到同源限制"><a href="#哪些操作受到同源限制" class="headerlink" title="哪些操作受到同源限制"></a>哪些操作受到同源限制</h5><ul><li>在浏览器中发起一个AJAX请求,会受到同源策略限制。</li><li><strong><code>出现错误:Access-Control-Allow-Origin</code></strong></li></ul><p>![image-20210623102949273](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20210623102949273.png)</p><h5 id="使用CORS解决同源限制"><a href="#使用CORS解决同源限制" class="headerlink" title="使用CORS解决同源限制"></a>使用CORS解决同源限制</h5><ol><li><h6 id="CrossOrigin注解"><a href="#CrossOrigin注解" class="headerlink" title="@CrossOrigin注解"></a>@CrossOrigin注解</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;demos&quot;)</span><br><span class="line">@CrossOrigin</span><br><span class="line">public class DemoController &#123;</span><br><span class="line"><span class="code">    @GetMapping</span></span><br><span class="line"><span class="code">    public String demos() &#123;</span></span><br><span class="line"><span class="code">        System.out.println(&quot;========demo=======&quot;);</span></span><br><span class="line"><span class="code">        return &quot;demo ok&quot;;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure></li><li><h6 id="全局解决跨域问题"><a href="#全局解决跨域问题" class="headerlink" title="全局解决跨域问题"></a>全局解决跨域问题</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class CorsConfig &#123;</span><br><span class="line"><span class="code">    @Bean</span></span><br><span class="line"><span class="code">    public CorsFilter corsFilter() &#123;</span></span><br><span class="line"><span class="code">        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();</span></span><br><span class="line"><span class="code">        CorsConfiguration corsConfiguration = new CorsConfiguration();</span></span><br><span class="line"><span class="code">        corsConfiguration.addAllowedOrigin(&quot;*&quot;); // 1允许任何域名使用</span></span><br><span class="line"><span class="code">        corsConfiguration.addAllowedHeader(&quot;*&quot;); // 2允许任何头</span></span><br><span class="line"><span class="code">        corsConfiguration.addAllowedMethod(&quot;*&quot;); // 3允许任何方法（post、get等）</span></span><br><span class="line"><span class="code">        source.registerCorsConfiguration(&quot;/**&quot;, corsConfiguration);//4处理所有请求的跨域配置</span></span><br><span class="line"><span class="code">     return new CorsFilter(source);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><hr></li></ol><h2 id="Jasypt-加密"><a href="#Jasypt-加密" class="headerlink" title="Jasypt 加密"></a>Jasypt 加密</h2><h5 id="引言-3"><a href="#引言-3" class="headerlink" title="引言"></a>引言</h5><p> Jasypt 也即Java Simplified Encryption是Sourceforge.net上的一个开源项目。在当地时间11月23号的通告中，Jasypt 1.4的新特征包括：加密属性文件（encryptable properties files）、Spring Framework集成、加密Hibernate数据源配置、新的命令行工具、URL加密的Apache wicket集成以及升级文档。</p><p>根据Jasypt文档，该技术可用于加密任务与应用程序，例如加密密码、敏感信息和数据通信、创建完整检查数据的sums. 其他性能包括高安全性、基于标准的加密技术、可同时单向和双向加密的加密密码、文本、数字和二进制文件。Jasypt也可以与Acegi Security整合也即Spring Security。Jasypt亦拥有加密应用配置的集成功能，而且提供一个开放的API从而任何一个Java Cryptography Extension都可以使用Jasypt。</p><p>Jasypt还符合RSA标准的基于密码的加密，并提供了无配置加密工具以及新的、高可配置标准的加密工具。</p><h5 id="整合SpringBoot"><a href="#整合SpringBoot" class="headerlink" title="整合SpringBoot"></a>整合SpringBoot</h5><ul><li>引入依赖</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;groupId&gt;com.github.ulisesbocchio&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">    &lt;artifactId&gt;jasypt-spring-boot-starter&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">    &lt;version&gt;2.0.0&lt;/version&gt;</span></span><br><span class="line"><span class="code">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><ul><li>编写配置</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jasypt:</span><br><span class="line">  encryptor:</span><br><span class="line"><span class="code">    algorithm: PBEWithMD5AndDES</span></span><br><span class="line"><span class="code">    password: cf150b74e4824146ad76e9ebe757ba76 #使用加密秘钥</span></span><br></pre></td></tr></table></figure><ul><li><p>通过程序传递密钥</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Djasypt.encryptor.password=cf150b74e4824146ad76e9ebe757ba76</span><br></pre></td></tr></table></figure><p>![image-20210629191623880](D:\JavaProjects\springboot-2021-版本资料\笔记\Spring Boot 2.5.0.assets\image-20210629191623880.png)</p></li><li><p>加密、解密</p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">StringEncryptor encryptor;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void testSecret() &#123;</span><br><span class="line">  //加密</span><br><span class="line">  String url = encryptor.encrypt(&quot;localhost&quot;);</span><br><span class="line">  System.out.println(url);</span><br><span class="line">  //解密</span><br><span class="line">  String decrypt = encryptor.decrypt(&quot;nRmCj//nOuErKepiS6dyBO/9Ff7LGCXZ&quot;);</span><br><span class="line">  System.out.println(decrypt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql:</span><br><span class="line">  host: ENC(pNVN9SKixSnfJ8yZjjIESZuP8HTwG0Hm)</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  thymeleaf:</span><br><span class="line"><span class="code">    suffix: .html</span></span><br><span class="line"><span class="code">    prefix: classpath:/templates/</span></span><br><span class="line"><span class="code">    cache: false</span></span><br><span class="line"><span class="code">  datasource:</span></span><br><span class="line"><span class="code">    type: com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="code">    driver-class-name: com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="code">    url: jdbc:mysql://$&#123;mysql.host&#125;:3306/emp?characterEncoding=UTF-8</span></span><br><span class="line"><span class="code">    username: ENC(M9LpI0WkgVh0rpx+BkOGew==)</span></span><br><span class="line"><span class="code">    password: ENC(M9LpI0WkgVh0rpx+BkOGew==)</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h3&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java 框架" scheme="http://example.com/tags/Java-%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="http://example.com/2021/08/02/Linux/"/>
    <id>http://example.com/2021/08/02/Linux/</id>
    <published>2021-08-02T11:33:14.000Z</published>
    <updated>2021-08-13T01:32:14.691Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><span id="more"></span><pre><code>1. Linux系统特点    * 开放性（开源）、多用户、多任务、良好的用户界面、优异的性能与稳定性     1. 多用户多任务：         1. 单用户：一个用户，在登录计算机（操作系统），只允许同时登录一个用户         2. 单任务：一个任务，允许用户同时进行的操作任务数量         3. 多用户：多个用户，在登录计算机（操作系统）允许同时登录多个用户进行操作         4. 多任务：多个任务，允许用户同时进行多个操作任务    2. Window 和 Linux 的区别        * Window：单用户、多任务        * Linux：多用户、多任务2. Linux分支    分支：Linux分支有很多，现在比较有名的ubuntu、debian、centos、redhat、suse等等。3. Linux系统的文件    1. Linux系统的文件目录结构        * Bin：全称 binary，含义是二进制。该目录存储的都是一些二进制文件，文件都是可以被运行的        * Dev：该目录中主要存放的是外接设备，例如盘、其他的光盘等。在其中的外接设备是不能直接被使用的，需要挂载（类似windows下的分配盘符）。        * Etc:该目录主要存储一些配置文件。        * Home：表示“家”，表示除了root用户以外其他用户的家目录，类似于windows下的User/用户目录        * Proc：process，表示进程，该目录中存储的是Linux运行时的进程。        * Root：该目录是root用户自己的家目录。        * Sbin：全称super binary。该目录也是存储一些可以被执行的二进制文件，但是必须得有super权限用户才能执行。        * Tmp：表示“临时”的，当系统运行时候产生的临时文件会在这个目录下存着。        * Usr：存放的是用户自己安装的软件。类似于windows下的program files        * Var：存放的程序/系统的日志文件的目录        * Mnt：当外接设备需要挂载的时候，就需要挂载到mnt目录下。4. Linux的基本指令    1. 一个完整的指令的标准格式：Linux通用的格式        #指令主题[选项][操作对象]        * 一个指令可以包含多个选项，操作对象也可以是多个    2. 基础指令        1. ls指令            * 含义：ls（list）            1. #ls                * 含义：列出当前工作目录下的所有文件/文件夹的名称            2. #ls 路径                * 含义：列出指定路径下的所有文件/文件夹的名称                        * 关于路径（重要）：                    * 路径可以分为两种：相对路径、绝对路径。                    * 相对路径：相对首先得有一个参照物（一般就是当前的工作路径）                        * 相对路径的写法：在相对路径中通常会用到2个符号&quot;./&quot;(表示当前目录下)、&quot;../&quot;(上一级目录下)                    * 绝对路径：绝对路径不需要参照物，直接从根&quot;/&quot;开始寻找对应路径            3. #ls 选项 路径                 * 含义：在列出指定路径下的文件/文件夹的名称，并以指定的格式进行显示。                 * 常见的语法：                     * #ls-l 路径                     * #ls-la 路径                 * 选项的解释：                     *-l: 表示list,表示以详细的列表的形式进行展示                     *-a:表示显示所有的文件/文件夹（包含了隐藏文件/文件夹）                  * 在检索的结果中，其中&quot;-&quot;表示该行对应的文档类型为文件，&quot;d&quot;表示文档类型为文件夹                * 在linux中隐藏文件一般都是要以&quot;.&quot;开头            4. #ls-lh 路径                * 含义：列出指定路径下的所有文件/文件夹的名称，以列表的形式并且在显示文档大小的时候以可读性较高的形式显示        2. pwd指令            * 用法：#pwd （print working directory，打印当前工作目录）        3. cd命令            * 命令：#cd （change directory，改变目录）            * 作用：用于切换当前的工作目录的            * 语法：#cd 路径            * 补充：在Linux中有一个特殊的符号&quot;~&quot;,表示当期用户的家目录。切换的方式：#cd~        4. mkdir指令            * 指令：mkdir（创建目录）            * 语法1：#mkdir 路径 （可以使文件夹名称也可以是包含名称的一个完整路径）            * 注意：ls列出的结果颜色说明：其中蓝色的名称表示文件夹，黑色的表示文件，绿色的其权限为拥有所有权限。            * 语法2：#mkdir-p 路径                * 含义：当一次性创建多层不存在的目录的时候，添加-p参数，否则会报错            * 语法3：#mkdir 路径1 路径2 路径3...(表示一次性创建多个目录)        5. touch指令            * 作用：创建文件            * 语法：#touch 文件路径 （路径可以是直接的文件名也可以是路径）        6. cp指令            * 作用：复制文件/文件夹到指定的位置            * 语法：#cp 被复制的文档路径 文档被复制到的路径            注意：                1. Linux在复制过程中是可以重新对新位置的文件进行重命名的，但是如果不是必须的需要，则建议保持前后名称一致。                2. 当使用cp命令进行文件夹复制操作的时候需要添加选项&quot;-r&quot;(-r表示递归复制)                    7. mv指令            * move 移动剪切            * 作用：移动文档到新的位置            * 语法：#mv 需要移动的文档路径 需要保存的位置的路径            * 确认：移动之后的文件还在不在原来的位置？原始文件时不在原始位置的            * 补充：在Linux中重命名的命令也是mv。语法和移动语法一样。        8. rm命令            * remove 移除、删除            * 作用：移除/删除文档            * 语法：#rm 选项 需要移除的文档路径            * 在删除的时候如果不带选项，会提示是否删除，如果需要确认则输入&quot;y/yes&quot;,否则输入&quot;n/no&quot; 按下回车            * 注意：                1. 如果在删除的时候不想频繁的确认，则可以在指令中添加&quot;-f&quot;，表示force（强制）                2. 删除一个目录的时候需要做递归删除，并且一般也不需要进行删除确认询问，所以移除目录的时候一般需要使用-rf选项        9. vim命令            * vim是一款文本编译器            * 语法：#vim文件的路径            * 作用：打开一个文件（可以不存在，也可以存在）                * 退出打开的文件，在没有按下其他命令的时候，按下shift+冒号，输入q，按下回车即可        10. 输出重定向            * 一般命令的输出都会显示在终端中，有些时候需要将一些命令的执行结果想要保存到文件中进行后续的分析/统计，则这时候需要使用到的输出重定向技术。            * &gt; :覆盖输出，会覆盖掉原先的文件内容            * &gt;&gt;:追加输出，不会覆盖原始文件内容，会在原始内容末尾继续添加            * 语法：#正常执行的指令 &gt;/&gt;&gt; 文件路径            * 注意：文件可以不存在，不存在则新建        11. cat命令            * 作用1：cat有直接打开一个文件的功能            * 语法1：#cat 文件的路径            * 作用2：cat还可以对文件进行合并            * 语法2：#cat 待合并的文件路径1 待合并的文件路径2 ...待合并文件路径n&gt; 合并之后的文件路径    3. 高级指令（重点）        1. df指令            * 作用：查看磁盘空间            * 语法：#df-h  -h表示以可读性较高的形式展示大小        2. free指令            * 作用：查看内存使用情况            * 语法：#free -m                 * Swap:用于临时内存，当系统真实内存不够使用的时候可以临时使用磁盘空间来充当内存        3. head指令            * 作用：查看一个文件的前n行，如果不指定n，则默认显示前10行            * 语法：#head-n 文件路径 （n表示数字）        4. tail指令            * 作用1：查看一个文件的末n行，如果n不指定默认显示后10行            * 语法：#tail-n 文件的路径 n同样表示数字            * 作用2：可以通过tail指令查看一个文件的动态变化内容(变化的内容不能是用户手动增加的)            * 语法：#tail-f 文件路径                * 该命令一般用于查看系统的日志文件比较多        5. less指令            * 作用：查看文件，以较少的内容进行输出，按下辅助功能键(数字+回车、空格键+上下方向键)查看更多            * 语法：#less 需要查看的文件路径                * 在退出的时候只需按下q键即可        6. wc指令            * 作用：统计文件内容信息（包含行数、单词数、字节数）            * 语法：#wc-lwc 需要统计的文件路径                * -l：表示lines，行数                * -w：表示words，单词数                * -c：表示bytes，字节数                    7. date指令（重点）            * 作用：表示操作时间日期（读取、设置）            * 语法1：#date             * 语法2:#date +%F （等价于#date &quot;+%Y-%m-%d&quot;)            * 语法3：#date &quot;+%F%T&quot; 引号表示让“年月日与时分秒”成为一个不可分割的整体 等价操作#date &quot;+%Y-%m-%d %M:%H:%S&quot;            * 语法4：获取之前或者之后的某个时间(备份) #date -d &quot;-1 day&quot; &quot;%Y-%m-%d %M:%H:%S&quot;                * 符号可选值：+（之后）或者 -（之前）                * 单位可选值：day、month、year                * %F：表示完整的年月日                * %T：表示完整的时分秒                * %Y:表示四位年份                * %m：表示两位月份（带前导0）                * %d：表示日期（带前导0）                * %H：表示小时（带前导0）                * %M: 表示分钟（带前导0）                * %S: 表示秒数（带前导0）        8. cal指令            * 作用：用来操作日历            * 语法1：#cal 等价于#cal -1 直接输出当前月份的日历            * 语法2：#cal -3   表示输出上一个月+本月+下一个月的日历            * 语法3：#cal -y 年份   表示输出某一年的日历        9. clear/ctrl + L指令            * 作用：清除终端中已经存在的命令和结果(信息)。            * 语法：clear  或者快捷键：ctrl+L            * 注意：该命令并不是真的清除了之前的信息，而是把之前的信息隐藏到了最上面，通过滚动条框可继续查看以前的信息。        10. 管道（重要）            * 管道符：|            * 作用：管道一般可以用于“过滤”、“特殊”、“扩展处理”。            * 语法：管道不能单独使用，必须要配合前面所讲的一些指令来一起使用，其作用主要是辅助作用。            * 过滤案例(重要)：需要通过管道查询出根目录下包含“y”字母的文档名称。                * #ls /|grep y            * 针对上面这个命令说明：                1. 以管道作为分界线：前面的命令有个输出，后面需要先输入，然后再过滤，最后再输出，通俗的讲就是管道前面的输出就是后面指令的输入。                2. 扩展处理：请使用学过的命令，来统计某个目录下的文档的总个数？                    * #ls/|wc-l    4. 高级指令        1. hostname指令            * 作用：操作服务器的主机名（读取）            * 语法1：#hostname  表示输出完整的主机名            * 语法2：#hostname -f  表示输出当前主机名中的FQDN(全限定域名)        2. id指令            * 作用：查看一个用户的一些基本信息（包含用户id，用户组id，附加组id...)，该指令如果不指定用户则默认当前用户            * 语法1：#id  默认显示当前执行该命令的用户的基本信息            * 语法2：#id 用户名  显示指定用户的基本信息                * 验证用户信息：通过文件/etc/passwd                * 验证用户组信息：通过文件/etc/group        3. whoami指令            * 指令：“我是谁” 显示当前登录的用户名，一般用于shell脚本，用于获取当前操作的用户名方便记录日志。            * 语法：#whoami        4. ps -ef指令（重点）            * 作用:主要是查看服务器进程信息            * 选项含义：                * -e：等价于“-A”，表示列出全部的进程                * -f：显示全部的列（显示全字段）            * 列的含义：                * UID:该进程执行的用户id                * PID：进程id                * PPID：该进程的父级进程id，如果一个程序的父级进程找不到，该程序的进程称之为僵尸进程                * C：cpu的占用率，其形式是百分数                * STIME：进行的启动时间                * TTY：终端设备，发起该进程的识别符号，如果显示“？”则表示该进程并不是由终端设备发起                * TIME:进程的执行时间                * CMD：该进程的名称或者对应的路径        5. top指令（重点）            * 作用：查看服务器的进程占的资源            * 语法：                * 进入命令：#top  （动态显示）                * 退出命令：按下q键            * 输出的表头信息                * PID：进程id                * USER:该进程对应的用户                * PR:优先级                * VIRT:虚拟内存                * RES：常驻内存                * SHR：共享内存                    * 计算一个进程实际使用的内存 = 常驻内存（RES）- 共享内存（SHR）                * S：表示进程的状态（sleeping，其中S表示睡眠，R表示运行）                * %CPU：表示CPU的占用百分比                * %MEN:表示内存的占用百分比                * TIME+：执行时间                * COMMAND：进程的名称或者路径                * 在运行top的时候，可以按下方便的快捷键：                    * M：表示将结果按照内存（MEM）从高到低进行降序排列                    * P：表示将结果按照CPU使用率从高到低进行降序排列                    * 1：当服务器拥有多个cpu的时候可以使用“1”快捷键来切换是否展开显示各个cpu的详细信息        6. du -sh指令            * 作用：查看目录的真实大小            * 语法：#du -sh 目录路径            * 选项含义：                * -s：只显示汇总的大小                * -h：表示以高可读性的形式进行显示        7. find指令            * 作用：用于查找文件（其参数有55个之多）            * 语法：#find 路径范围 选项 选项的值            * 选项：                * -name：按照文档名称进行搜索（支持模糊搜索）                * -type：按照文档的类型进行搜索                    * 文档类型：“-”表示文件（在使用find的时候需要用f来替换），“d”表示文件夹        8. service指令（重点）            * 作用：用于控制一些软件的服务启动/停止/重启            * 语法：#service 服务名 start/stop/restart        9. kill命令（重点）            * 作用：表示杀死进程 （当遇到僵尸进程或者处于某些原因需要关闭进程的时候）            * 语法1：#kill 进程PID （语法需要配合ps一起使用）            * 语法2：#killall 进程名称（比kill更加好用）        10. ifconfig命令（重点）            * 作用：用于操作网卡相关指令            * 简单语法：#ifconfig （获取网卡信息）        11. reboot指令            * 作用：重新启动计算机            * 语法1：#reboot  重启            * 语法2:#reboot -w  模拟重启，但是不重启（只写关机与开机的日志信息）        12. shutdown指令            * 作用：关机（慎用）            * 语法1：#shutdown -h now “关机提示” 或者 #shutdown -h15:25 “关机提示”                * 如果想要取消关机计划的话，则可以按照以下方式去尝试：                    * 针对于centos7.x以前的版本：ctrl+c                    * 针对于centos7.x(包含)以后的版本，#shutdown -c                * 除了shutdown关机以外，还有以下几个关机命令：                    * #init 0                    * #halt                    * poweroff        13. uptime指令            * 作用：输出计算机的持续在线时间（计算机从开机到现在运行的时间）            * 语法：#uptime        14. uname指令            * 获取计算机操作系统相关信息            * 语法1：#uname  获取操作系统的类型            * 语法2：uname -a  all，表示获取全部的系统信息（类型、全部主机名、内核版本、发布时间、开源计划）        15. netstat -tnlp指令            * 作用：查看网络连接状态            * 语法：#netstat -tnlp            * 选项名称：                * -t：表示值列出tcp协议的连接                * -n：表示将地址从字母组合转化成ip地址，将协议转化成端口号来表示                * -l：表示过滤出“state（状态）”列出其值为LISTEN(监听)的连接                * -p：表示显示发起连接的进程pid和进程名称        16. man指令            * 作用：manual 手册（包含了Linux中全部命令手册，英文）            * 语法：#man 命令  （退出按下q键）</code></pre><p>​    </p><pre><code>5.VIM    1. vi介绍：        * vi编辑器是所有Unix及Linux系统下标准的编辑器，在Unix及Linux系统的任何版本中，vi编辑器是完全相同的。        * 关于vim：            * vi和vim都是Linux中的编辑器，不同的是，vim比较高级，可以视为vi的升级版本。vi使用于文本编辑，但是vim更适用于coding（写代码的）            * vim重点是光标的移动，模式切换、删除、查找、替换、复制、粘贴、撤销命令的使用    2. vim三种模式（重点）        1. Vim中存在三种模式（大众的认知）：命令模式、编辑模式（输入模式）、末行模式（尾行模式）            * 命令模式：在该模式下是不能对文件直接编辑，可以输入快捷键进行一些操作（删除行、复制行、移动光标、粘贴等等）【打开文件之后默认进入的模式】            * 编辑模式：在该模式下可以对文件内容进行编辑            * 末行模式：可以在末行输入命令来对文件进行操作（搜索、替换、保存、退出、撤销、高亮等等）        2. Vim的打开文件的方式（4种，要求掌握的就前3种）            * #vim 文件路径  作用：打开指定的文件            * #vim +数字 文件路径  作用：打开指定的文件，并且将光标移动到指定行            * #vim +/关键词 文件路径  作用：打开指定的文件，并且高亮显示关键词            * #vim 文件路径1 文件路径2 文件路径3  作用：同时打开多个文件            * 重点：                * 先复制出一个/etc/passwd文件，复制到当前家目录                * 后续一切操作命令都是基于/root/passwd文件进行操作                * 退出方式：输入:q按下回车即可        3. 命令模式            * 注意：该模式是打开文件的第一个看到的模式（打开文件即可进入）            1. 光标移动                * 光标移动到行首                    * 按键：shift + 6或^                * 光标移动到行尾                    * 按键：shift + 4或$                * 光标移动到首行                    * 按键：gg                * 光标移动到末行                    * 按键：G                * 翻屏                    * 向上翻屏：按键ctrl+b (before)                    * 向下翻屏：ctrl (after)            2. 复制操作                * 复制光标所在行                    * 按键：yy                    * 粘贴：在想要粘贴的地方按下p键                * 以光标所在行为准（包含当前行），向下复制指定的行数                    * 按键：数字yy                * 可视化复制                    * 按键：ctrl + v,然后按下上下左右方向键来选中需要复制的区块，按下yy键进行复制，最后按下p键粘贴            3. 剪切/删除                * 剪切/删除光标所在行                    * 按键：dd  （删除之后下一行上移）                    * 注意：dd严格意义上说是剪切命令，但是如果剪切了不粘贴就是删除的效果。                * 剪切/删除光标所在行为准（包含当前行），向下删除/剪切指定的行                    * 按键：数字dd （删除之后下一行上移）                * 剪切/删除光标所在的当前行，但是删除之后下一行不上移                    * 按键：D （删除之后当前行会变成空白行）                            4. 撤销/恢复                * 撤销：输入:u（不属于命令模式）  或者 u  （undo）                * 恢复：ctrl+r  恢复（取消）之前的撤销操作            5. 扩展1：光标的快速移动                * 快速将光标移动到指定的行                    * 按键：数字G                * 以当前光标为准向上/向下移动n行                    * 按键：数字↑，数字↓                * 以当前光标为准向左/向右移动n字符                    * 按键：数字←，数字→                * 末行模式下的快速移动方式，移动到指定的行                    * 按键：输入英文&quot;:&quot;,其后输入行数数字，按下回车        4. 末行模式            * 进入方式：由命令模式进入，按下“:”即可进入            * 退出方式：                * 按下esc                * 连按2次esc                * 删除末行全部输入字符            * 保存操作                * 输入：“:w”  保存文件                * 输入：“:w路径”  另存为</code></pre><p>​    </p><pre><code>            * 退出（quit）                * 输入：“:q”  退出文件                            * 保存并退出                * 输出：“:wq”  保存并退出            * 强制（!）                * 输入：“:ql”  表示强制退出，刚才做的修改操作不保存            * 搜索/查找                * 输入：“/关键词”                    * 在搜索结果中切换上/下一个结果：N/n （next）            * 替换：                * :s/搜索的关键词/新的内容  替换光标所在行的第一行符合条件的内容                * :s/搜索的关键词/新的内容/g  替换光标所在行的第一处符合条件的内容                * :%s/搜索的关键词/新的内容  替换整个文档中每行第一个符合条件的内容                * :%s/搜索的关键词/新的内容/g  替换整个文档的符合条件的内容                    * % 表示整个文件                    * g 表示全局（global）            * 显示行号            * 输入：“:set nu” (number)            * 如果想取消显示，则输入：&quot;:set nonu&quot;            * 扩展2：使用vim同时打开多个文件，在末行模式下进行切换文件            * 查看当前已经打开的文件名称：“:files”                * 在%a的位置有2种显示可能                    * %a：a=active 表示当前正在打开的文件                    * #：表示上一个打开的文件            * 切换文件的方式：                * a：如果需要指定切换文件的名称，则可以输入：“:open 已经打开的文件名”                * b：可以通过其他命令来切换上一个/下一个文件                    * 输入：“:bn” 切换到下一个文件 (back next)                    * 输入：“:bp” 切换到上一个文件 (back previous)        5. 编辑模式            1. 进入方式：i(insert)、a(after)            2. 退出方式：按下esc键        6. 实用功能            1. 如何控制着色显示与否？                * 显示：“:syntax on”                * 关闭显示：“:syntax off”            2. vim中计算器的使用                * 当在编辑文件的时候突然需要使用计算器去计算一些公式，则此时需要用计算器，但是需要退出，vim自身继承了一个简易的计算器。                    * 进入编辑模式                    * 按下按键“ctrl+R”,然后输入“=”，此时光标会变到最后一行                    * 输入需要计算的内容，按下回车        7. 扩展3            1. vim的配置（重点）                * vim是一款编辑器，编辑器也是有配置文件的                * vim配置有三种情况                    * 在文件打开的时候在末行模式下输入的配置(临时的)                    * 个人配置文件(~/.vimrc，如果没有可以自行新建)                    * 全局配置文件(vim自带，/etc/vimrc)                * 新建好个人配置文件之后进入编辑                * 在配置文件中进行配置                    * 问题：如果某个配置项，在个人配置文件与全局配置文件产生冲突的时候应该以谁为准？                        * 测试步骤：在两个配置文件中针对同一配置设置不同的值                        * 结论：如果针对同一个配置项，个人配置文件中存在，则以个人配置文件为准，如果个人配置文件中不存在这一项，则以全局配置文件为准。                                    2. 异常退出                1. 异常退出：在编辑文件之后并没有正常的去wq(保存退出)，而是遇到突然关闭终端或者断电的情况，则会显示文件异常的情况，这个情况称之为异常退出。                    * 解决办法：将交换文件（在编程过程中产生的临时文件）删除即可                    * rm -f .passwd.swp            3. 别名机制                * 作用：相当于创建一些属于自己的自定义命令                * 别名机制依靠一个别名映射文件:~/.bashrc                * 注意：如果想新创造的命令生效，必须要重新登录当前用户。            4. 退出方式                * 回顾：之前vim中退出编辑的文件可以使用&quot;:q&quot;或者“:wq”                * 除了上面的这个语法之外，vim还支持另外一个保存退出方法“:x”,                * 说明：                    * “:x”在文件没有修改的情况下，表示直接退出，在文件修改的情况下表示保存并退出；                    * 如果文件没有被修改，但是使用wq进行退出的话，则文件的修改时间会被更新；但是如果文件没有被修改，使用x进行退出的话，则文件修改时间不会被更新。主要是会混淆用户对文件的修改时间的认定。                    * 因此建议以后使用“:x”来进行对文件的保存退出。                    * 注意：不要使用X，不要使用X，不要使用X6.Linux自有服务    1. 运行模式        * 运行模式也可以称之为运行级别        * 在linux中存在一个进程：init（initialize，初始化），进程id是1            * 查看进程：#ps -ef|grep init            * 该进程存在一个对应的配置文件，inittab(系统运行级别配置文件，位置/etc/inittab)        * Centos6.5中存在7种运行级别/模式            * 0:表示关机级别（不要将默认的运行级别设置成这个值）            * 1：单用户模式            * 2：多用户模式，不带NFS(Network File System)            * 3：多用户模式，完全的多用户模式            * 4：没有被使用的模式（被保留的模式）            * 5：X11，完整的图形化界面模式            * 6：表示重启级别（不要将默认的运行级别设置成这个值）            * 与该级别相关的几个命令：                * #init 0  表示关机                * #init 3：表示切换到不带桌面的模式                * #init 5：切换到图形界面                * #init 6：重启电脑            * 注意：init指令需要超级管路员的权限，普通用户无法执行            * 这些命令其实都是调用的init进程，将数字(运行级别)传递给进程，进程去读配置文件执行对应的操作                                * 切换到纯命令行模式下 #init 3                * 切换之后需要输入用户名和密码，在输入密码的时候没有“*”提示输入，只要自己确认输入的密码没有错误，按下回车即可                                * 回到桌面模式  #init 5                * 设置模式永久为命令行模式                    * 将/etc/inittab文件中的initdefault值设置成3，然后重启操作系统        2. 用户与用户组管理（重点）            1. 用户管理            1. 添加用户                    * 常用语法：#useradd 选项 用户名                    * 常用选项：                        * -g：表示指定用户的用户主组，选项的值可以是用户组的id，也可以是组名                        * -G：表示指定用户的用户附加组，选项的值可以是用户组的id，也可以是组名                        * -u：uid：用户的id(用户的标识符)，系统默认会从500之后按顺序分配uid，如果不想使用系统分配的，可以通过该选项自定义。                            * 创建用户 zhangsan，不带任何选项                            * 验证是否成功：                                * 验证/etc/passed的最后一行，查看是否有zhangsan的信息                                * 验证是否存在家目录(在Centos 下创建好用户之后随之产生一个同名家目录)                        * 扩展：认识passed文件                            * 用户名：密码：用户ID:用户组ID:注释:家目录:解释器 shell                            * 用户名：创建新用户名称，后期登录的时候需要输入                            * 密码：此密码位置一般情况都是“x”，表示密码的占位                            * 用户ID：用户的识别符                            * 用户组ID：该用户所属的主组ID                            * 注释：解释该用户是做什么用的                            * 家目录：用户登录进入系统之后默认的位置                            * 解释器 shell：等待用户进入系统之后，用户输入指令之后，该解释器会收集用户输入的指令，传递给内核处理                         * 注意：在不添加选项的时候，执行useradd之后会执行一系列的操作                             * 创建同名的家目录                             * 创建同名的用户组                                                      * 注意：查看用户的主组可以查看passwd文件，查看附加组可以查看group文件                                                        2. 修改用户                * 常用语法：#usermod 选项 用户名                * usermod：user modify 用户修改                * 常用选项：                    * 同用户管理三个一样 外加一个 -l：修改用户名                                    * 案例1：修改zhangssan用户主组为500，附加组改为501                    * #usermod -g 500 -G 501 zhangsan                                * 案例2：修改zhangsan用户用户名，改为wangerma                    * #usermod -l 新的用户名 旧的用户名                        * #usermod -l wangerma zhangsan</code></pre><p>​            </p><pre><code>            3. 设置密码                1. Linux不允许没有密码的用户登录到系统，因为前面创建的用户目前都处于锁定状态，需要设置密码之后才能登录到计算机                2. 常用语法：#passwd 用户名                    * 在设置密码的时候也是没有任何输入提示的，放心输入，确保两次输入的密码一致，按下回车即可。                    * 设置密码之后shadow文件中的体现，能够看出lisi用户没有密码的。                                        * 切换用户命令：#su（switch user）                    * 如果用户名不指定则表示切换到root用户                    * 切换用户需要注意的事项：                        * 从root往普通用户切换不需要密码，但是反之则需要root密码                        * 切换用户之后前后的工作路径是不变的                        * 普通用户没有办法访问root用户家目录，但是反之则可以            4. 删除用户                1. 常用语法：#userdel 选项 用户名                    * userdel：user delete（用户删除）                2. 常用选项                    * -r：表示删除用户的同时，删除其家目录                    * 注意：已经登录的用户删除的时候会提示删除失败，但是没有登录的用户可以正常删除                        * 解决办法：简单粗暴，kill对应用户的全部进程</code></pre><p>​    </p><pre><code>            2. 用户组管理                * 每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理，不同Linux系统对用户组打的规定有所不同，如Linux下的用户属于与它同名的用户组，这个用户组在创建的时同时创建。                * 用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对/etc/group文件的更新。                    * 文件结构：                        * 用户组名:密码:用户组ID:组内用户名                        * 密码：    X表示占位符，虽然用户组可以设置密码，但是绝大部分的情况下不设置密码                        * 组内用户名：表示福附加组是该组的用户名称                1. 用户组添加                    * 常用语法：#groupadd 选项 用户组名                    * 常用选项：                        * -g:类似用户添加里的&quot;-u&quot;,-g表示选择自己设置一个自定义的用户组ID数字，如果自己不指定，则默认从500之后递增。                2. 用户组编辑                    * 常用语法：#groupmod 选项 用户组名                    * 常用选项：                        * -g：类似用户修改里的“-u”，-g表示选择自己设置一个自定义的用户组ID数字                        * -n：类似于用户修改“-l”，表示设置新的用户组的名称                3. 用户组删除                    * 常用语法：#groupdel 用户组名                    * 注意:当如果需要删除一个组，但是这个组是某个用户的主组时，则不允许删除；如果确定需要删除，则先从组内移出所有用户        3. 网络设置            * 首先知道网卡配置文件位置：/etc/sysconfig/network-scripts            * 在目录中网卡的配置文件名称格式：ifcfg-网卡名称                * ONBOOT:是否开机启动                * BOOTPROTO:ip地址分配方式，DHCP表示动态主机分配协议                * HWADDR：硬件地址，MAC地址            * 如果后续需要重启网卡怎么去操作呢？                * #service network restart                * 在有的分支版本中可能没有service命令来快速操作服务，但是有一个共性的目录：/etc/init.d这个目录中放着很多对服务的快捷方式。                    * 此处重启网卡命令还可使用：#/etc/init.d/network restart            * 扩展1：如果修改网卡的配置文件，但是配置文件的目录层次根深，此时可以在浅的目录中创建一个快捷方式(软链接)，方便以后去查找                * #ln-s 原始文件的路径 快捷方式的路径                 * 其中，文件类型位置的“l”表示其类型为link(连接类型)，后面的“-&gt;”指向的原始文件路径            * 扩展2：如何去重启单个网卡？                * 停止某个网卡：#ifdown 网卡名                * 开启某个网卡：#ifup 网卡名                * 注意：在实际工作中不要随意禁用网卡        4. ssh服务（重点）            * ssh(secure shell，安全外壳协议)，该协议有2个常用的作用：远程连接协议、远程文件传输协议。            * 协议使用端口号：默认是22，如果需要修改，则需要修改ssh服务的配置文件                * #/etc/ssh/ssh_config            * 端口号可以修改，但是需要注意2个事项：                * 注意范围，端口范围是从0-65535                * 不能使用别的服务已经占用的端口            * 服务启动/停止/重启                * #service sshd start/stop/restart                * #/etc/init.d/sshd start/stop/restart                             1. 远程终端                * 终端工具主要帮助运维人员连接远程的服务器，常见终端工具有：Xshell、secureCRT、Putty等            2. SSH服务文件传输                * 可视化的界面传输工具：Filezilla</code></pre><p>​    </p><pre><code>    2. 设置主机名        1. 临时设置主机名(立竿见影)，需要切换用户使之生效            * #hostname 设置的主机名        2. 永久设置主机名（需要重启）            * 先找到一个文件 /etc/sysconfig/network（主机名的配置文件）            * 修改其中的HOSTNAME为自己需要设置的永久主机名        3. 修改linux服务器的hosts文件，将修改的后的主机名指向本地(设置FQDN)            * Hosts 文件位置：/etc/hosts            * 问题：不设置FQDN会怎么样？                * 很多开源服务器软件(例如Apache)则无法启动，或出现报错                * 方便记忆，看到主机名对其作用有一个初步判断                * 如果不设置则会影响本地的域名的解析(本地访问)</code></pre><p>​<br>​    </p><pre><code>    3. chkconfig        * 作用：相当于windows下“安全卫士”、“电脑管家”之类的安全辅助工具提供“开机启动项”的一个管理服务        * 在linux下不是所有的软件安装完后之后都有开机启动服务，有的可能需要自己去添加。除此之外还可以查看和删除。        1. 开机启动服务查询            * #chkconfig --list        2. 删除服务            * #chkconfig --del 服务名        3. 添加开机启动服务            * chkconfig --add 服务名 (必须要保证服务正常运行，才可以添加)        4. 设置服务在某个级别下开机启动/不启动（重点命令）            * #chkconfig --level 连在一起的启动级别 服务名 on/off</code></pre><p>​        </p><pre><code>    4. ntp服务        * 作用：ntp主要是用于对计算机的时间同步管理的操作。        * 时间是对服务器来说很重要的，一般很多网站都需要读取服务器时间来记录相关信息，如果时间不准，则可能造成很大影响。        * 同步服务器时间方式有2个：一次性同步(手动同步)、通过服务自动同步        1. 一次性同步时间（简单）            * #ntpdate 时间服务器域名或ip地址 ip地址查看可以访问：hhtp://www.ntp.org.cn/pool.php                            2. 设置时间同步服务            * 服务名：ntpd            * 启动ntpd服务                * #service ntpd start  或者 /ect/init.d/ntpd start            * 设置ntpd服务开机启动：                * #chkconfig --list|grep ntpd                * #chkconfig --level 35 ntpd on    5. 防火墙服务        * 防火墙：防范一些网络攻击，有软件防火墙、硬件防火墙之分。         * 防火墙选择让请求通过，从而保证网络的安全性        * 在当前的centos6.5中防火墙有一个名称：iptables（7.x中默认使用的是firewalld）        1. 查看iptables是否开机启动            * chkconfig --list | grep iptables        2. iptables服务启动/重启/关闭            * #service iptables start/restart/stop            * /etc/init.d/iptables start/restart/stop        3. 查看iptables的状态(规则)            * #service iptables status            * 如果iptables没有启动，则提示服务没启动，如果已经启动，则显示防火墙的相关的规则信息。        4. 查看规则的命令            * #iptables-L-n            * 含义：                * -L：表示列出规则                * -n：表示将单词表达形式改成数字形式显示        5. 简单设置防火墙规则            * 例如：需要允许80端口通过防火墙，则规则可以用以下的命令来设置                * #iptables-A INPUT-p tcp--dport80 -j ACCEPT #允许访问80端口            * iptables：主命令                * -l：表示将规则放到最前面                * -A：add，添加规则                * INPUT：进站请求（出站output）                * -p：protocol，指定协议（icmp/tcp/udp）                * --dport：指定端口号                * -j：指定行为结果，允许(accept)/禁止（reject）            * 添加完成之后需要保存操作：                * /etc/init.d/iptables save                            6. rpm管理（重点）        * rpm的作用类似于windows上的电脑管家中“软件管理”等产品，主要作用是对linux服务器上的软件包进行对应管理操作。        * 管理分为：查询、卸载、安装。        1. 查询某个软件的安装情况            * #rpm-qa|grep 关键词            * 选项：                * -q：查询，query                * -a：全部，all                         2. 卸载某个软件            * rpm-e 软件的名称            * 当存在依赖关系的时候又不想去解决这个问题的时候可以：                * #rmp-e 软件包名 --nodeps        3. 软件的安装            * 软件包的获得方式：                * 去官网下载                * 不介意老版本的话，可以从光盘(或者镜像文件)中读取            * 扩展:光盘的挂载和解挂                * 解挂操作                    * 命令：#umount                    * 语法：#umount 当前设备的挂载点(路径)                * 挂载光盘                    * 命令：mount                    * 语法：#mount 设备原始地址 要挂载的位置路径                * 设备原始地址：地址统一都在/dev下，然后根据大小确定具体name值，拼凑在一起组成原始地址。例如：“/dev/sr0”                * 要挂载的位置路径：挂载目录一般都在mnt下，也可以在mnt下创建目录。如：“/mnt/dvd”            * 安装软件的命令：                * #rpm-ivh 软件包完整名称                    * 选项：                    * -i：install，安装                    * -v：显示进度条                    * -h：表示以“#形式显示进度条”    7. cron/crontab计划任务（重点）        * 作用：让操作系统在指定的时间去执行相应的任务        * 语法：#crontab 选项        * 常用选项：            * -l：lsit，列出指定用户的计划任务列表            * -e：edit，编辑指定用户的计划任务列表            * -u：user，指定的用户名，如果不指定，则表示当前用户            * -r：remove，删除指定用户的计划任务列表        1. 编辑计划任务（重点）            * 计划任务的规则语法格式，以行为单位，一行则为一个计划：                * 分 时 日 月 周 需要执行的命令                    * 例如：每天的0点0分执行reboot指令，则可以写成：                        * 0 0 * * * reboot                * 取值范围：                    * 分：0~59                    * 时：0~23                    * 日：1~31                    * 月：1~12                    * 周：0~6,0表示星期天                * 四个符号：                    * *：表示取值范围中的每一个数字                    * -：做连续区间表达式的，要想表示1~7，则可以写成：1-7                    * /：表示每多个,例如：想每10分钟一次，*/10                    * ,:表示多个取值            * Crontab 权限问题：本身是任何用户都可以创建自己的计划任务。            * 但是超级管理员可以通过配置来设置某些用户不允许设置计划任务                * 配置文件位于（黑名单）：                    * /etc/cron.deny  里面写用户名：一行一个                * 还有一个配置文件：(白名单)：                    * /etc/cron.allow (本身不存在，自己创建)                * 注意：白名单优先级高于黑名单，如果一个用户同时存在两个名单文件中，则会默认允许创建计划任务。7.Linux权限管理操作    1. 权限介绍        1. 什么是权限?            * 在多用户(可以不同时)计算机系统的管理中，权限是指某个特定的用户具有特定的系统资源使用权利。        2. 在Linux中分别有读、写、执行权限：            * 读权限：                * 对于文件夹来说，读权限影响用户是否能够列出目录结构                * 对于文件来说：读权限影响用户是否可以查看文件内容            * 写权限                * 对文件夹来说，写权限影响用户是否可以在文件夹下“创建/删除/复制到/移动到”文档                * 对于文件来说，写权限影响用户是否可以编辑文件内容            * 执行权限：                * 一般都对文件来说，特别脚本文件。    2. 身份介绍        * Owner身份（文件所有者，默认为文档的创建者）        * Group身份（与文件所有者同组的用户）        * Others身份（其他人）        * Root用户（超级用户）            * 在Linux中，还有一个神一样存在的用户，这就是root用户，因为在所有用户中它拥有最大的权限，所以管理着普通用户。    3. Linux的权限介绍        1. 要设置权限，就需要知道文件的一些基本属性和权限的分配规则。在Linux中，ls命令常用来查看文件的属性，用于显示文件的文件名和相关属性。            * #ls-l 路径 （ls-l 等价于 ll）            * Linux中存在用户、用户组和其他人的概念，各自有不同的权限，对于一个文档来说，其权限具体分配如下：            * drwxr-x---                * 十字符表示的含义：                    * 第1位：表示文档类型，取值常见的有“d表示文件夹”、“-表示文件”、“l表示软连接”等                    * 第2-4位：表示文档所有者的权限情况，第2位表示读权限的情况，取值有r、-;第3位表示写权限的情况，w表示可写，-表示不可写，第4位表示执行权限的情况，取值有x、-。                    * 第5-7位：表示与所有者同一个组的用户的权限情况，第5位表示读权限的情况，取值有r、-;第6位表示写权限的情况，w表示可写，-表示不可写，第7位表示执行权限的情况取值有x、-。                    * 第8-10位：表示除了上面的前2部分的用户之外的其他用户的权限情况，第8位表示读权限的情况，取值有r、-;第9位表示写权限的情况，w表示可写，第10位表示执行权限的情况，取值有x、-。                    * 权限分配中，均是rwx的三个参数组合，且位置顺序不会变化。没有对应权限就用 - 代替。    4. 权限设置        * 语法:#chmod 选项 权限模式 文档        * 注意事项：            * 常用选项：                * -R：递归设置权限（当文档类型为文件夹的时候）            * 权限模式：就是该文档需要设置的权限信息        * 文档：可以是文件，也可以是文件夹，可以是相对路径也可以是文件夹，可以是相对路径也可以是绝对路径。            * 注意：如果想要给文档设置权限，操作者要么是root用户，要么就是文档的所有者。        1. 字母形式            * 给谁设置：                * u：表示所有者身份 owner（user）                * g：表示给所有者同组用户设置（group）                * o：表示others，给其他用户设置权限                * a：表示all，给所有人（包含ugo部分）设置权限                    * 如果在设置权限的时候不指定给谁设置，则默认给所有用户设置            * 权限字符：                * r：读                * w：写                * x：表示执行            * 执行分配方式：                * +：表示给具体的用户新增权限（相对当前）                * -：表示删除用户的权限（相对当前）                * =：表示权限设置成具体的值（注重结果）                * 例如：如果某个文件什么权限都没有，可以使用root用户设置所有人都有执行权限，则可以写成：                    * #chmod +x 该文件                    * #chmod a=x 该文件                    * #chmod a+x 该文件                * 提示：当文档拥有执行权限，则其终端是绿色。        2. 数字形式            * 经常会有一些技术性的网页上看到类似于#chmod 777 a.txt 这样的一个权限，这种形式称之为数字形式权限(777)            * 读：r    4            * 写：w    2            * 执行：x  1            * 没有任何权限：0            * 数值        权限                        目录列表            * 0            不能读，不能写，不能执行        ---            * 1            不能读，不能写，可执行             --x            * 2            不能读，可写，不能执行             -w-            * 3            不能读，可写，可执行             -wx            * 4            可读，不可写，不可执行             w--            * 5            可读，不能写，可执行             r-x            * 6            可读，可写，不可执行             rw-            * 7            可读，可写，可执行                         rwx                        * 面试题：用超级管理员设置文档的权限命令是#chmod -R 731 aaa，请问这个命令有没有什么不合理地地方？                * 拥有者：7=4+2+1=读+写+执行                * 同组用户：3=2+1=写+执行（不能读怎么能写？）                * 其他用户：1=1=执行            * 注意：在写权限的时候千万不要设置类似于上面“奇葩的权限”。如果一个权限数字但凡出现2与3的数字，则该权限有不合理地情况。            * 注意事项：在Linux中，如果想要删除一个文件，不是看文件有没有对应的权限，而是看文件所在的目录是否有写权限，如果有才可以删除。    5. 属主与属组设置        * 属主：所属的用户(文件的主人)        * 属组：所属的用户组        * 这两项信息在文档创建的时候会使用创建者的信息（用户名、用户所属的主组名称）        * 如果有时候去删除某个用户，则该用户对应的文档的属主和属组信息就需要去修改。                1. chown            * 作用：更改文档所属用户            * 语法：#chown -R username 文档路径        2. chgrp（了解）            * 作用：更改文档的所属用户组            * 语法：#chgrp -R groupname 文档的路径            * 思考：如果通过一个命令实现既可以更改所属的用户，也可以修改所属的用户组呢？                * 可以实现的，通过chown命令                * 语法：#chown -R username:groupname 文档路径    6. 扩展        * 可以使用sudo（switch user do）命令来进行权限设置。sudo可以让管理员(root)事先定义某些特殊命令谁可以执行。        * 默认sudo中是没有除root之外用户的规则，要想使用规则先配置sudo        * sudo配置文件：/etc/sudoers            * 配置sudo文件请使用“#visudo”，打开之后其使用方法和vim一致            * 配置普通用户的权限                * Root 表示用户名                * ALL：表示允许登录的主机（地址白名单）                * (ALL):表示以谁的身份执行，ALL表示root身份                * ALL：表示当前用户可以执行的命令，多个命令可以使用“,”分割            * 注意：在写sudo规则的时候不建议写直接形式的命令，而是写命令的完整路径，路径可以使用which命令来查看                * 语法：#which 指令名称8.shell基础    1. 什么是shell        * Shell（外壳）是一个用C语言编写的程序，它是用户使用Linux的桥梁。Shell既是一种命令语言，又是一种程序设计语言。        * Shell是指一种用用程序，这个应用程序提供一个界面，用户通过这个界面访问操作系统内核的服务。    2. shell入门        * 编写规范：            * 代码规范：                * #!/bin/bash （指定告知系统当前这个脚本要使用的shell解释器）                * Shell相关指令            * 文件命名规范：                * 文件名.sh  .sh是linux下bash shell的默认后缀        * 使用流程：            * 创建.sh文件  touch/vim            * 编写shell代码            * 执行shell脚本  脚本必须得有执行权限        * 案例：创建test.sh，实现第一个shell脚本程序，输出hello world            * 输出命令：#echo 123            * 注意：输出的内容如果包含字母和符号（不包含变量），则需要用引号包括起来，如果是纯数字可以包可以不包。            * 注意：这里在运行时一定要写成./test.sh，而不是test.sh，运行其他二进制程序也一样，直接写test.sh,Linux系统会去PATH里寻找有没有叫test.sh的，而只有/bin,/sbin,/usr/sbin等在PATH里，你的当前目录通常不在PATH里，所以写成test.sh是会找不到命令的，用./test.sh告诉系统说，就在当前目录寻找。                    3. shell进阶（重点）        1. 变量（重点）            * 在一个脚本周期内，其值可以发生改变的量就是变量。            * 一个脚本周期：一个脚本周期我们可以简单理解为当前的shell文件            * 变量是shell中不可或缺的一部分，也是最基础、最重要的组成部分。        2. 变量的定义和使用（重点）            * 先定义后使用            * 变量名的规范                * 注意：变量名后面的等号左右不能有空格，这可能和你熟悉的所有编程语言都不一样。                * 规则：                    * 命名只能使用英文字母、数字和下划线，首个字母不能以数字开头。                    * 中间不能有空格，可以使用下划线                    * 不能使用标点符号                    * 不能使用bash里的关键字（可用help命令查看保留关键字）            * 关于单双引号的问题：                * 双引号能够识别变量，双引号能够实现转义                * 单引号是不能识别变量，只会原样输出，单引号是不能转义的            * 注意：反引号（esc键下方的那个键），当在脚本中需要执行一些指令并且将执行的结果赋给变量的时候需要使用“反引号”        3. 只读变量（了解）            * 语法：readonly 变量名        4. 接收用户输入（重点）            * 语法：read =p 提示信息 变量名        5. 删除变量（了解）            * 语法：unset 变量名        6. shell脚本附带选项（重点）            * 问题：自己写的shell是否可以像内置命令一样传递一些选项呢？                * 可以的，传递方式与上述的描述是一样的，关键是怎么接收。                * 传递：                    * #./test.sh a b c                * 接收：                    * 在脚本中可以用&quot;$1&quot;来表示a，&quot;$2&quot;来表示b，以此类推</code></pre><p>​        </p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Linux&quot;&gt;&lt;a href=&quot;#Linux&quot; class=&quot;headerlink&quot; title=&quot;Linux&quot;&gt;&lt;/a&gt;Linux&lt;/h3&gt;</summary>
    
    
    
    <category term="Linux基础" scheme="http://example.com/categories/Linux%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring</title>
    <link href="http://example.com/2021/08/02/Spring/"/>
    <id>http://example.com/2021/08/02/Spring/</id>
    <published>2021-08-02T09:01:01.000Z</published>
    <updated>2021-08-13T03:25:11.017Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><span id="more"></span><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 框架怎么学：框架是一个软件，其他人写好的软件</span><br><span class="line"><span class="bullet">1.</span> 知道框架能做什么，mybatis--访问数据库，对表中的数据进行增删改查</span><br><span class="line"><span class="bullet">2.</span> 框架的语法，框架要完成一个功能，需要一定的步骤的支持的</span><br><span class="line"><span class="bullet">3.</span> 框架的内部实现，框架内部怎么做，原理是什么</span><br><span class="line"><span class="bullet">4.</span> 通过学习，可以实现一个框架</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 什么是spring</span><br><span class="line"><span class="bullet">*</span> 是一个框架，核心技术是ioc，aop，实现解耦合</span><br><span class="line"><span class="bullet">*</span> spring是一个容器，容器中存放的是java对象，需要做的是把对象放入到容器中</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> 怎么使用spring</span><br><span class="line"><span class="bullet">*</span> spring是一个容器，把项目中用的对象放入到容器中</span><br><span class="line"><span class="bullet">*</span> 让容器完成对象的创建，对象之间关系的管理(属性赋值)</span><br><span class="line"><span class="bullet">*</span> 我们在程序中从容器中获取 要使用的对象</span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> 什么样的对象放入容器中</span><br><span class="line"><span class="bullet">*</span> dao类，service类，controller类，工具类（1.使用xml配置文件，使用<span class="xml"><span class="tag">&lt;<span class="name">bean</span>&gt;</span></span>  2.注解）</span><br><span class="line"><span class="bullet">*</span> spring中的对象默认都是单例的，在容器中叫这个名称的对象只有一个</span><br><span class="line"></span><br><span class="line"><span class="bullet">5.</span> 不放入到spring容器中的对象</span><br><span class="line"><span class="bullet">*</span> 实体类对象，实体类数据来自数据库的</span><br><span class="line"><span class="bullet">*</span> servlet，listener，filter等</span><br><span class="line"></span><br><span class="line"><span class="bullet">6.</span> 使用spring框架的步骤</span><br><span class="line"><span class="bullet">1.</span> 加入依赖</span><br><span class="line"><span class="bullet">2.</span> 创建类：接口，实现类，没有接口的类</span><br><span class="line"><span class="bullet">3.</span> 创建spring的配置文件，使用<span class="xml"><span class="tag">&lt;<span class="name">bean</span>&gt;</span></span>声明对象</span><br><span class="line"><span class="bullet">4.</span> 我们使用容器中的对象，通过AppliacationContext接口和它的实现类ClassPathXmlApplicationContext的方法getBean()</span><br></pre></td></tr></table></figure><h3 id="一-Spring的第一个核心功能-IOC"><a href="#一-Spring的第一个核心功能-IOC" class="headerlink" title="一.Spring的第一个核心功能 IOC"></a>一.Spring的第一个核心功能 IOC</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> IoC(Inversion of Control)：控制反转，是一个理论，概念，思想。</span><br><span class="line"><span class="bullet">*</span> 把对象的创建、赋值，管理工作都交给代码之外的容器实现，也就是对象的创建是有其它外部资源完成。</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 控制：创建对象，对象的属性赋值，对象之间的关系管理。</span><br><span class="line"><span class="bullet">*</span> 反转：把原来的开发人员管理，创建对象的权限转移给代码之外的容器实现。由容器代替开发人员管理对象。创建对象，给属性赋值。</span><br><span class="line"><span class="bullet">*</span> 正转：由开发人员在代码中，使用new 构造方法创建对象，开发人员主动管理对象。</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 容器：是一个服务器软件，一个框架(spring)</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 为什么要使用ioc：目的就是减少对代码的改动，也能实现不同的功能，实现解耦合</span><br><span class="line"><span class="bullet">3.</span> java中创建对象有哪些方式：</span><br><span class="line"><span class="bullet">*</span> 构造方法，new Student()</span><br><span class="line"><span class="bullet">*</span> 反射</span><br><span class="line"><span class="bullet">*</span> 序列化</span><br><span class="line"><span class="bullet">*</span> 克隆</span><br><span class="line"><span class="bullet">*</span> ioc：容器创建对象</span><br><span class="line"><span class="bullet">*</span> 动态代理</span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> ioc的体现：</span><br><span class="line"><span class="bullet">*</span> servlet </span><br><span class="line"><span class="bullet">*</span> 创建类继承HttpServlet</span><br><span class="line"><span class="bullet">*</span> 在web.xml 注册servlet</span><br><span class="line"><span class="bullet">*</span> 没有创建Servlet对象</span><br><span class="line"><span class="bullet">*</span> Servelt 是Tomcat服务器它给你创建的。Tomcat也称为容器</span><br><span class="line"><span class="bullet">*</span> Tomcat作为容器：里面存放的有Servlet对象，Listener，Filter对象</span><br><span class="line"></span><br><span class="line"><span class="bullet">5.</span> IoC的技术实现：</span><br><span class="line"><span class="bullet">*</span> DI 是ioc的技术实现</span><br><span class="line"><span class="bullet">*</span> DI（Dependency Injection）：依赖注入，只需要在程序中提供要使用的对象名称就可以，至于对象如何在容器中创建、赋值、查找都由容器内部实现。</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> spring是使用di实现了ioc的功能，spring底层创建对象，使用的是反射机制。</span><br><span class="line"></span><br><span class="line"><span class="bullet">6.</span> di：依赖注入，表示创建对象，给属性赋值。</span><br><span class="line"><span class="bullet">1.</span> di的实现有两种：</span><br><span class="line"><span class="bullet">*</span> 在spring的配置文件中，使用标签和属性完成，叫做基于XML的di实现</span><br><span class="line"><span class="bullet">*</span> 使用spring中的注解，完成属性赋值，叫做基于注解的di实现</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> di的语法分类：</span><br><span class="line"><span class="bullet">*</span> set注入（设值注入）：spring调用类的set方法，在set方法可以实现属性的赋值，80%左右都是使用的set注入    </span><br><span class="line"><span class="bullet">*</span> 构造注入：spring调用类的有参数构造方法，创建对象。在构造方法中完成赋值。</span><br><span class="line"><span class="bullet">*</span> 自动注入：由spring根据某些规则，给引用类型完成赋值，常用的有byName，byType</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">3. di：给属性赋值</span></span><br><span class="line"><span class="code">        简单类型：spring中规定java的基本数据类型和String都是简单类型</span></span><br><span class="line"><span class="code">       1. set注入（设值注入）：spring调用类的set方法，你可以在set方法中完成属性赋值</span></span><br><span class="line"><span class="code">         * 简单类型的set注入</span></span><br><span class="line"><span class="code">            &lt;bean id=&quot;xx&quot; class&quot;yyy&quot;&gt;</span></span><br><span class="line"><span class="code">            &lt;property name=&quot;属性名字&quot; value=&quot;此属性的值&quot;/&gt;</span></span><br><span class="line"><span class="code">            一个property只能给一个属性赋值</span></span><br><span class="line"><span class="code">            &lt;property...&gt;</span></span><br><span class="line"><span class="code">            &lt;/bean&gt;</span></span><br><span class="line"><span class="code">* 引用类型的set注入：spring调用类的set方法</span></span><br><span class="line"><span class="code">            &lt;bean id=&quot;xxx&quot; class=&quot;yyy&quot;&gt;</span></span><br><span class="line"><span class="code">            &lt;property name=&quot;属性名称&quot; ref=&quot;bean的id(对象的名称)&quot;/&gt;</span></span><br><span class="line"><span class="code">            &lt;/bean&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">* 注意：需要有set方法，没有set方法是会报错的</span></span><br><span class="line"><span class="code">* 此属性的值要用双引号(&quot;&quot;)包裹，这是xml文件的规则</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span> 构造注入：spring调用类有参数构造方法，在创建对象的同时，在构造方法中给属性赋值。</span><br><span class="line"><span class="bullet">*</span> 构造注入使用 <span class="xml"><span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span>标签</span><br><span class="line"><span class="code">           &lt;constructor-arg&gt;标签：一个 &lt;constructor-arg&gt;表示构造方法一个参数。</span></span><br><span class="line"><span class="code">           &lt;constructor-arg&gt;标签属性：</span></span><br><span class="line"><span class="code">                name:表示构造方法的形参名</span></span><br><span class="line"><span class="code">                index：表示构造方法的参数的位置，参数从左往右位置是0，1，2的顺序</span></span><br><span class="line"><span class="code">                value：构造方法的形参类型是简单类型的，使用value</span></span><br><span class="line"><span class="code">                ref：构造方法的形参是引用类型的，使用ref</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">3. 自动注入：由spring根据某些规则，给引用类型完成赋值，常用的有byName，byType</span></span><br><span class="line"><span class="code">* byName：按名称注入，java类中引用类型的属性名和spring容器中的【id】一样，数据类型一样。这样的bean赋值给引用类型</span></span><br><span class="line"><span class="code">* byType：按类型注入，java类中引用类型的叫【数据类型】和spring容器中bean的【class】是同源关系，这样的bean能够赋值给引用类型</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">7.</span> 常用注解</span><br><span class="line"><span class="bullet">1.</span> @Component</span><br><span class="line"><span class="bullet">*</span> 创建对象的，等同于<span class="xml"><span class="tag">&lt;<span class="name">bean</span>&gt;</span></span>的功能 属性：value 就是对象的名称，也就是bean的id值</span><br><span class="line"><span class="bullet">*</span> value的值是唯一的，创建的对象在整个spring容器中就一个</span><br><span class="line"><span class="bullet">*</span> @Component(value = &quot;myStudent&quot;)等同于<span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myStudent&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.ba01.Student&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">2. spring中和@Component功能一致，创建对象的注解还有：</span></span><br><span class="line"><span class="code"> 1. @Repository（用在持久层类的上面）：放在dao的实现类上面表示创建dao对象，dao对象是能访问数据库的</span></span><br><span class="line"><span class="code"> 2. @Service（用在业务层类的上面）：放在service的实现类上面，创建service对象，service对象是做业务处理的，可以有事务等功能的。</span></span><br><span class="line"><span class="code"> 3. @Controller（用在控制器的上面）：放在控制器(处理器)类的上面，创建控制器对象的，控制器对象，能够接受用户提交的参数，显示请求的处理结果。</span></span><br><span class="line"><span class="code"> </span></span><br><span class="line"><span class="code">3. @Value:简单类型的属性赋值</span></span><br><span class="line"><span class="code">  * 属性：value 是string类型的，表示简单类型的属性值</span></span><br><span class="line"><span class="code">  * 位置：</span></span><br><span class="line"><span class="code">  * 在属性定义的上面，无需set方法，推荐使用  </span></span><br><span class="line"><span class="code">  * 在set方法的上面</span></span><br><span class="line"><span class="code">4. @Autowired:spring框架中引用类型的赋值注解，支持byName，byType，默认是byType</span></span><br><span class="line"><span class="code">* 位置：</span></span><br><span class="line"><span class="code">  * 在属性定义的上面，无需set方法，推荐使用  </span></span><br><span class="line"><span class="code">  * 在set方法的上面</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> 如果要是用byName，需要做的是：</span><br><span class="line"><span class="bullet">*</span> 在属性上面加入@Autowired</span><br><span class="line"><span class="bullet">*</span> 在属性上面加入@Qualifier(value=&quot;bean的id&quot;):表示使用指定名称的bean完成赋值</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 属性：required，是一个boolean类型的，默认true</span><br><span class="line"><span class="bullet">*</span> required = true：表示引用类型赋值失败，程序报错，并且终止运行。</span><br><span class="line"><span class="bullet">*</span> required = false：引用类型如果赋值失败，程序正常执行，引用类型是null</span><br><span class="line"><span class="bullet">*</span> 推荐使用true 可以帮助我们检查程序是否有错</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">5. @Resource:jdk中的注解</span></span><br><span class="line"><span class="code">1. spring框架提供了对这个注解的功能支持，可以使用它给的引用类型赋值</span></span><br><span class="line"><span class="code">2. 使用的也是自动注入原理，支持byName，buType，默认是byName</span></span><br><span class="line"><span class="code">* 默认是byName：先使用byName自动注入，如果byName赋值失败，再使用byType</span></span><br><span class="line"><span class="code">3. 位置：</span></span><br><span class="line"><span class="code">* 在属性定义的上面，无需set方法，推荐使用  </span></span><br><span class="line"><span class="code">  * 在set方法的上面</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">6. 注解的使用步骤：</span></span><br><span class="line"><span class="code">1. 加入依赖：spring-context，间接加入spring-aop</span></span><br><span class="line"><span class="code">2. 在类中加入注解</span></span><br><span class="line"><span class="code">3. 在spring的配置文件中，加入组件扫描器的标签  &lt;context:component-scan base-package=&quot;包名&quot;/&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">8.</span> ioc能够实现解耦合：</span><br><span class="line"><span class="bullet">*</span> ioc能够实现业务对象之间的解耦合，例如service和dao对象之间的解耦合</span><br></pre></td></tr></table></figure><h3 id="二-spring的第二个核心功能AOP"><a href="#二-spring的第二个核心功能AOP" class="headerlink" title="二.spring的第二个核心功能AOP"></a>二.spring的第二个核心功能AOP</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 动态代理</span><br><span class="line"><span class="bullet">*</span> 实现方式;</span><br><span class="line"><span class="bullet">1.</span> jdk动态代理</span><br><span class="line"><span class="bullet">*</span> 使用jdk中的Proxy，Method，InvocationHandler创建代理对象</span><br><span class="line"><span class="bullet">*</span> jdk动态代理要求目标类必须实现接口</span><br><span class="line"><span class="bullet">2.</span> cglib动态代理</span><br><span class="line"><span class="bullet">*</span> 第三方的工具库，创建代理对象，原理是继承。通过继承目标类，创建子类，子类就是代理对象。</span><br><span class="line"><span class="bullet">*</span> 要求目标类不能是final的，方法不能是final的</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 动态代理的作用</span><br><span class="line"><span class="bullet">1.</span> 在目标类源代码不改变的情况下，增加功能</span><br><span class="line"><span class="bullet">2.</span> 减少代码的重复</span><br><span class="line"><span class="bullet">3.</span> 专注于业务逻辑</span><br><span class="line"><span class="bullet">4.</span> 解耦合，让你的业务功能和日志，事务非业务功能分离</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">* 什么时候考虑用aop技术</span></span><br><span class="line"><span class="code">* 当你要给一个系统中存在的类修改功能，但是原有类的功能不完善，但是你没有源代码，使用aop就增加功能</span></span><br><span class="line"><span class="code">* 你要给项目中的多个类，增加一个相同的功能，使用aop</span></span><br><span class="line"><span class="code">* 给业务方法增加事务，日志输出</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3.</span> Aop：面向切面编程，基于动态代理的，可以使用jdk，cglib两种代理方式。</span><br><span class="line"><span class="bullet">*</span> Aop就是动态代理的规范化，把动态代理的实现步骤，方式都定义好，让开发人员用一种统一的方式，使用动态代理。</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"> 4. AOP(Aspect Orient Programming) 面向切面编程</span></span><br><span class="line"><span class="code">  * Aspect：切面，给你的目标类增加的功能，就是切面。像上面用的日志，事务都是切面</span></span><br><span class="line"><span class="code">  * 切面的特点：一般都是非业务方法，独立使用的。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">* 怎么理解面向切面编程</span></span><br><span class="line"><span class="code">* 需要在分析项目功能时，找出切面</span></span><br><span class="line"><span class="code">* 合理的安排切面的执行时间(在目标方法之前，还是目标方法之后)</span></span><br><span class="line"><span class="code">* 合理的安全切面执行的位置，在哪个类，哪个方法增加增强功能</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">* 术语：</span></span><br><span class="line"><span class="code">* Aspect：切面，表示增强的功能，就是一堆代码，完成某一个功能。非业务功能</span></span><br><span class="line"><span class="code">* 常见的业务功能有日志，事务，统计信息等</span></span><br><span class="line"><span class="code">* JoinPoint：连接点，连接业务方法和切面的位置。就是某类中的业务方法</span></span><br><span class="line"><span class="code">* Pointcut：切入点，指多个连接点方法的集合。多个方法</span></span><br><span class="line"><span class="code">* 目标对象：给哪个类的方法增加功能，这个类就是目标对象</span></span><br><span class="line"><span class="code">* Advice：通知，通知表示切面功能执行的时间。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> 切面的三要素：</span><br><span class="line"><span class="bullet">1.</span> 切面的功能代码，切面干什么的</span><br><span class="line"><span class="bullet">2.</span> 切面的执行位置，使用Pointcut表示切面执行的位置</span><br><span class="line"><span class="bullet">3.</span> 切面的执行时间，使用Advice表示时间，在目标方法之前，还是目标方法之后。</span><br><span class="line"></span><br><span class="line"><span class="bullet">5.</span> aop的实现</span><br><span class="line"><span class="bullet">*</span> aop是一个规范，是动态代理的一个规范化，一个标准</span><br><span class="line"><span class="bullet">*</span> aop的技术实现框架：</span><br><span class="line"><span class="bullet">1.</span> spring：spring在内部实现了aop规范，能有aop工作。</span><br><span class="line"><span class="bullet">*</span> spring主要在事务处理时使用aop</span><br><span class="line"><span class="bullet">*</span> 我们项目开发中很少使用spring的aop实现。因为spring的aop比较笨重。</span><br><span class="line"><span class="bullet">2.</span> aspectJ：一个开源的专门做aop的框架。spring框架中集成了aspectJ框架，通过spring就能使用aspectJ的功能</span><br><span class="line"><span class="bullet">*</span> aspectJ框架实现aop有两种方式：</span><br><span class="line"><span class="bullet">1.</span> 使用xml的配置文件：配置全局事务</span><br><span class="line"><span class="bullet">2.</span> 使用注解，我们在项目中要做aop功能，一般都使用注解，aspectJ有5个注解。</span><br><span class="line"></span><br><span class="line"><span class="bullet">6.</span> aspectj框架的使用</span><br><span class="line"><span class="bullet">1.</span> 表示切面执行时间，使用的通知注解</span><br><span class="line"><span class="bullet">*</span> @Before：前置通知，在目标方法之前先执行切面的功能</span><br><span class="line"><span class="bullet">2.</span> 表示切面位置的切入点表达式：execution(访问修饰符 返回值 包名.类名.方法名称(方法的参数) 异常）)</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">7. 常用注解：</span></span><br><span class="line"><span class="code">1. @Aspect: 是aspectj框架中的注解</span></span><br><span class="line"><span class="code">* 作用：表示当前类是切面类。</span></span><br><span class="line"><span class="code">* 切面类：是用来给业务方法增加功能的类，在这个类中有切面的功能代码</span></span><br><span class="line"><span class="code">* 位置：在类定义的上面</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> 定义方法，方法是实现切面功能的</span><br><span class="line"><span class="bullet">*</span> 方法的定义要求：</span><br><span class="line"><span class="bullet">*</span> 公共方法 public</span><br><span class="line"><span class="bullet">*</span> 方法没有返回值</span><br><span class="line"><span class="bullet">*</span> 方法名称自定义</span><br><span class="line"><span class="bullet">*</span> 方法可以有参数，也可以没有参数。如果没有参数，参数不是自定义的，有几个参数类型可以使用。</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">2. @Before：前置通知注解</span></span><br><span class="line"><span class="code">* 属性：value，是切入点表达式，表示切面的功能执行的位置。</span></span><br><span class="line"><span class="code">* 位置：在方法的上面</span></span><br><span class="line"><span class="code">* 特点：</span></span><br><span class="line"><span class="code">* 在目标方法之前先执行的</span></span><br><span class="line"><span class="code">* 不会改变目标方法的执行结果</span></span><br><span class="line"><span class="code">* 不会影响目标方法的执行</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">指定通知方法中的参数：JoinPoint</span></span><br><span class="line"><span class="code">* JoinPoint：业务方法，要加入切面功能的业务方法</span></span><br><span class="line"><span class="code">* 作用是：可以在通知方法中获取方法执行时的信息，例如方法名称，方法的实参。</span></span><br><span class="line"><span class="code">* 如果你的切面功能中需要用到方法的信息，就加入JoinPoint</span></span><br><span class="line"><span class="code">* 这个JoinPoint参数的值是由框架赋予，必须是第一个位置的参数</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3.</span> @AfterReturning: 后置通知</span><br><span class="line"><span class="bullet">*</span> 后置通知定义方法，方法是实现切面功能的</span><br><span class="line"><span class="bullet">*</span> 方法的定义要求：</span><br><span class="line"><span class="bullet">*</span> 公共方法 public</span><br><span class="line"><span class="bullet">*</span> 方法没有返回值</span><br><span class="line"><span class="bullet">*</span> 方法名称自定义</span><br><span class="line"><span class="bullet">*</span> 方法是有参数的,推荐是Object，参数名自定义</span><br><span class="line"><span class="bullet">*</span> 属性：1.value： 切入点表达式  2。returning 自定义的变量,表示目标方法的返回值的。</span><br><span class="line"><span class="bullet">*</span> 位置：在方法定义的上面</span><br><span class="line"><span class="bullet">*</span> 特点：</span><br><span class="line"><span class="bullet">*</span> 在目标方法之后执行的</span><br><span class="line"><span class="bullet">*</span> 能够获取到目标方法的返回值，可以根据这个返回值做不同的处理功能</span><br><span class="line"><span class="bullet">*</span> 可以修改这个返回值</span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> @Around: 环绕通知</span><br><span class="line"><span class="bullet">*</span> 环绕通知方法的定义格式：</span><br><span class="line"><span class="bullet">*</span> public</span><br><span class="line"><span class="bullet">*</span> 必须有一个返回值，推荐使用Object</span><br><span class="line"><span class="bullet">*</span> 方法名称自定义</span><br><span class="line"><span class="bullet">*</span> 方法有参数，固定的参数 ProceedingJoinPoint</span><br><span class="line"><span class="bullet">*</span> 属性：value 切入点表达式</span><br><span class="line"><span class="bullet">*</span> 位置：在方法的定义上面</span><br><span class="line"><span class="bullet">*</span> 特点：</span><br><span class="line"><span class="bullet">*</span> 它是功能最强的通知</span><br><span class="line"><span class="bullet">*</span> 在目标方法的前和后都能增强功能</span><br><span class="line"><span class="bullet">*</span> 控制目标方法是否被调用执行</span><br><span class="line"><span class="bullet">*</span> 修改原来的目标方法的执行结果。影响最后的调用结果</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">* 环绕通知，等同于jdk动态代理的 InvocationHandler接口</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">* 参数：ProceedingJoinPoint 就等同于 Method</span></span><br><span class="line"><span class="code">* 作用：执行目标方法</span></span><br><span class="line"><span class="code">* 返回值：就是目标方法的执行结果，可以被修改</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> 环绕通知：经常做事务，在目标方法之前开启事务，执行目标方法，在目标方法之后提交事务</span><br></pre></td></tr></table></figure><h3 id="三-把mybatis框架和spring集成在一起，像一个框架一样使用"><a href="#三-把mybatis框架和spring集成在一起，像一个框架一样使用" class="headerlink" title="三. 把mybatis框架和spring集成在一起，像一个框架一样使用"></a>三. 把mybatis框架和spring集成在一起，像一个框架一样使用</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 用的技术是：ioc</span><br><span class="line"><span class="bullet">*</span> 为什么用ioc：</span><br><span class="line"><span class="bullet">*</span> 因为ioc能创建对象，可以把mybatis框架中的对象交给spring统一创建</span><br><span class="line"><span class="bullet">*</span> 开发人员从spring中获取对象，就不用同时面对两个或多个框架了，就面对一个spring</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> mybatis使用步骤，对象</span><br><span class="line"><span class="bullet">1.</span> 定义dao接口，StudentDao</span><br><span class="line"><span class="bullet">2.</span> 定义mapper文件 StudentDao.xml</span><br><span class="line"><span class="bullet">3.</span> 定义mybatis的主配置文件 mybatis.xml</span><br><span class="line"><span class="bullet">4.</span> 创建dao的代理对象</span><br><span class="line"><span class="bullet">*</span> StudentDao dao = sqlSession.getMapper(StudentDao.class);</span><br><span class="line"><span class="bullet">*</span>  List<span class="xml"><span class="tag">&lt;<span class="name">Student</span>&gt;</span></span> students = dao.selectStudent();</span><br><span class="line"></span><br><span class="line"><span class="bullet">5.</span> 要使用dao对象，需要使用getMapper()方法</span><br><span class="line"><span class="bullet">1.</span> 获取SqlSession对象，需要使用SqlSessionFactory的openSession()方法</span><br><span class="line"><span class="bullet">2.</span> 创建SqlSessionFactory对象。通过读取mybatis的主配置文件，能创建SqlSessionFactory对象</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 需要使SqlSessionFactory对象，使用Factory能获取SqlSession，有了SqlSession就能有dao</span><br><span class="line"><span class="bullet">*</span> 目的就是获取到对象Factory创建需要读取主配置文件</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 注意：我们会使用独立的连接池替换mybatis默认的自带的，把连接池类也交给spring创建</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 主配置文件：</span><br><span class="line"><span class="bullet">*</span> 数据库信息</span><br><span class="line"><span class="bullet">*</span> mapper文件的位置</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> 通过以上的说明，我们需要让spring创建以下对象</span><br><span class="line"><span class="bullet">1.</span> 独立的连接池类的对象，使用阿里的druid连接池</span><br><span class="line"><span class="bullet">*</span> 数据源DataSource</span><br><span class="line"><span class="bullet">2.</span> SqlSessionFactory对象</span><br><span class="line"><span class="bullet">*</span> 使用的SqlSessionFactoryBean在内部创建的SqlSessionFactory</span><br><span class="line"><span class="bullet">3.</span> 创建dao对象</span><br><span class="line"><span class="bullet">*</span> dao代理对象，使用的MapperScannConfigure，在这个类的内部，调用getMapper()，创建接口的Dao对象</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">* 需要学习就是上面三个对象的创建语法，使用xml的bean标签</span></span><br></pre></td></tr></table></figure><h3 id="四-spring的事务处理"><a href="#四-spring的事务处理" class="headerlink" title="四. spring的事务处理"></a>四. spring的事务处理</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 什么是事务</span><br><span class="line"><span class="bullet">*</span> 事务是一组sql语句的集合，集合中有多条sql语句，可能是insert，update，select等</span><br><span class="line"><span class="bullet">*</span> 我们希望这些多个sql语句都能成功，或者失败，这些sql语句的执行是一致的，作为一个整体执行</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 什么时候想到使用事务</span><br><span class="line"><span class="bullet">*</span> 当我的操作涉及多个表，或者是多个sql语句的insert，update，delete。</span><br><span class="line"><span class="bullet">*</span> 需要保证这些语句都是成功才能完成我的功能，或者都失败，保证操作是符合要求的。</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 在java代码中写程序，控制事务，此时事务应该放在哪里？</span><br><span class="line"><span class="bullet">*</span> service类的业务方法上，因为业务方法会调用多个dao方法，执行多个sql语句</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> 通常使用JDBC访问数据库，还是mybatis访问数据库怎么处理事务</span><br><span class="line"><span class="bullet">*</span> JDBC访问数据库，处理事务  Connection conn;conn.commit();conn.rollback();</span><br><span class="line"><span class="bullet">*</span> mybatis访问数据库，处理事务 SqlSession.commit(); SqlSession.rollback();</span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> 3问题中事务的处理方式，有什么不足</span><br><span class="line"><span class="bullet">1.</span> 不同的数据库访问技术，处理事务的对象，方法不同，需要了解不同数据库访问技术使用事务的原理</span><br><span class="line"><span class="bullet">2.</span> 掌握多种数据库中事务的处理逻辑。什么时候提交事务，什么时候回顾事务</span><br><span class="line"><span class="bullet">3.</span> 处理事务的多种方法</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 总结：就是多种数据库的访问技术，有不同的事务处理的机制，对象，方法</span><br><span class="line"></span><br><span class="line"><span class="bullet">5.</span> 怎么解决不足</span><br><span class="line"><span class="bullet">*</span> spring提供一种处理事务的统一模型，能使用统一的步骤，方式完成多种不同数据库访问技术的事务处理</span><br><span class="line"></span><br><span class="line"><span class="bullet">6.</span> 处理事务需要怎么做，做什么</span><br><span class="line"><span class="bullet">*</span> spring处理事务的模型，使用的步骤都是固定的。把事务使用的信息提供给spring就可以了</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">1. 内部事务提交，回滚事务，使用的事务管理器对象，代替你完成commit，rollback</span></span><br><span class="line"><span class="code">2. 事务管理器是一个接口和它的众多实现类</span></span><br><span class="line"><span class="code">* 接口：PlatformTransactionManager，定义了事务重要方法 commit，rollback</span></span><br><span class="line"><span class="code">* 实现类：spring把每一种数据库访问技术对应的事务处理类都创建好了</span></span><br><span class="line"><span class="code">* mybatis访问数据库---spring创建好的是DataSourceTransactionManager</span></span><br><span class="line"><span class="code">* hibernate访问数据库---spring创建好的是HibernateTransactionManagr</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> 怎么使用：你需要告诉spring 你用的是哪种数据库的访问技术，怎么告诉spring呢？</span><br><span class="line"><span class="bullet">*</span> 声明数据库访问技术对应的事务管理器实现类，在spring的配置文件中使用<span class="xml"><span class="tag">&lt;<span class="name">bean</span>&gt;</span></span>声明就可以了</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">3. 你的业务方法需要什么样的事务，说明需要事务的类型</span></span><br><span class="line"><span class="code">1. 说明方法需要的事务：</span></span><br><span class="line"><span class="code">* 事务的隔离级别</span></span><br><span class="line"><span class="code">* 事务的超时时间</span></span><br><span class="line"><span class="code">* 表示一个方法最长的执行时间，如果方法执行时超过了时间，事务就会回滚。</span></span><br><span class="line"><span class="code">* 单位是秒，整数值，默认是-1</span></span><br><span class="line"><span class="code">* 事务的传播行为</span></span><br><span class="line"><span class="code">* 控制业务方法是不是有事务的，是什么样的事务的</span></span><br><span class="line"><span class="code">* 表示你的业务方法调用时，事务在方法之间是如何使用的</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">4.</span> 事务提交事务，回滚事务的时机</span><br><span class="line"><span class="bullet">1.</span> 当你的业务方法，执行成功，没有异常抛出，当方法执行完毕，spring在方法执行后提交事务。事务管理器commit</span><br><span class="line"><span class="bullet">2.</span> 当你的业务方法抛出运行时异常或ERROR,spring执行回滚，调用事务管理器rollback</span><br><span class="line"><span class="bullet">*</span> 运行时异常的定义：RuntimeException 和它的子类都是运行时异常</span><br><span class="line"><span class="bullet">3.</span> 当你的业务方法抛出非运行异常时，主要是受查异常时，提交事务</span><br><span class="line"><span class="bullet">*</span> 受查异常：在你写代码中，必须处理的异常。例如IOException，SQLException</span><br><span class="line"></span><br><span class="line"><span class="bullet">7.</span> 总结spring事务</span><br><span class="line"><span class="bullet">1.</span> 管理事务的是 事务管理器和它的实现类</span><br><span class="line"><span class="bullet">2.</span> spring的事务是一个统一模型</span><br><span class="line"><span class="bullet">*</span> 指定要使用的事务管理器的类型，使用<span class="xml"><span class="tag">&lt;<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="bullet">*</span> 指定哪些类，哪些方法需要加入事务的功能</span><br><span class="line"><span class="bullet">*</span> 指定方法需要的隔离级别，传播行为，超时</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">8.</span> spring框架中提供的事务处理方案</span><br><span class="line"><span class="bullet">1.</span> 适合中小项目使用的，注解方案</span><br><span class="line"><span class="bullet">*</span> spring框架自己用aop实现给业务方法增加事务的功能，使用@Transactional注解增加事务。</span><br><span class="line"><span class="bullet">*</span> @Transactional注解是spring框架自己注解，方法public方法的上面，表示当前方法具有事务</span><br><span class="line"><span class="bullet">*</span> 可以给注解的属性赋值，表示具体的隔离级别，传播行为，异常信息等等</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">2. 使用@Transactional的步骤：</span></span><br><span class="line"><span class="code">1. 需要声明事务管理器对象</span></span><br><span class="line"><span class="code">* &lt;bean id=&quot;xx&quot; class=&quot;DataSourceTransactionManager&quot;&gt;</span></span><br><span class="line"><span class="code">2. 开启事务注解驱动，告诉spring框架，我要使用注解的方式管理事务。</span></span><br><span class="line"><span class="code">* spring使用aop机制，创建@Transactional所在的类的代理对象，给方法加入事务的功能。</span></span><br><span class="line"><span class="code">* spring给业务方法加入事务:</span></span><br><span class="line"><span class="code">* 在你的业务方法执行之前，先开启事务，在业务方法之后提交或回滚事务，使用aop的环绕通知</span></span><br><span class="line"><span class="code">3. 在你的方法的上面加入@Transactional</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">* rollbackFor:表示发生异常一定回滚</span></span><br><span class="line"><span class="code">          * 处理逻辑是：</span></span><br><span class="line"><span class="code">           1）spring框架会首先检查方法抛出的异常是不是在rollbackFor的属性值中</span></span><br><span class="line"><span class="code">               如果异常在rollbackFor列表中，不管是什么类型的异常，一定回滚</span></span><br><span class="line"><span class="code">           2）如果你的抛出的异常不在rollbackFor列表中，spring会判断异常是不是RuntimeException，</span></span><br><span class="line"><span class="code">               如果是一定回滚。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">* @Transactional(</span></span><br><span class="line"><span class="code">            propagation = Propagation.REQUIRED,</span></span><br><span class="line"><span class="code">            isolation = Isolation.DEFAULT,</span></span><br><span class="line"><span class="code">            readOnly = false,</span></span><br><span class="line"><span class="code">            rollbackFor = &#123;</span></span><br><span class="line"><span class="code">                    NullPointerException.class, NotEnoughException.class</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">4.</span> @Transactional 可以直接使用，不需要上面的那些指定</span><br><span class="line"><span class="bullet">*</span> 使用的是事务控制的默认值，默认的传播行为是REQUIRED，默认的隔离级别DEFAULT</span><br><span class="line"><span class="bullet">*</span> 默认抛出运行时异常，回滚事务</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> 适合大型项目</span><br><span class="line"><span class="bullet">*</span> 有很多的类，方法，需要大量的配置事务，使用aspectj框架功能</span><br><span class="line"><span class="bullet">*</span> 在spring配置文件中声明类，方法需要的事务。这种方式业务方法和事务配置完全分离。</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 实现步骤：都是在xml文件中实现</span><br><span class="line"><span class="bullet">1.</span> 要使用的是aspectj框架，需要加入依赖</span><br><span class="line"><span class="code">&lt;!--aspectj依赖--&gt;</span></span><br><span class="line"><span class="code">    &lt;dependency&gt;</span></span><br><span class="line"><span class="code">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span><br><span class="line"><span class="code">      &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;</span></span><br><span class="line"><span class="code">      &lt;version&gt;5.2.5.RELEASE&lt;/version&gt;</span></span><br><span class="line"><span class="code">    &lt;/dependency&gt;</span></span><br><span class="line"><span class="code">2. 声明事务管理器对象</span></span><br><span class="line"><span class="code">* &lt;bean id=&quot;xx&quot; class=&quot;DataSourceTransactionManager&quot;&gt;</span></span><br><span class="line"><span class="code">3. 声明方法需要的事务类型（配置方法的事务属性【隔离级别，传播行为，超时】）</span></span><br><span class="line"><span class="code">4. 配置aop：指定哪些类要创建代理。</span></span><br></pre></td></tr></table></figure><h3 id="五-web项目中怎么使用容器对象"><a href="#五-web项目中怎么使用容器对象" class="headerlink" title="五.    web项目中怎么使用容器对象"></a>五.    web项目中怎么使用容器对象</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 做的是javase项目有main方法的，执行代码是执行main方法的，在main里面创建的容器对象</span><br><span class="line"><span class="bullet">*</span>  ApplicationContext ctx = new ClassPathXmlApplicationContext(config);</span><br><span class="line"><span class="bullet">2.</span> web项目是在tomcat服务器上运行的。tomcat一启动，项目一直运行的</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> 需求：</span><br><span class="line"><span class="bullet">*</span> web项目中容器对象只需要创建一次，把容器对象放入到全局作用域ServletContext中</span><br><span class="line"><span class="bullet">4.</span> 怎么实现：</span><br><span class="line"><span class="bullet">*</span> 使用监听器 当全局作用域对象被创建时，创建容器 存入ServletContext</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 监听器作用：</span><br><span class="line"><span class="bullet">1.</span> 创建容器对象，执行ApplicationContext ctx = new ClassPathXmlApplicationContext(config);</span><br><span class="line"><span class="bullet">2.</span> 把容器对象放入到ServletContext，ServletContext.setAttribute(key,ctx)</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 监听器可以自己创建，也可以使用框架中提供好的ContextLoaderListener</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> ApplicationContext：javase项目中使用的容器对象</span><br><span class="line"><span class="bullet">*</span> WebApplicationContext：web项目中使用的容器对象</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span>  servletContext.setAttribute(WebApplicationContext.ROOT<span class="emphasis">_WEB_</span>APPLICATION<span class="emphasis">_CONTEXT_</span>ATTRIBUTE, this.context); 把创建的容器对象，放入到全局作用域</span><br><span class="line"><span class="bullet">*</span>  key：WebApplicationContext.ROOT<span class="emphasis">_WEB_</span>APPLICATION<span class="emphasis">_CONTEXT_</span>ATTRIBUTE</span><br><span class="line"><span class="bullet">*</span>  value：this.context</span><br><span class="line"></span><br><span class="line"><span class="bullet">5.</span> 配置监听器</span><br><span class="line"><span class="bullet">*</span> 目的是创建容器对象，创建了容器对象，就能把spring.xml配置文件中的所有对象都能创建好</span><br><span class="line"><span class="bullet">*</span> 用户发起请求就可以直接使用对象了。</span><br></pre></td></tr></table></figure><p>​     </p><p>​<br>​            </p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h3&gt;</summary>
    
    
    
    <category term="Java" scheme="http://example.com/categories/Java/"/>
    
    
    <category term="Java 框架" scheme="http://example.com/tags/Java-%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
</feed>
